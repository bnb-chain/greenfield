// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/payment/base.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ReadPacket defines the read packet type
type ReadPacket int32

const (
	READ_PACKET_FREE ReadPacket = 0
	READ_PACKET_1GB  ReadPacket = 1
	READ_PACKET_10GB ReadPacket = 2
)

var ReadPacket_name = map[int32]string{
	0: "READ_PACKET_FREE",
	1: "READ_PACKET_1GB",
	2: "READ_PACKET_10GB",
}

var ReadPacket_value = map[string]int32{
	"READ_PACKET_FREE": 0,
	"READ_PACKET_1GB":  1,
	"READ_PACKET_10GB": 2,
}

func (x ReadPacket) String() string {
	return proto.EnumName(ReadPacket_name, int32(x))
}

func (ReadPacket) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cff28fb00f42b060, []int{0}
}

type OutFlowInUSD struct {
	SpAddress string                                 `protobuf:"bytes,1,opt,name=spAddress,proto3" json:"spAddress,omitempty"`
	Rate      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rate"`
}

func (m *OutFlowInUSD) Reset()         { *m = OutFlowInUSD{} }
func (m *OutFlowInUSD) String() string { return proto.CompactTextString(m) }
func (*OutFlowInUSD) ProtoMessage()    {}
func (*OutFlowInUSD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cff28fb00f42b060, []int{0}
}
func (m *OutFlowInUSD) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutFlowInUSD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutFlowInUSD.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutFlowInUSD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutFlowInUSD.Merge(m, src)
}
func (m *OutFlowInUSD) XXX_Size() int {
	return m.Size()
}
func (m *OutFlowInUSD) XXX_DiscardUnknown() {
	xxx_messageInfo_OutFlowInUSD.DiscardUnknown(m)
}

var xxx_messageInfo_OutFlowInUSD proto.InternalMessageInfo

func (m *OutFlowInUSD) GetSpAddress() string {
	if m != nil {
		return m.SpAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("bnbchain.greenfield.payment.ReadPacket", ReadPacket_name, ReadPacket_value)
	proto.RegisterType((*OutFlowInUSD)(nil), "bnbchain.greenfield.payment.OutFlowInUSD")
}

func init() { proto.RegisterFile("greenfield/payment/base.proto", fileDescriptor_cff28fb00f42b060) }

var fileDescriptor_cff28fb00f42b060 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0x2f, 0x4a, 0x4d,
	0xcd, 0x4b, 0xcb, 0x4c, 0xcd, 0x49, 0xd1, 0x2f, 0x48, 0xac, 0xcc, 0x4d, 0xcd, 0x2b, 0xd1, 0x4f,
	0x4a, 0x2c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4e, 0xca, 0x4b, 0x4a, 0xce,
	0x48, 0xcc, 0xcc, 0xd3, 0x43, 0xa8, 0xd3, 0x83, 0xaa, 0x93, 0x92, 0x4c, 0xce, 0x2f, 0xce, 0xcd,
	0x2f, 0x8e, 0x07, 0x2b, 0xd5, 0x87, 0x70, 0x20, 0xfa, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0x21,
	0xe2, 0x20, 0x16, 0x44, 0x54, 0xa9, 0x8e, 0x8b, 0xc7, 0xbf, 0xb4, 0xc4, 0x2d, 0x27, 0xbf, 0xdc,
	0x33, 0x2f, 0x34, 0xd8, 0x45, 0x48, 0x86, 0x8b, 0xb3, 0xb8, 0xc0, 0x31, 0x25, 0xa5, 0x28, 0xb5,
	0xb8, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0x21, 0x20, 0x14, 0xc0, 0xc5, 0x52, 0x94,
	0x58, 0x92, 0x2a, 0xc1, 0x04, 0x92, 0x70, 0xb2, 0x39, 0x71, 0x4f, 0x9e, 0xe1, 0xd6, 0x3d, 0x79,
	0xb5, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xa8, 0x95, 0x50, 0x4a, 0xb7,
	0x38, 0x25, 0x5b, 0xbf, 0xa4, 0xb2, 0x20, 0xb5, 0x58, 0xcf, 0x33, 0xaf, 0xe4, 0xd2, 0x16, 0x5d,
	0x2e, 0xa8, 0x8b, 0x3c, 0xf3, 0x4a, 0x82, 0xc0, 0x26, 0x69, 0x05, 0x73, 0x71, 0x05, 0xa5, 0x26,
	0xa6, 0x04, 0x24, 0x26, 0x67, 0xa7, 0x96, 0x08, 0x89, 0x70, 0x09, 0x04, 0xb9, 0x3a, 0xba, 0xc4,
	0x07, 0x38, 0x3a, 0x7b, 0xbb, 0x86, 0xc4, 0xbb, 0x05, 0xb9, 0xba, 0x0a, 0x30, 0x08, 0x09, 0x73,
	0xf1, 0x23, 0x8b, 0x1a, 0xba, 0x3b, 0x09, 0x30, 0xa2, 0x2b, 0x35, 0x34, 0x70, 0x77, 0x12, 0x60,
	0x92, 0x62, 0xe9, 0x58, 0x2c, 0xc7, 0xe0, 0xe4, 0x79, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72,
	0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7,
	0x72, 0x0c, 0x51, 0xfa, 0x48, 0x4e, 0x4d, 0xca, 0x4b, 0xd2, 0x05, 0x07, 0xa4, 0x3e, 0x52, 0x80,
	0x57, 0xc0, 0x83, 0x1c, 0xec, 0xee, 0x24, 0x36, 0x70, 0x30, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x05, 0xa0, 0x61, 0x2f, 0x95, 0x01, 0x00, 0x00,
}

func (m *OutFlowInUSD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutFlowInUSD) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutFlowInUSD) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBase(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.SpAddress) > 0 {
		i -= len(m.SpAddress)
		copy(dAtA[i:], m.SpAddress)
		i = encodeVarintBase(dAtA, i, uint64(len(m.SpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutFlowInUSD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpAddress)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovBase(uint64(l))
	return n
}

func sovBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutFlowInUSD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutFlowInUSD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutFlowInUSD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBase = fmt.Errorf("proto: unexpected end of group")
)
