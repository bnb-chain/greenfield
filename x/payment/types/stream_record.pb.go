// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bfs/payment/stream_record.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamRecord struct {
	Account           string                                  `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	CrudTimestamp     int64                                   `protobuf:"varint,2,opt,name=crudTimestamp,proto3" json:"crudTimestamp,omitempty"`
	NetflowRate       *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=netflowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"netflowRate,omitempty"`
	StaticBalance     int64                                   `protobuf:"varint,4,opt,name=staticBalance,proto3" json:"staticBalance,omitempty"`
	BufferBalance     int64                                   `protobuf:"varint,5,opt,name=bufferBalance,proto3" json:"bufferBalance,omitempty"`
	FrozenNetflowRate int64                                   `protobuf:"zigzag64,6,opt,name=frozenNetflowRate,proto3" json:"frozenNetflowRate,omitempty"`
	Status            int32                                   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *StreamRecord) Reset()         { *m = StreamRecord{} }
func (m *StreamRecord) String() string { return proto.CompactTextString(m) }
func (*StreamRecord) ProtoMessage()    {}
func (*StreamRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7a73d10a2928448, []int{0}
}
func (m *StreamRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRecord.Merge(m, src)
}
func (m *StreamRecord) XXX_Size() int {
	return m.Size()
}
func (m *StreamRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRecord proto.InternalMessageInfo

func (m *StreamRecord) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *StreamRecord) GetCrudTimestamp() int64 {
	if m != nil {
		return m.CrudTimestamp
	}
	return 0
}

func (m *StreamRecord) GetStaticBalance() int64 {
	if m != nil {
		return m.StaticBalance
	}
	return 0
}

func (m *StreamRecord) GetBufferBalance() int64 {
	if m != nil {
		return m.BufferBalance
	}
	return 0
}

func (m *StreamRecord) GetFrozenNetflowRate() int64 {
	if m != nil {
		return m.FrozenNetflowRate
	}
	return 0
}

func (m *StreamRecord) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*StreamRecord)(nil), "bnbchain.bfs.payment.StreamRecord")
}

func init() { proto.RegisterFile("bfs/payment/stream_record.proto", fileDescriptor_f7a73d10a2928448) }

var fileDescriptor_f7a73d10a2928448 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xeb, 0xf6, 0x6b, 0xab, 0xcf, 0xc0, 0x80, 0x55, 0xa1, 0xd0, 0x21, 0x8d, 0x10, 0x42,
	0x19, 0x68, 0x32, 0xb0, 0x30, 0x67, 0xeb, 0xc2, 0x60, 0x98, 0xba, 0x54, 0xb6, 0xeb, 0xb4, 0x11,
	0x8d, 0x1d, 0xd9, 0x37, 0x82, 0xf2, 0x14, 0x3c, 0x0c, 0x23, 0x0f, 0xc0, 0x58, 0x31, 0x21, 0x06,
	0x84, 0xda, 0x17, 0x41, 0xf9, 0x53, 0xd4, 0x8a, 0x29, 0xb9, 0xf7, 0xfc, 0x74, 0x7c, 0xae, 0x0e,
	0x1e, 0xf0, 0xd8, 0x86, 0x19, 0x5b, 0xa6, 0x52, 0x41, 0x68, 0xc1, 0x48, 0x96, 0x4e, 0x8c, 0x14,
	0xda, 0x4c, 0x83, 0xcc, 0x68, 0xd0, 0xa4, 0xc7, 0x15, 0x17, 0x73, 0x96, 0xa8, 0x80, 0xc7, 0x36,
	0xa8, 0xc9, 0x7e, 0x6f, 0xa6, 0x67, 0xba, 0x04, 0xc2, 0xe2, 0xaf, 0x62, 0xfb, 0xa7, 0x42, 0xdb,
	0x54, 0xdb, 0x49, 0x25, 0x54, 0x43, 0x25, 0x9d, 0xbd, 0x36, 0xf1, 0xe1, 0x6d, 0x69, 0x4f, 0x4b,
	0x77, 0xe2, 0xe0, 0x2e, 0x13, 0x42, 0xe7, 0x0a, 0x1c, 0xe4, 0x21, 0xff, 0x3f, 0xdd, 0x8e, 0xe4,
	0x1c, 0x1f, 0x09, 0x93, 0x4f, 0xef, 0x92, 0x54, 0x5a, 0x60, 0x69, 0xe6, 0x34, 0x3d, 0xe4, 0xb7,
	0xe8, 0xfe, 0x92, 0x8c, 0xf1, 0x81, 0x92, 0x10, 0x2f, 0xf4, 0x03, 0x65, 0x20, 0x9d, 0x56, 0xe1,
	0x11, 0x5d, 0x7f, 0x7e, 0x0d, 0x2e, 0x66, 0x09, 0xcc, 0x73, 0x1e, 0x08, 0x9d, 0xd6, 0x11, 0xea,
	0xcf, 0xd0, 0x4e, 0xef, 0x43, 0x58, 0x66, 0xd2, 0x06, 0x23, 0x05, 0xef, 0x2f, 0x43, 0x5c, 0x27,
	0x1c, 0x29, 0xa0, 0xbb, 0x66, 0x45, 0x02, 0x0b, 0x0c, 0x12, 0x11, 0xb1, 0x05, 0x53, 0x42, 0x3a,
	0xff, 0xaa, 0x04, 0x7b, 0xcb, 0x82, 0xe2, 0x79, 0x1c, 0x4b, 0xb3, 0xa5, 0xda, 0x15, 0xb5, 0xb7,
	0x24, 0x97, 0xf8, 0x38, 0x36, 0xfa, 0x49, 0xaa, 0x9b, 0x9d, 0xb4, 0x1d, 0x0f, 0xf9, 0x84, 0xfe,
	0x15, 0xc8, 0x09, 0xee, 0x14, 0x8f, 0xe4, 0xd6, 0xe9, 0x7a, 0xc8, 0x6f, 0xd3, 0x7a, 0x8a, 0xa2,
	0xb7, 0xb5, 0x8b, 0x56, 0x6b, 0x17, 0x7d, 0xaf, 0x5d, 0xf4, 0xbc, 0x71, 0x1b, 0xab, 0x8d, 0xdb,
	0xf8, 0xd8, 0xb8, 0x8d, 0xb1, 0xbf, 0x73, 0x2e, 0x57, 0x7c, 0x58, 0x76, 0x15, 0x16, 0xad, 0x3e,
	0xfe, 0xf6, 0x5a, 0x1e, 0xcd, 0x3b, 0x65, 0x13, 0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x31,
	0xa2, 0xae, 0x05, 0xf3, 0x01, 0x00, 0x00,
}

func (m *StreamRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintStreamRecord(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.FrozenNetflowRate != 0 {
		i = encodeVarintStreamRecord(dAtA, i, uint64((uint64(m.FrozenNetflowRate)<<1)^uint64((m.FrozenNetflowRate>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.BufferBalance != 0 {
		i = encodeVarintStreamRecord(dAtA, i, uint64(m.BufferBalance))
		i--
		dAtA[i] = 0x28
	}
	if m.StaticBalance != 0 {
		i = encodeVarintStreamRecord(dAtA, i, uint64(m.StaticBalance))
		i--
		dAtA[i] = 0x20
	}
	if m.NetflowRate != nil {
		{
			size := m.NetflowRate.Size()
			i -= size
			if _, err := m.NetflowRate.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintStreamRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CrudTimestamp != 0 {
		i = encodeVarintStreamRecord(dAtA, i, uint64(m.CrudTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintStreamRecord(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStreamRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovStreamRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovStreamRecord(uint64(l))
	}
	if m.CrudTimestamp != 0 {
		n += 1 + sovStreamRecord(uint64(m.CrudTimestamp))
	}
	if m.NetflowRate != nil {
		l = m.NetflowRate.Size()
		n += 1 + l + sovStreamRecord(uint64(l))
	}
	if m.StaticBalance != 0 {
		n += 1 + sovStreamRecord(uint64(m.StaticBalance))
	}
	if m.BufferBalance != 0 {
		n += 1 + sovStreamRecord(uint64(m.BufferBalance))
	}
	if m.FrozenNetflowRate != 0 {
		n += 1 + sozStreamRecord(uint64(m.FrozenNetflowRate))
	}
	if m.Status != 0 {
		n += 1 + sovStreamRecord(uint64(m.Status))
	}
	return n
}

func sovStreamRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStreamRecord(x uint64) (n int) {
	return sovStreamRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrudTimestamp", wireType)
			}
			m.CrudTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrudTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetflowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.NetflowRate = &v
			if err := m.NetflowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticBalance", wireType)
			}
			m.StaticBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaticBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferBalance", wireType)
			}
			m.BufferBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenNetflowRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.FrozenNetflowRate = int64(v)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStreamRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreamRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreamRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStreamRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStreamRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStreamRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStreamRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreamRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStreamRecord = fmt.Errorf("proto: unexpected end of group")
)
