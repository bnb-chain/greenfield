// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bfs/payment/stream_record.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Stream Payment Record of a stream account
type StreamRecord struct {
	// account address
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// latest update timestamp of the stream record
	CrudTimestamp int64 `protobuf:"varint,2,opt,name=crudTimestamp,proto3" json:"crudTimestamp,omitempty"`
	// The per-second rate that an account's balance is changing.
	// It is the sum of the account's inbound and outbound flow rates.
	NetflowRate github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=netflowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"netflowRate"`
	// The balance of the stream account at the latest CRUD timestamp.
	StaticBalance   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=staticBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staticBalance"`
	BufferBalance   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=bufferBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bufferBalance"`
	LockBalance     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=lockBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lockBalance"`
	Status          int32                                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	SettleTimestamp int64                                  `protobuf:"varint,8,opt,name=settleTimestamp,proto3" json:"settleTimestamp,omitempty"`
	OutFlowsInUSD   []OutFlowInUSD                         `protobuf:"bytes,9,rep,name=outFlowsInUSD,proto3" json:"outFlowsInUSD"`
}

func (m *StreamRecord) Reset()         { *m = StreamRecord{} }
func (m *StreamRecord) String() string { return proto.CompactTextString(m) }
func (*StreamRecord) ProtoMessage()    {}
func (*StreamRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7a73d10a2928448, []int{0}
}
func (m *StreamRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRecord.Merge(m, src)
}
func (m *StreamRecord) XXX_Size() int {
	return m.Size()
}
func (m *StreamRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRecord proto.InternalMessageInfo

func (m *StreamRecord) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *StreamRecord) GetCrudTimestamp() int64 {
	if m != nil {
		return m.CrudTimestamp
	}
	return 0
}

func (m *StreamRecord) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StreamRecord) GetSettleTimestamp() int64 {
	if m != nil {
		return m.SettleTimestamp
	}
	return 0
}

func (m *StreamRecord) GetOutFlowsInUSD() []OutFlowInUSD {
	if m != nil {
		return m.OutFlowsInUSD
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamRecord)(nil), "bnbchain.bfs.payment.StreamRecord")
}

func init() { proto.RegisterFile("bfs/payment/stream_record.proto", fileDescriptor_f7a73d10a2928448) }

var fileDescriptor_f7a73d10a2928448 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x41, 0xab, 0xd3, 0x40,
	0x18, 0x4c, 0x6c, 0x5f, 0x9f, 0x6f, 0x9f, 0x45, 0x58, 0x4a, 0x89, 0x3d, 0xa4, 0xa1, 0x88, 0xe4,
	0xd2, 0x04, 0xf4, 0xea, 0x29, 0x88, 0xd0, 0x8b, 0x42, 0xaa, 0x17, 0x0f, 0x96, 0xdd, 0xed, 0xa6,
	0x0d, 0x4d, 0x76, 0x43, 0xf6, 0x0b, 0xb5, 0xff, 0xc2, 0x1f, 0xe3, 0x8f, 0xe8, 0xb1, 0x78, 0x12,
	0x0f, 0x45, 0xda, 0x8b, 0x3f, 0x43, 0xb2, 0x49, 0x35, 0x91, 0x77, 0xec, 0x29, 0xf9, 0x66, 0x67,
	0x67, 0x76, 0x76, 0x07, 0x8d, 0x69, 0xa4, 0xfc, 0x8c, 0xec, 0x52, 0x2e, 0xc0, 0x57, 0x90, 0x73,
	0x92, 0x2e, 0x72, 0xce, 0x64, 0xbe, 0xf4, 0xb2, 0x5c, 0x82, 0xc4, 0x03, 0x2a, 0x28, 0x5b, 0x93,
	0x58, 0x78, 0x34, 0x52, 0x5e, 0xcd, 0x1c, 0x0d, 0x9b, 0xdb, 0x28, 0x51, 0xbc, 0x62, 0x8f, 0x9e,
	0x31, 0xa9, 0x52, 0xa9, 0x16, 0x7a, 0xf2, 0xab, 0xa1, 0x5e, 0x1a, 0xac, 0xe4, 0x4a, 0x56, 0x78,
	0xf9, 0x57, 0xa1, 0x93, 0xdf, 0x5d, 0xf4, 0x64, 0xae, 0x6d, 0x43, 0xed, 0x8a, 0x2d, 0x74, 0x4b,
	0x18, 0x93, 0x85, 0x00, 0xcb, 0x74, 0x4c, 0xf7, 0x2e, 0xbc, 0x8c, 0xf8, 0x39, 0xea, 0xb3, 0xbc,
	0x58, 0x7e, 0x88, 0x53, 0xae, 0x80, 0xa4, 0x99, 0xf5, 0xc8, 0x31, 0xdd, 0x4e, 0xd8, 0x06, 0xf1,
	0x67, 0x74, 0x2f, 0x38, 0x44, 0x89, 0xdc, 0x86, 0x04, 0xb8, 0xd5, 0x29, 0x35, 0x82, 0xd7, 0xfb,
	0xe3, 0xd8, 0xf8, 0x79, 0x1c, 0xbf, 0x58, 0xc5, 0xb0, 0x2e, 0xa8, 0xc7, 0x64, 0x5a, 0x1f, 0xae,
	0xfe, 0x4c, 0xd5, 0x72, 0xe3, 0xc3, 0x2e, 0xe3, 0xca, 0x9b, 0x09, 0xf8, 0xfe, 0x6d, 0x8a, 0xea,
	0xb3, 0xcf, 0x04, 0x84, 0x4d, 0x41, 0x4c, 0x51, 0x5f, 0x01, 0x81, 0x98, 0x05, 0x24, 0x21, 0x82,
	0x71, 0xab, 0x7b, 0x05, 0x87, 0xb6, 0x64, 0xe9, 0x41, 0x8b, 0x28, 0xe2, 0xf9, 0xc5, 0xe3, 0xe6,
	0x1a, 0x1e, 0x2d, 0xc9, 0xf2, 0x9e, 0x12, 0xc9, 0x36, 0x17, 0x87, 0xde, 0x35, 0xee, 0xa9, 0x21,
	0x88, 0x87, 0xa8, 0x57, 0x86, 0x2a, 0x94, 0x75, 0xeb, 0x98, 0xee, 0x4d, 0x58, 0x4f, 0xd8, 0x45,
	0x4f, 0x15, 0x07, 0x48, 0xf8, 0xbf, 0x77, 0x7c, 0xac, 0xdf, 0xf1, 0x7f, 0x18, 0xbf, 0x43, 0x7d,
	0x59, 0xc0, 0xdb, 0x44, 0x6e, 0xd5, 0x4c, 0x7c, 0x9c, 0xbf, 0xb1, 0xee, 0x9c, 0x8e, 0x7b, 0xff,
	0x72, 0xe2, 0x3d, 0xd4, 0x48, 0xef, 0x7d, 0x45, 0xd5, 0xcc, 0xa0, 0x5b, 0xe6, 0x08, 0xdb, 0xdb,
	0x83, 0x60, 0x7f, 0xb2, 0xcd, 0xc3, 0xc9, 0x36, 0x7f, 0x9d, 0x6c, 0xf3, 0xeb, 0xd9, 0x36, 0x0e,
	0x67, 0xdb, 0xf8, 0x71, 0xb6, 0x8d, 0x4f, 0x6e, 0x23, 0x2e, 0x15, 0x74, 0xaa, 0xd5, 0xfd, 0xb2,
	0xe2, 0x5f, 0xfe, 0x96, 0x5c, 0x87, 0xa6, 0x3d, 0xdd, 0xda, 0x57, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xe0, 0xa9, 0x86, 0xff, 0x37, 0x03, 0x00, 0x00,
}

func (m *StreamRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutFlowsInUSD) > 0 {
		for iNdEx := len(m.OutFlowsInUSD) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutFlowsInUSD[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStreamRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.SettleTimestamp != 0 {
		i = encodeVarintStreamRecord(dAtA, i, uint64(m.SettleTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintStreamRecord(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.LockBalance.Size()
		i -= size
		if _, err := m.LockBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStreamRecord(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BufferBalance.Size()
		i -= size
		if _, err := m.BufferBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStreamRecord(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.StaticBalance.Size()
		i -= size
		if _, err := m.StaticBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStreamRecord(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NetflowRate.Size()
		i -= size
		if _, err := m.NetflowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStreamRecord(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CrudTimestamp != 0 {
		i = encodeVarintStreamRecord(dAtA, i, uint64(m.CrudTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintStreamRecord(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStreamRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovStreamRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovStreamRecord(uint64(l))
	}
	if m.CrudTimestamp != 0 {
		n += 1 + sovStreamRecord(uint64(m.CrudTimestamp))
	}
	l = m.NetflowRate.Size()
	n += 1 + l + sovStreamRecord(uint64(l))
	l = m.StaticBalance.Size()
	n += 1 + l + sovStreamRecord(uint64(l))
	l = m.BufferBalance.Size()
	n += 1 + l + sovStreamRecord(uint64(l))
	l = m.LockBalance.Size()
	n += 1 + l + sovStreamRecord(uint64(l))
	if m.Status != 0 {
		n += 1 + sovStreamRecord(uint64(m.Status))
	}
	if m.SettleTimestamp != 0 {
		n += 1 + sovStreamRecord(uint64(m.SettleTimestamp))
	}
	if len(m.OutFlowsInUSD) > 0 {
		for _, e := range m.OutFlowsInUSD {
			l = e.Size()
			n += 1 + l + sovStreamRecord(uint64(l))
		}
	}
	return n
}

func sovStreamRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStreamRecord(x uint64) (n int) {
	return sovStreamRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrudTimestamp", wireType)
			}
			m.CrudTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrudTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetflowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetflowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StaticBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BufferBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleTimestamp", wireType)
			}
			m.SettleTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettleTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutFlowsInUSD", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutFlowsInUSD = append(m.OutFlowsInUSD, OutFlowInUSD{})
			if err := m.OutFlowsInUSD[len(m.OutFlowsInUSD)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStreamRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreamRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreamRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStreamRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStreamRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStreamRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStreamRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreamRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStreamRecord = fmt.Errorf("proto: unexpected end of group")
)
