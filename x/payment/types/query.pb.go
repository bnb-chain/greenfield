// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/payment/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetStreamRecordRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryGetStreamRecordRequest) Reset()         { *m = QueryGetStreamRecordRequest{} }
func (m *QueryGetStreamRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStreamRecordRequest) ProtoMessage()    {}
func (*QueryGetStreamRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{2}
}
func (m *QueryGetStreamRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStreamRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStreamRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStreamRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStreamRecordRequest.Merge(m, src)
}
func (m *QueryGetStreamRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStreamRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStreamRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStreamRecordRequest proto.InternalMessageInfo

func (m *QueryGetStreamRecordRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryGetStreamRecordResponse struct {
	StreamRecord StreamRecord `protobuf:"bytes,1,opt,name=streamRecord,proto3" json:"streamRecord"`
}

func (m *QueryGetStreamRecordResponse) Reset()         { *m = QueryGetStreamRecordResponse{} }
func (m *QueryGetStreamRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStreamRecordResponse) ProtoMessage()    {}
func (*QueryGetStreamRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{3}
}
func (m *QueryGetStreamRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStreamRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStreamRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStreamRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStreamRecordResponse.Merge(m, src)
}
func (m *QueryGetStreamRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStreamRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStreamRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStreamRecordResponse proto.InternalMessageInfo

func (m *QueryGetStreamRecordResponse) GetStreamRecord() StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return StreamRecord{}
}

type QueryAllStreamRecordRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStreamRecordRequest) Reset()         { *m = QueryAllStreamRecordRequest{} }
func (m *QueryAllStreamRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStreamRecordRequest) ProtoMessage()    {}
func (*QueryAllStreamRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{4}
}
func (m *QueryAllStreamRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStreamRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStreamRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStreamRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStreamRecordRequest.Merge(m, src)
}
func (m *QueryAllStreamRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStreamRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStreamRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStreamRecordRequest proto.InternalMessageInfo

func (m *QueryAllStreamRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStreamRecordResponse struct {
	StreamRecord []StreamRecord      `protobuf:"bytes,1,rep,name=streamRecord,proto3" json:"streamRecord"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStreamRecordResponse) Reset()         { *m = QueryAllStreamRecordResponse{} }
func (m *QueryAllStreamRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStreamRecordResponse) ProtoMessage()    {}
func (*QueryAllStreamRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{5}
}
func (m *QueryAllStreamRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStreamRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStreamRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStreamRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStreamRecordResponse.Merge(m, src)
}
func (m *QueryAllStreamRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStreamRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStreamRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStreamRecordResponse proto.InternalMessageInfo

func (m *QueryAllStreamRecordResponse) GetStreamRecord() []StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return nil
}

func (m *QueryAllStreamRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPaymentAccountCountRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetPaymentAccountCountRequest) Reset()         { *m = QueryGetPaymentAccountCountRequest{} }
func (m *QueryGetPaymentAccountCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountCountRequest) ProtoMessage()    {}
func (*QueryGetPaymentAccountCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{6}
}
func (m *QueryGetPaymentAccountCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountCountRequest.Merge(m, src)
}
func (m *QueryGetPaymentAccountCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountCountRequest proto.InternalMessageInfo

func (m *QueryGetPaymentAccountCountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetPaymentAccountCountResponse struct {
	PaymentAccountCount PaymentAccountCount `protobuf:"bytes,1,opt,name=paymentAccountCount,proto3" json:"paymentAccountCount"`
}

func (m *QueryGetPaymentAccountCountResponse) Reset()         { *m = QueryGetPaymentAccountCountResponse{} }
func (m *QueryGetPaymentAccountCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountCountResponse) ProtoMessage()    {}
func (*QueryGetPaymentAccountCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{7}
}
func (m *QueryGetPaymentAccountCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountCountResponse.Merge(m, src)
}
func (m *QueryGetPaymentAccountCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountCountResponse proto.InternalMessageInfo

func (m *QueryGetPaymentAccountCountResponse) GetPaymentAccountCount() PaymentAccountCount {
	if m != nil {
		return m.PaymentAccountCount
	}
	return PaymentAccountCount{}
}

type QueryAllPaymentAccountCountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAccountCountRequest) Reset()         { *m = QueryAllPaymentAccountCountRequest{} }
func (m *QueryAllPaymentAccountCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAccountCountRequest) ProtoMessage()    {}
func (*QueryAllPaymentAccountCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{8}
}
func (m *QueryAllPaymentAccountCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAccountCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAccountCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAccountCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAccountCountRequest.Merge(m, src)
}
func (m *QueryAllPaymentAccountCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAccountCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAccountCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAccountCountRequest proto.InternalMessageInfo

func (m *QueryAllPaymentAccountCountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPaymentAccountCountResponse struct {
	PaymentAccountCount []PaymentAccountCount `protobuf:"bytes,1,rep,name=paymentAccountCount,proto3" json:"paymentAccountCount"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAccountCountResponse) Reset()         { *m = QueryAllPaymentAccountCountResponse{} }
func (m *QueryAllPaymentAccountCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAccountCountResponse) ProtoMessage()    {}
func (*QueryAllPaymentAccountCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{9}
}
func (m *QueryAllPaymentAccountCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAccountCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAccountCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAccountCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAccountCountResponse.Merge(m, src)
}
func (m *QueryAllPaymentAccountCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAccountCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAccountCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAccountCountResponse proto.InternalMessageInfo

func (m *QueryAllPaymentAccountCountResponse) GetPaymentAccountCount() []PaymentAccountCount {
	if m != nil {
		return m.PaymentAccountCount
	}
	return nil
}

func (m *QueryAllPaymentAccountCountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPaymentAccountRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryGetPaymentAccountRequest) Reset()         { *m = QueryGetPaymentAccountRequest{} }
func (m *QueryGetPaymentAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountRequest) ProtoMessage()    {}
func (*QueryGetPaymentAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{10}
}
func (m *QueryGetPaymentAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountRequest.Merge(m, src)
}
func (m *QueryGetPaymentAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountRequest proto.InternalMessageInfo

func (m *QueryGetPaymentAccountRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryGetPaymentAccountResponse struct {
	PaymentAccount PaymentAccount `protobuf:"bytes,1,opt,name=paymentAccount,proto3" json:"paymentAccount"`
}

func (m *QueryGetPaymentAccountResponse) Reset()         { *m = QueryGetPaymentAccountResponse{} }
func (m *QueryGetPaymentAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountResponse) ProtoMessage()    {}
func (*QueryGetPaymentAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{11}
}
func (m *QueryGetPaymentAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountResponse.Merge(m, src)
}
func (m *QueryGetPaymentAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountResponse proto.InternalMessageInfo

func (m *QueryGetPaymentAccountResponse) GetPaymentAccount() PaymentAccount {
	if m != nil {
		return m.PaymentAccount
	}
	return PaymentAccount{}
}

type QueryAllPaymentAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAccountRequest) Reset()         { *m = QueryAllPaymentAccountRequest{} }
func (m *QueryAllPaymentAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAccountRequest) ProtoMessage()    {}
func (*QueryAllPaymentAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{12}
}
func (m *QueryAllPaymentAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAccountRequest.Merge(m, src)
}
func (m *QueryAllPaymentAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAccountRequest proto.InternalMessageInfo

func (m *QueryAllPaymentAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPaymentAccountResponse struct {
	PaymentAccount []PaymentAccount    `protobuf:"bytes,1,rep,name=paymentAccount,proto3" json:"paymentAccount"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAccountResponse) Reset()         { *m = QueryAllPaymentAccountResponse{} }
func (m *QueryAllPaymentAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAccountResponse) ProtoMessage()    {}
func (*QueryAllPaymentAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{13}
}
func (m *QueryAllPaymentAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAccountResponse.Merge(m, src)
}
func (m *QueryAllPaymentAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAccountResponse proto.InternalMessageInfo

func (m *QueryAllPaymentAccountResponse) GetPaymentAccount() []PaymentAccount {
	if m != nil {
		return m.PaymentAccount
	}
	return nil
}

func (m *QueryAllPaymentAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDynamicBalanceRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryDynamicBalanceRequest) Reset()         { *m = QueryDynamicBalanceRequest{} }
func (m *QueryDynamicBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDynamicBalanceRequest) ProtoMessage()    {}
func (*QueryDynamicBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{14}
}
func (m *QueryDynamicBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDynamicBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDynamicBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDynamicBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDynamicBalanceRequest.Merge(m, src)
}
func (m *QueryDynamicBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDynamicBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDynamicBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDynamicBalanceRequest proto.InternalMessageInfo

func (m *QueryDynamicBalanceRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryDynamicBalanceResponse struct {
	DynamicBalance   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=dynamicBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"dynamicBalance"`
	StreamRecord     StreamRecord                           `protobuf:"bytes,2,opt,name=streamRecord,proto3" json:"streamRecord"`
	CurrentTimestamp int64                                  `protobuf:"varint,3,opt,name=currentTimestamp,proto3" json:"currentTimestamp,omitempty"`
}

func (m *QueryDynamicBalanceResponse) Reset()         { *m = QueryDynamicBalanceResponse{} }
func (m *QueryDynamicBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDynamicBalanceResponse) ProtoMessage()    {}
func (*QueryDynamicBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{15}
}
func (m *QueryDynamicBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDynamicBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDynamicBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDynamicBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDynamicBalanceResponse.Merge(m, src)
}
func (m *QueryDynamicBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDynamicBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDynamicBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDynamicBalanceResponse proto.InternalMessageInfo

func (m *QueryDynamicBalanceResponse) GetStreamRecord() StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return StreamRecord{}
}

func (m *QueryDynamicBalanceResponse) GetCurrentTimestamp() int64 {
	if m != nil {
		return m.CurrentTimestamp
	}
	return 0
}

type QueryGetPaymentAccountsByOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetPaymentAccountsByOwnerRequest) Reset()         { *m = QueryGetPaymentAccountsByOwnerRequest{} }
func (m *QueryGetPaymentAccountsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountsByOwnerRequest) ProtoMessage()    {}
func (*QueryGetPaymentAccountsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{16}
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountsByOwnerRequest.Merge(m, src)
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountsByOwnerRequest proto.InternalMessageInfo

func (m *QueryGetPaymentAccountsByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetPaymentAccountsByOwnerResponse struct {
	PaymentAccounts []string `protobuf:"bytes,1,rep,name=paymentAccounts,proto3" json:"paymentAccounts,omitempty"`
}

func (m *QueryGetPaymentAccountsByOwnerResponse) Reset() {
	*m = QueryGetPaymentAccountsByOwnerResponse{}
}
func (m *QueryGetPaymentAccountsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountsByOwnerResponse) ProtoMessage()    {}
func (*QueryGetPaymentAccountsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{17}
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountsByOwnerResponse.Merge(m, src)
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountsByOwnerResponse proto.InternalMessageInfo

func (m *QueryGetPaymentAccountsByOwnerResponse) GetPaymentAccounts() []string {
	if m != nil {
		return m.PaymentAccounts
	}
	return nil
}

type QueryGetAutoSettleRecordRequest struct {
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Addr      string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryGetAutoSettleRecordRequest) Reset()         { *m = QueryGetAutoSettleRecordRequest{} }
func (m *QueryGetAutoSettleRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAutoSettleRecordRequest) ProtoMessage()    {}
func (*QueryGetAutoSettleRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{18}
}
func (m *QueryGetAutoSettleRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAutoSettleRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAutoSettleRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAutoSettleRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAutoSettleRecordRequest.Merge(m, src)
}
func (m *QueryGetAutoSettleRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAutoSettleRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAutoSettleRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAutoSettleRecordRequest proto.InternalMessageInfo

func (m *QueryGetAutoSettleRecordRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *QueryGetAutoSettleRecordRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryGetAutoSettleRecordResponse struct {
	AutoSettleRecord AutoSettleRecord `protobuf:"bytes,1,opt,name=autoSettleRecord,proto3" json:"autoSettleRecord"`
}

func (m *QueryGetAutoSettleRecordResponse) Reset()         { *m = QueryGetAutoSettleRecordResponse{} }
func (m *QueryGetAutoSettleRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAutoSettleRecordResponse) ProtoMessage()    {}
func (*QueryGetAutoSettleRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{19}
}
func (m *QueryGetAutoSettleRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAutoSettleRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAutoSettleRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAutoSettleRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAutoSettleRecordResponse.Merge(m, src)
}
func (m *QueryGetAutoSettleRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAutoSettleRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAutoSettleRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAutoSettleRecordResponse proto.InternalMessageInfo

func (m *QueryGetAutoSettleRecordResponse) GetAutoSettleRecord() AutoSettleRecord {
	if m != nil {
		return m.AutoSettleRecord
	}
	return AutoSettleRecord{}
}

type QueryAllAutoSettleRecordRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAutoSettleRecordRequest) Reset()         { *m = QueryAllAutoSettleRecordRequest{} }
func (m *QueryAllAutoSettleRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAutoSettleRecordRequest) ProtoMessage()    {}
func (*QueryAllAutoSettleRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{20}
}
func (m *QueryAllAutoSettleRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAutoSettleRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAutoSettleRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAutoSettleRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAutoSettleRecordRequest.Merge(m, src)
}
func (m *QueryAllAutoSettleRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAutoSettleRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAutoSettleRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAutoSettleRecordRequest proto.InternalMessageInfo

func (m *QueryAllAutoSettleRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAutoSettleRecordResponse struct {
	AutoSettleRecord []AutoSettleRecord  `protobuf:"bytes,1,rep,name=autoSettleRecord,proto3" json:"autoSettleRecord"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAutoSettleRecordResponse) Reset()         { *m = QueryAllAutoSettleRecordResponse{} }
func (m *QueryAllAutoSettleRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAutoSettleRecordResponse) ProtoMessage()    {}
func (*QueryAllAutoSettleRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{21}
}
func (m *QueryAllAutoSettleRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAutoSettleRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAutoSettleRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAutoSettleRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAutoSettleRecordResponse.Merge(m, src)
}
func (m *QueryAllAutoSettleRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAutoSettleRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAutoSettleRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAutoSettleRecordResponse proto.InternalMessageInfo

func (m *QueryAllAutoSettleRecordResponse) GetAutoSettleRecord() []AutoSettleRecord {
	if m != nil {
		return m.AutoSettleRecord
	}
	return nil
}

func (m *QueryAllAutoSettleRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "bnbchain.greenfield.payment.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bnbchain.greenfield.payment.QueryParamsResponse")
	proto.RegisterType((*QueryGetStreamRecordRequest)(nil), "bnbchain.greenfield.payment.QueryGetStreamRecordRequest")
	proto.RegisterType((*QueryGetStreamRecordResponse)(nil), "bnbchain.greenfield.payment.QueryGetStreamRecordResponse")
	proto.RegisterType((*QueryAllStreamRecordRequest)(nil), "bnbchain.greenfield.payment.QueryAllStreamRecordRequest")
	proto.RegisterType((*QueryAllStreamRecordResponse)(nil), "bnbchain.greenfield.payment.QueryAllStreamRecordResponse")
	proto.RegisterType((*QueryGetPaymentAccountCountRequest)(nil), "bnbchain.greenfield.payment.QueryGetPaymentAccountCountRequest")
	proto.RegisterType((*QueryGetPaymentAccountCountResponse)(nil), "bnbchain.greenfield.payment.QueryGetPaymentAccountCountResponse")
	proto.RegisterType((*QueryAllPaymentAccountCountRequest)(nil), "bnbchain.greenfield.payment.QueryAllPaymentAccountCountRequest")
	proto.RegisterType((*QueryAllPaymentAccountCountResponse)(nil), "bnbchain.greenfield.payment.QueryAllPaymentAccountCountResponse")
	proto.RegisterType((*QueryGetPaymentAccountRequest)(nil), "bnbchain.greenfield.payment.QueryGetPaymentAccountRequest")
	proto.RegisterType((*QueryGetPaymentAccountResponse)(nil), "bnbchain.greenfield.payment.QueryGetPaymentAccountResponse")
	proto.RegisterType((*QueryAllPaymentAccountRequest)(nil), "bnbchain.greenfield.payment.QueryAllPaymentAccountRequest")
	proto.RegisterType((*QueryAllPaymentAccountResponse)(nil), "bnbchain.greenfield.payment.QueryAllPaymentAccountResponse")
	proto.RegisterType((*QueryDynamicBalanceRequest)(nil), "bnbchain.greenfield.payment.QueryDynamicBalanceRequest")
	proto.RegisterType((*QueryDynamicBalanceResponse)(nil), "bnbchain.greenfield.payment.QueryDynamicBalanceResponse")
	proto.RegisterType((*QueryGetPaymentAccountsByOwnerRequest)(nil), "bnbchain.greenfield.payment.QueryGetPaymentAccountsByOwnerRequest")
	proto.RegisterType((*QueryGetPaymentAccountsByOwnerResponse)(nil), "bnbchain.greenfield.payment.QueryGetPaymentAccountsByOwnerResponse")
	proto.RegisterType((*QueryGetAutoSettleRecordRequest)(nil), "bnbchain.greenfield.payment.QueryGetAutoSettleRecordRequest")
	proto.RegisterType((*QueryGetAutoSettleRecordResponse)(nil), "bnbchain.greenfield.payment.QueryGetAutoSettleRecordResponse")
	proto.RegisterType((*QueryAllAutoSettleRecordRequest)(nil), "bnbchain.greenfield.payment.QueryAllAutoSettleRecordRequest")
	proto.RegisterType((*QueryAllAutoSettleRecordResponse)(nil), "bnbchain.greenfield.payment.QueryAllAutoSettleRecordResponse")
}

func init() { proto.RegisterFile("greenfield/payment/query.proto", fileDescriptor_f62e6684473ccf4a) }

var fileDescriptor_f62e6684473ccf4a = []byte{
	// 1178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xc4, 0x6d, 0x50, 0x1e, 0x55, 0x1a, 0x26, 0x11, 0x4a, 0xdd, 0xe0, 0x84, 0x89, 0x1a,
	0xf2, 0x03, 0xef, 0x36, 0x89, 0xa0, 0x4d, 0x9a, 0xaa, 0xd8, 0x45, 0x54, 0x39, 0x11, 0x1c, 0x0e,
	0xc0, 0xc5, 0x1a, 0xdb, 0x83, 0x63, 0xb1, 0xde, 0x75, 0xbd, 0x63, 0xc0, 0x8a, 0x72, 0x01, 0xee,
	0x45, 0xe2, 0x2f, 0x41, 0xe2, 0x00, 0x08, 0x2e, 0x88, 0x43, 0x0f, 0x08, 0x55, 0xed, 0xa5, 0xe2,
	0x50, 0xa1, 0x04, 0x89, 0x0b, 0x7f, 0x04, 0xf2, 0xec, 0x5b, 0xc7, 0xbb, 0xde, 0x5f, 0x71, 0xf6,
	0x92, 0x78, 0x67, 0xe7, 0x7d, 0xf3, 0x7d, 0xef, 0xbd, 0x99, 0xf9, 0x6c, 0xc8, 0xd5, 0xdb, 0x42,
	0x98, 0x9f, 0x36, 0x84, 0x51, 0xd3, 0x5b, 0xbc, 0xdb, 0x14, 0xa6, 0xd4, 0x1f, 0x76, 0x44, 0xbb,
	0xab, 0xb5, 0xda, 0x96, 0xb4, 0xe8, 0xf5, 0x8a, 0x59, 0xa9, 0x1e, 0xf2, 0x86, 0xa9, 0x9d, 0x4d,
	0xd4, 0x70, 0x62, 0x76, 0xad, 0x6a, 0xd9, 0x4d, 0xcb, 0xd6, 0x2b, 0xdc, 0x16, 0x4e, 0x94, 0xfe,
	0xf9, 0x46, 0x45, 0x48, 0xbe, 0xa1, 0xb7, 0x78, 0xbd, 0x61, 0x72, 0xd9, 0xb0, 0x4c, 0x07, 0x28,
	0x7b, 0xcd, 0x99, 0x5b, 0x56, 0x4f, 0xba, 0xf3, 0x80, 0xaf, 0x66, 0xeb, 0x56, 0xdd, 0x72, 0xc6,
	0x7b, 0x9f, 0x70, 0x74, 0xbe, 0x6e, 0x59, 0x75, 0x43, 0xe8, 0xbc, 0xd5, 0xd0, 0xb9, 0x69, 0x5a,
	0x52, 0xa1, 0xb9, 0x31, 0xeb, 0x01, 0xbc, 0x79, 0x47, 0x5a, 0x65, 0x5b, 0x48, 0x69, 0x88, 0x72,
	0x5b, 0x54, 0xad, 0x76, 0x0d, 0x27, 0x2f, 0x04, 0x4c, 0x6e, 0xf1, 0x36, 0x6f, 0xba, 0x68, 0x2b,
	0x81, 0x13, 0xd4, 0xff, 0x32, 0xaf, 0x56, 0xad, 0x8e, 0x29, 0x71, 0xa6, 0x16, 0x3f, 0xb3, 0x3c,
	0x38, 0x7f, 0x39, 0x60, 0xbe, 0x2d, 0xdb, 0x82, 0x37, 0x3d, 0x14, 0xd9, 0x2c, 0xd0, 0x0f, 0x7a,
	0x09, 0xdc, 0x57, 0xb4, 0x4a, 0xe2, 0x61, 0x47, 0xd8, 0x92, 0x7d, 0x04, 0x33, 0x9e, 0x51, 0xbb,
	0x65, 0x99, 0xb6, 0xa0, 0x05, 0x98, 0x70, 0xe8, 0xcf, 0x91, 0x45, 0xb2, 0xf2, 0xf2, 0xe6, 0x92,
	0x16, 0x51, 0x25, 0xcd, 0x09, 0x2e, 0x5e, 0x7a, 0xfc, 0x62, 0x61, 0xac, 0x84, 0x81, 0xec, 0x16,
	0x5c, 0x57, 0xc8, 0x0f, 0x84, 0x3c, 0x50, 0x74, 0x4a, 0x8a, 0x0d, 0x2e, 0x4c, 0xe7, 0xe0, 0x25,
	0x54, 0xa3, 0x96, 0x98, 0x2c, 0xb9, 0x8f, 0xcc, 0x86, 0xf9, 0xe0, 0x40, 0xe4, 0x76, 0x00, 0x57,
	0xec, 0x81, 0x71, 0x64, 0xb8, 0x1a, 0xc9, 0x70, 0x10, 0x08, 0x79, 0x7a, 0x40, 0x98, 0x40, 0xb6,
	0x05, 0xc3, 0x08, 0x62, 0xfb, 0x1e, 0xc0, 0x59, 0xbf, 0xe1, 0x8a, 0xcb, 0x1a, 0xf6, 0x58, 0xaf,
	0x39, 0x35, 0xa7, 0xa5, 0xb1, 0x39, 0xb5, 0x7d, 0x5e, 0x17, 0x18, 0x5b, 0x1a, 0x88, 0x64, 0xbf,
	0x10, 0x14, 0x37, 0xb4, 0x4e, 0xa8, 0xb8, 0xcc, 0x85, 0xc5, 0xd1, 0x07, 0x1e, 0xf6, 0xe3, 0x8a,
	0xfd, 0x1b, 0xb1, 0xec, 0x1d, 0x46, 0x1e, 0xfa, 0x3b, 0xc0, 0xdc, 0xd2, 0xec, 0x3b, 0x8b, 0x17,
	0x9c, 0xa2, 0xdd, 0xef, 0xfd, 0x71, 0x93, 0x35, 0x0b, 0x97, 0xad, 0x2f, 0x4c, 0xd1, 0xc6, 0xc2,
	0x3a, 0x0f, 0xec, 0x11, 0x81, 0xa5, 0xc8, 0x60, 0xcc, 0xc0, 0x21, 0xcc, 0xb4, 0x86, 0x5f, 0x63,
	0xce, 0x6f, 0xc6, 0xf4, 0xe1, 0x50, 0x1c, 0xe6, 0x23, 0x08, 0x92, 0x19, 0xa8, 0xa6, 0x60, 0x18,
	0x11, 0x6a, 0xd2, 0x2a, 0xfd, 0x73, 0x57, 0x7f, 0xd8, 0x72, 0x71, 0xfa, 0x33, 0x29, 0xeb, 0x4f,
	0xaf, 0x2d, 0xb6, 0xe0, 0xb5, 0xe0, 0xca, 0xba, 0x39, 0xa4, 0x70, 0x89, 0xd7, 0x6a, 0x6e, 0x43,
	0xa8, 0xcf, 0xec, 0x08, 0x72, 0x61, 0x41, 0x98, 0x89, 0x8f, 0x61, 0xca, 0x4b, 0x1b, 0xb3, 0xbf,
	0x7e, 0x8e, 0x24, 0xa0, 0x7e, 0x1f, 0x10, 0xab, 0x23, 0xe3, 0xa1, 0x5a, 0xa4, 0x5d, 0xf5, 0xdf,
	0x09, 0xca, 0x0c, 0x58, 0x29, 0x42, 0x66, 0x26, 0x15, 0x99, 0xe9, 0x55, 0xf8, 0x6d, 0xc8, 0x2a,
	0x15, 0xef, 0x76, 0x4d, 0xde, 0x6c, 0x54, 0x8b, 0xdc, 0xe0, 0x66, 0x55, 0xc4, 0x9f, 0xe5, 0xdf,
	0x8c, 0xe3, 0xb9, 0xea, 0x0f, 0x44, 0xed, 0x35, 0x98, 0xaa, 0x79, 0xde, 0x38, 0x00, 0xc5, 0xdd,
	0x9e, 0x9c, 0xbf, 0x5e, 0x2c, 0x2c, 0xd7, 0x1b, 0xf2, 0xb0, 0x53, 0xd1, 0xaa, 0x56, 0x13, 0x6f,
	0x74, 0xfc, 0x97, 0xb7, 0x6b, 0x9f, 0xe9, 0xb2, 0xdb, 0x12, 0xb6, 0xb6, 0x67, 0xca, 0xa7, 0x3f,
	0xe4, 0x01, 0x55, 0xed, 0x99, 0xb2, 0xe4, 0xc3, 0x1c, 0x3a, 0x54, 0xc7, 0x53, 0xb8, 0x31, 0xe8,
	0x1a, 0x4c, 0x57, 0x3b, 0xed, 0xb6, 0x30, 0xe5, 0x87, 0x8d, 0xa6, 0xb0, 0x25, 0x6f, 0xb6, 0xe6,
	0x32, 0x8b, 0x64, 0x25, 0x53, 0x1a, 0x1a, 0x67, 0x77, 0xe1, 0x46, 0x70, 0xaf, 0xdb, 0xc5, 0xee,
	0xfb, 0xbd, 0xd3, 0x31, 0xfa, 0xe8, 0x2c, 0xc1, 0x72, 0x5c, 0x38, 0xe6, 0x73, 0x05, 0xae, 0x7a,
	0x5b, 0xc0, 0x56, 0xcd, 0x34, 0x59, 0xf2, 0x0f, 0xb3, 0x03, 0x58, 0x70, 0x31, 0x0b, 0x1d, 0x69,
	0x1d, 0x28, 0x53, 0xe3, 0xbd, 0xf4, 0xe6, 0x61, 0x52, 0xf6, 0xa5, 0x11, 0x25, 0xed, 0x6c, 0xa0,
	0xbf, 0xa7, 0xc7, 0x07, 0xf6, 0xf4, 0xd7, 0x04, 0x16, 0xc3, 0x51, 0x91, 0x63, 0x19, 0xa6, 0xb9,
	0xef, 0x1d, 0x6e, 0xb0, 0x7c, 0x64, 0x45, 0xfc, 0x80, 0x58, 0x95, 0x21, 0x30, 0xd6, 0x40, 0x69,
	0x05, 0xc3, 0x08, 0x93, 0x96, 0xd6, 0xf6, 0xfe, 0xc3, 0x15, 0x1c, 0xb8, 0x56, 0xa4, 0xe0, 0x4c,
	0x6a, 0x82, 0x53, 0xdb, 0xe6, 0x9b, 0xff, 0x4d, 0xc3, 0x65, 0x25, 0x87, 0x3e, 0x22, 0x30, 0xe1,
	0xd8, 0x3a, 0xaa, 0x47, 0x92, 0x1c, 0xf6, 0x94, 0xd9, 0x9b, 0xc9, 0x03, 0x1c, 0x0e, 0x8c, 0x7d,
	0xf5, 0xec, 0x9f, 0xef, 0xc6, 0xe7, 0x69, 0x56, 0x0f, 0xf5, 0xd1, 0xf4, 0x47, 0x02, 0x57, 0x06,
	0x37, 0x25, 0xbd, 0x1d, 0xbf, 0x4c, 0xb0, 0xf7, 0xcc, 0x6e, 0x8f, 0x10, 0x89, 0x4c, 0xb7, 0x14,
	0xd3, 0x3c, 0x5d, 0xd7, 0xe3, 0x6c, 0xb7, 0x7e, 0x84, 0x87, 0xe0, 0x31, 0xfd, 0x9e, 0xc0, 0xd5,
	0x41, 0xb4, 0x82, 0x61, 0x24, 0x61, 0x1f, 0xec, 0x45, 0x93, 0xb0, 0x0f, 0x71, 0x97, 0x6c, 0x55,
	0xb1, 0x5f, 0xa2, 0xaf, 0xc7, 0xb2, 0xa7, 0xcf, 0x08, 0xcc, 0x04, 0xf8, 0x09, 0x7a, 0x2f, 0x51,
	0xee, 0xc2, 0xfd, 0x54, 0xf6, 0x9d, 0xd1, 0x01, 0x50, 0xc5, 0xb6, 0x52, 0xb1, 0x45, 0x37, 0xf4,
	0xa4, 0x5f, 0x95, 0xf4, 0x23, 0x75, 0x90, 0x1e, 0xd3, 0x3f, 0x09, 0xbc, 0x1a, 0x00, 0xdd, 0x2b,
	0xc8, 0xbd, 0x44, 0x69, 0xbd, 0x98, 0xb0, 0x68, 0xeb, 0xc7, 0x36, 0x94, 0xb0, 0x75, 0xba, 0x9a,
	0x58, 0x18, 0xfd, 0x95, 0xc0, 0x94, 0x17, 0x92, 0xee, 0x8c, 0x90, 0x60, 0x57, 0xc3, 0x9d, 0x91,
	0x62, 0x91, 0xfe, 0xa6, 0xa2, 0xff, 0x26, 0x5d, 0x4b, 0x40, 0x5f, 0x3f, 0xea, 0x5d, 0x18, 0xc7,
	0xf4, 0x27, 0x02, 0xaf, 0x78, 0xe1, 0x7a, 0xb5, 0xd8, 0x19, 0x21, 0x95, 0xe7, 0x90, 0x10, 0xea,
	0xc5, 0xd8, 0xba, 0x92, 0x70, 0x83, 0x2e, 0x25, 0x90, 0x40, 0x7f, 0x26, 0x30, 0xe5, 0xf5, 0x35,
	0xf4, 0x56, 0xfc, 0xe2, 0x81, 0x16, 0x2a, 0x7b, 0xfb, 0xfc, 0x81, 0x48, 0xf9, 0x2d, 0x45, 0x59,
	0xa7, 0xf9, 0x20, 0xca, 0x68, 0x84, 0xca, 0x15, 0x27, 0x68, 0xe0, 0x4c, 0xfa, 0x97, 0xc0, 0xb5,
	0x50, 0x3f, 0x41, 0x8b, 0x23, 0xf4, 0x81, 0xcf, 0xcb, 0x64, 0xef, 0x5f, 0x08, 0x03, 0xd5, 0x15,
	0x94, 0xba, 0x3b, 0x74, 0x3b, 0x48, 0x5d, 0x5d, 0xc8, 0xb2, 0xaf, 0x28, 0x76, 0xb9, 0xd2, 0x2d,
	0xab, 0xcd, 0xde, 0xdf, 0xf3, 0x4f, 0x09, 0x4c, 0xfb, 0xaf, 0x52, 0xba, 0x9b, 0x88, 0x5c, 0x88,
	0x7d, 0xc8, 0xde, 0x1d, 0x31, 0x3a, 0x89, 0xa8, 0xe1, 0xdf, 0x98, 0xf4, 0xa3, 0xbe, 0xeb, 0x3a,
	0x76, 0xf7, 0xcd, 0x6f, 0x04, 0x66, 0xfc, 0xf8, 0xbd, 0x9d, 0xb3, 0x9b, 0xa8, 0xfb, 0x2f, 0xa0,
	0x2b, 0xc2, 0xe8, 0x30, 0x4d, 0xe9, 0x5a, 0xa1, 0xcb, 0xc9, 0x74, 0x15, 0xf7, 0x1e, 0x9f, 0xe4,
	0xc8, 0x93, 0x93, 0x1c, 0xf9, 0xfb, 0x24, 0x47, 0xbe, 0x3d, 0xcd, 0x8d, 0x3d, 0x39, 0xcd, 0x8d,
	0x3d, 0x3f, 0xcd, 0x8d, 0x7d, 0xa2, 0x0f, 0xf8, 0xfe, 0x8a, 0x59, 0xc9, 0x2b, 0x4e, 0x83, 0xa8,
	0x5f, 0xf6, 0x71, 0xd5, 0x97, 0x80, 0xca, 0x84, 0xfa, 0x91, 0x6b, 0xeb, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x14, 0x79, 0x0b, 0x76, 0x6e, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a StreamRecord by index.
	StreamRecord(ctx context.Context, in *QueryGetStreamRecordRequest, opts ...grpc.CallOption) (*QueryGetStreamRecordResponse, error)
	// Queries a list of StreamRecord items.
	StreamRecordAll(ctx context.Context, in *QueryAllStreamRecordRequest, opts ...grpc.CallOption) (*QueryAllStreamRecordResponse, error)
	// Queries a PaymentAccountCount by index.
	PaymentAccountCount(ctx context.Context, in *QueryGetPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountCountResponse, error)
	// Queries a list of PaymentAccountCount items.
	PaymentAccountCountAll(ctx context.Context, in *QueryAllPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryAllPaymentAccountCountResponse, error)
	// Queries a PaymentAccount by index.
	PaymentAccount(ctx context.Context, in *QueryGetPaymentAccountRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountResponse, error)
	// Queries a list of PaymentAccount items.
	PaymentAccountAll(ctx context.Context, in *QueryAllPaymentAccountRequest, opts ...grpc.CallOption) (*QueryAllPaymentAccountResponse, error)
	// Queries a list of DynamicBalance items.
	DynamicBalance(ctx context.Context, in *QueryDynamicBalanceRequest, opts ...grpc.CallOption) (*QueryDynamicBalanceResponse, error)
	// Queries a list of GetPaymentAccountsByOwner items.
	GetPaymentAccountsByOwner(ctx context.Context, in *QueryGetPaymentAccountsByOwnerRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountsByOwnerResponse, error)
	// Queries a list of AutoSettleRecord items.
	AutoSettleRecord(ctx context.Context, in *QueryGetAutoSettleRecordRequest, opts ...grpc.CallOption) (*QueryGetAutoSettleRecordResponse, error)
	AutoSettleRecordAll(ctx context.Context, in *QueryAllAutoSettleRecordRequest, opts ...grpc.CallOption) (*QueryAllAutoSettleRecordResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamRecord(ctx context.Context, in *QueryGetStreamRecordRequest, opts ...grpc.CallOption) (*QueryGetStreamRecordResponse, error) {
	out := new(QueryGetStreamRecordResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/StreamRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamRecordAll(ctx context.Context, in *QueryAllStreamRecordRequest, opts ...grpc.CallOption) (*QueryAllStreamRecordResponse, error) {
	out := new(QueryAllStreamRecordResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/StreamRecordAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountCount(ctx context.Context, in *QueryGetPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountCountResponse, error) {
	out := new(QueryGetPaymentAccountCountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/PaymentAccountCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountCountAll(ctx context.Context, in *QueryAllPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryAllPaymentAccountCountResponse, error) {
	out := new(QueryAllPaymentAccountCountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/PaymentAccountCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccount(ctx context.Context, in *QueryGetPaymentAccountRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountResponse, error) {
	out := new(QueryGetPaymentAccountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/PaymentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountAll(ctx context.Context, in *QueryAllPaymentAccountRequest, opts ...grpc.CallOption) (*QueryAllPaymentAccountResponse, error) {
	out := new(QueryAllPaymentAccountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/PaymentAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DynamicBalance(ctx context.Context, in *QueryDynamicBalanceRequest, opts ...grpc.CallOption) (*QueryDynamicBalanceResponse, error) {
	out := new(QueryDynamicBalanceResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/DynamicBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPaymentAccountsByOwner(ctx context.Context, in *QueryGetPaymentAccountsByOwnerRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountsByOwnerResponse, error) {
	out := new(QueryGetPaymentAccountsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/GetPaymentAccountsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutoSettleRecord(ctx context.Context, in *QueryGetAutoSettleRecordRequest, opts ...grpc.CallOption) (*QueryGetAutoSettleRecordResponse, error) {
	out := new(QueryGetAutoSettleRecordResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/AutoSettleRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutoSettleRecordAll(ctx context.Context, in *QueryAllAutoSettleRecordRequest, opts ...grpc.CallOption) (*QueryAllAutoSettleRecordResponse, error) {
	out := new(QueryAllAutoSettleRecordResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Query/AutoSettleRecordAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a StreamRecord by index.
	StreamRecord(context.Context, *QueryGetStreamRecordRequest) (*QueryGetStreamRecordResponse, error)
	// Queries a list of StreamRecord items.
	StreamRecordAll(context.Context, *QueryAllStreamRecordRequest) (*QueryAllStreamRecordResponse, error)
	// Queries a PaymentAccountCount by index.
	PaymentAccountCount(context.Context, *QueryGetPaymentAccountCountRequest) (*QueryGetPaymentAccountCountResponse, error)
	// Queries a list of PaymentAccountCount items.
	PaymentAccountCountAll(context.Context, *QueryAllPaymentAccountCountRequest) (*QueryAllPaymentAccountCountResponse, error)
	// Queries a PaymentAccount by index.
	PaymentAccount(context.Context, *QueryGetPaymentAccountRequest) (*QueryGetPaymentAccountResponse, error)
	// Queries a list of PaymentAccount items.
	PaymentAccountAll(context.Context, *QueryAllPaymentAccountRequest) (*QueryAllPaymentAccountResponse, error)
	// Queries a list of DynamicBalance items.
	DynamicBalance(context.Context, *QueryDynamicBalanceRequest) (*QueryDynamicBalanceResponse, error)
	// Queries a list of GetPaymentAccountsByOwner items.
	GetPaymentAccountsByOwner(context.Context, *QueryGetPaymentAccountsByOwnerRequest) (*QueryGetPaymentAccountsByOwnerResponse, error)
	// Queries a list of AutoSettleRecord items.
	AutoSettleRecord(context.Context, *QueryGetAutoSettleRecordRequest) (*QueryGetAutoSettleRecordResponse, error)
	AutoSettleRecordAll(context.Context, *QueryAllAutoSettleRecordRequest) (*QueryAllAutoSettleRecordResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StreamRecord(ctx context.Context, req *QueryGetStreamRecordRequest) (*QueryGetStreamRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamRecord not implemented")
}
func (*UnimplementedQueryServer) StreamRecordAll(ctx context.Context, req *QueryAllStreamRecordRequest) (*QueryAllStreamRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamRecordAll not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountCount(ctx context.Context, req *QueryGetPaymentAccountCountRequest) (*QueryGetPaymentAccountCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountCount not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountCountAll(ctx context.Context, req *QueryAllPaymentAccountCountRequest) (*QueryAllPaymentAccountCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountCountAll not implemented")
}
func (*UnimplementedQueryServer) PaymentAccount(ctx context.Context, req *QueryGetPaymentAccountRequest) (*QueryGetPaymentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccount not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountAll(ctx context.Context, req *QueryAllPaymentAccountRequest) (*QueryAllPaymentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountAll not implemented")
}
func (*UnimplementedQueryServer) DynamicBalance(ctx context.Context, req *QueryDynamicBalanceRequest) (*QueryDynamicBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicBalance not implemented")
}
func (*UnimplementedQueryServer) GetPaymentAccountsByOwner(ctx context.Context, req *QueryGetPaymentAccountsByOwnerRequest) (*QueryGetPaymentAccountsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentAccountsByOwner not implemented")
}
func (*UnimplementedQueryServer) AutoSettleRecord(ctx context.Context, req *QueryGetAutoSettleRecordRequest) (*QueryGetAutoSettleRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSettleRecord not implemented")
}
func (*UnimplementedQueryServer) AutoSettleRecordAll(ctx context.Context, req *QueryAllAutoSettleRecordRequest) (*QueryAllAutoSettleRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSettleRecordAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStreamRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/StreamRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamRecord(ctx, req.(*QueryGetStreamRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStreamRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/StreamRecordAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamRecordAll(ctx, req.(*QueryAllStreamRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentAccountCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/PaymentAccountCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountCount(ctx, req.(*QueryGetPaymentAccountCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPaymentAccountCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/PaymentAccountCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountCountAll(ctx, req.(*QueryAllPaymentAccountCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/PaymentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccount(ctx, req.(*QueryGetPaymentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPaymentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/PaymentAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountAll(ctx, req.(*QueryAllPaymentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DynamicBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDynamicBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DynamicBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/DynamicBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DynamicBalance(ctx, req.(*QueryDynamicBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPaymentAccountsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentAccountsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPaymentAccountsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/GetPaymentAccountsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPaymentAccountsByOwner(ctx, req.(*QueryGetPaymentAccountsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutoSettleRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAutoSettleRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutoSettleRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/AutoSettleRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutoSettleRecord(ctx, req.(*QueryGetAutoSettleRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutoSettleRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAutoSettleRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutoSettleRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Query/AutoSettleRecordAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutoSettleRecordAll(ctx, req.(*QueryAllAutoSettleRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bnbchain.greenfield.payment.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StreamRecord",
			Handler:    _Query_StreamRecord_Handler,
		},
		{
			MethodName: "StreamRecordAll",
			Handler:    _Query_StreamRecordAll_Handler,
		},
		{
			MethodName: "PaymentAccountCount",
			Handler:    _Query_PaymentAccountCount_Handler,
		},
		{
			MethodName: "PaymentAccountCountAll",
			Handler:    _Query_PaymentAccountCountAll_Handler,
		},
		{
			MethodName: "PaymentAccount",
			Handler:    _Query_PaymentAccount_Handler,
		},
		{
			MethodName: "PaymentAccountAll",
			Handler:    _Query_PaymentAccountAll_Handler,
		},
		{
			MethodName: "DynamicBalance",
			Handler:    _Query_DynamicBalance_Handler,
		},
		{
			MethodName: "GetPaymentAccountsByOwner",
			Handler:    _Query_GetPaymentAccountsByOwner_Handler,
		},
		{
			MethodName: "AutoSettleRecord",
			Handler:    _Query_AutoSettleRecord_Handler,
		},
		{
			MethodName: "AutoSettleRecordAll",
			Handler:    _Query_AutoSettleRecordAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greenfield/payment/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStreamRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStreamRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStreamRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStreamRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStreamRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStreamRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStreamRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStreamRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStreamRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStreamRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStreamRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStreamRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamRecord) > 0 {
		for iNdEx := len(m.StreamRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StreamRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentAccountCount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAccountCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAccountCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAccountCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAccountCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAccountCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAccountCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentAccountCount) > 0 {
		for iNdEx := len(m.PaymentAccountCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAccountCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentAccount) > 0 {
		for iNdEx := len(m.PaymentAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDynamicBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDynamicBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDynamicBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDynamicBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDynamicBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDynamicBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.DynamicBalance.Size()
		i -= size
		if _, err := m.DynamicBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for iNdEx := len(m.PaymentAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PaymentAccounts[iNdEx])
			copy(dAtA[i:], m.PaymentAccounts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PaymentAccounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAutoSettleRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAutoSettleRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAutoSettleRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAutoSettleRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAutoSettleRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAutoSettleRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AutoSettleRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAutoSettleRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAutoSettleRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAutoSettleRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAutoSettleRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAutoSettleRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAutoSettleRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AutoSettleRecord) > 0 {
		for iNdEx := len(m.AutoSettleRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AutoSettleRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStreamRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStreamRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StreamRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStreamRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStreamRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StreamRecord) > 0 {
		for _, e := range m.StreamRecord {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentAccountCount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPaymentAccountCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPaymentAccountCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccountCount) > 0 {
		for _, e := range m.PaymentAccountCount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPaymentAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPaymentAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccount) > 0 {
		for _, e := range m.PaymentAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDynamicBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDynamicBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DynamicBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.StreamRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CurrentTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.CurrentTimestamp))
	}
	return n
}

func (m *QueryGetPaymentAccountsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for _, s := range m.PaymentAccounts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetAutoSettleRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAutoSettleRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AutoSettleRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAutoSettleRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAutoSettleRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AutoSettleRecord) > 0 {
		for _, e := range m.AutoSettleRecord {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStreamRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStreamRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStreamRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStreamRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStreamRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStreamRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStreamRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStreamRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStreamRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStreamRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStreamRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStreamRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamRecord = append(m.StreamRecord, StreamRecord{})
			if err := m.StreamRecord[len(m.StreamRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccountCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentAccountCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAccountCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAccountCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAccountCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAccountCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAccountCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAccountCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccountCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccountCount = append(m.PaymentAccountCount, PaymentAccountCount{})
			if err := m.PaymentAccountCount[len(m.PaymentAccountCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccount = append(m.PaymentAccount, PaymentAccount{})
			if err := m.PaymentAccount[len(m.PaymentAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDynamicBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDynamicBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDynamicBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDynamicBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDynamicBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDynamicBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DynamicBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTimestamp", wireType)
			}
			m.CurrentTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccounts = append(m.PaymentAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAutoSettleRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAutoSettleRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAutoSettleRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAutoSettleRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAutoSettleRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAutoSettleRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSettleRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AutoSettleRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAutoSettleRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAutoSettleRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAutoSettleRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAutoSettleRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAutoSettleRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAutoSettleRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSettleRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoSettleRecord = append(m.AutoSettleRecord, AutoSettleRecord{})
			if err := m.AutoSettleRecord[len(m.AutoSettleRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
