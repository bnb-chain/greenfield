// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bfs/payment/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetStreamRecordRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryGetStreamRecordRequest) Reset()         { *m = QueryGetStreamRecordRequest{} }
func (m *QueryGetStreamRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStreamRecordRequest) ProtoMessage()    {}
func (*QueryGetStreamRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{2}
}
func (m *QueryGetStreamRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStreamRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStreamRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStreamRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStreamRecordRequest.Merge(m, src)
}
func (m *QueryGetStreamRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStreamRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStreamRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStreamRecordRequest proto.InternalMessageInfo

func (m *QueryGetStreamRecordRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryGetStreamRecordResponse struct {
	StreamRecord StreamRecord `protobuf:"bytes,1,opt,name=streamRecord,proto3" json:"streamRecord"`
}

func (m *QueryGetStreamRecordResponse) Reset()         { *m = QueryGetStreamRecordResponse{} }
func (m *QueryGetStreamRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStreamRecordResponse) ProtoMessage()    {}
func (*QueryGetStreamRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{3}
}
func (m *QueryGetStreamRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStreamRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStreamRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStreamRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStreamRecordResponse.Merge(m, src)
}
func (m *QueryGetStreamRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStreamRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStreamRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStreamRecordResponse proto.InternalMessageInfo

func (m *QueryGetStreamRecordResponse) GetStreamRecord() StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return StreamRecord{}
}

type QueryAllStreamRecordRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStreamRecordRequest) Reset()         { *m = QueryAllStreamRecordRequest{} }
func (m *QueryAllStreamRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStreamRecordRequest) ProtoMessage()    {}
func (*QueryAllStreamRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{4}
}
func (m *QueryAllStreamRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStreamRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStreamRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStreamRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStreamRecordRequest.Merge(m, src)
}
func (m *QueryAllStreamRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStreamRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStreamRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStreamRecordRequest proto.InternalMessageInfo

func (m *QueryAllStreamRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStreamRecordResponse struct {
	StreamRecord []StreamRecord      `protobuf:"bytes,1,rep,name=streamRecord,proto3" json:"streamRecord"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStreamRecordResponse) Reset()         { *m = QueryAllStreamRecordResponse{} }
func (m *QueryAllStreamRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStreamRecordResponse) ProtoMessage()    {}
func (*QueryAllStreamRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{5}
}
func (m *QueryAllStreamRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStreamRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStreamRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStreamRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStreamRecordResponse.Merge(m, src)
}
func (m *QueryAllStreamRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStreamRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStreamRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStreamRecordResponse proto.InternalMessageInfo

func (m *QueryAllStreamRecordResponse) GetStreamRecord() []StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return nil
}

func (m *QueryAllStreamRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPaymentAccountCountRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetPaymentAccountCountRequest) Reset()         { *m = QueryGetPaymentAccountCountRequest{} }
func (m *QueryGetPaymentAccountCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountCountRequest) ProtoMessage()    {}
func (*QueryGetPaymentAccountCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{6}
}
func (m *QueryGetPaymentAccountCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountCountRequest.Merge(m, src)
}
func (m *QueryGetPaymentAccountCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountCountRequest proto.InternalMessageInfo

func (m *QueryGetPaymentAccountCountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetPaymentAccountCountResponse struct {
	PaymentAccountCount PaymentAccountCount `protobuf:"bytes,1,opt,name=paymentAccountCount,proto3" json:"paymentAccountCount"`
}

func (m *QueryGetPaymentAccountCountResponse) Reset()         { *m = QueryGetPaymentAccountCountResponse{} }
func (m *QueryGetPaymentAccountCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountCountResponse) ProtoMessage()    {}
func (*QueryGetPaymentAccountCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{7}
}
func (m *QueryGetPaymentAccountCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountCountResponse.Merge(m, src)
}
func (m *QueryGetPaymentAccountCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountCountResponse proto.InternalMessageInfo

func (m *QueryGetPaymentAccountCountResponse) GetPaymentAccountCount() PaymentAccountCount {
	if m != nil {
		return m.PaymentAccountCount
	}
	return PaymentAccountCount{}
}

type QueryAllPaymentAccountCountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAccountCountRequest) Reset()         { *m = QueryAllPaymentAccountCountRequest{} }
func (m *QueryAllPaymentAccountCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAccountCountRequest) ProtoMessage()    {}
func (*QueryAllPaymentAccountCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{8}
}
func (m *QueryAllPaymentAccountCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAccountCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAccountCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAccountCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAccountCountRequest.Merge(m, src)
}
func (m *QueryAllPaymentAccountCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAccountCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAccountCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAccountCountRequest proto.InternalMessageInfo

func (m *QueryAllPaymentAccountCountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPaymentAccountCountResponse struct {
	PaymentAccountCount []PaymentAccountCount `protobuf:"bytes,1,rep,name=paymentAccountCount,proto3" json:"paymentAccountCount"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAccountCountResponse) Reset()         { *m = QueryAllPaymentAccountCountResponse{} }
func (m *QueryAllPaymentAccountCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAccountCountResponse) ProtoMessage()    {}
func (*QueryAllPaymentAccountCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{9}
}
func (m *QueryAllPaymentAccountCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAccountCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAccountCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAccountCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAccountCountResponse.Merge(m, src)
}
func (m *QueryAllPaymentAccountCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAccountCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAccountCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAccountCountResponse proto.InternalMessageInfo

func (m *QueryAllPaymentAccountCountResponse) GetPaymentAccountCount() []PaymentAccountCount {
	if m != nil {
		return m.PaymentAccountCount
	}
	return nil
}

func (m *QueryAllPaymentAccountCountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPaymentAccountRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryGetPaymentAccountRequest) Reset()         { *m = QueryGetPaymentAccountRequest{} }
func (m *QueryGetPaymentAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountRequest) ProtoMessage()    {}
func (*QueryGetPaymentAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{10}
}
func (m *QueryGetPaymentAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountRequest.Merge(m, src)
}
func (m *QueryGetPaymentAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountRequest proto.InternalMessageInfo

func (m *QueryGetPaymentAccountRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryGetPaymentAccountResponse struct {
	PaymentAccount PaymentAccount `protobuf:"bytes,1,opt,name=paymentAccount,proto3" json:"paymentAccount"`
}

func (m *QueryGetPaymentAccountResponse) Reset()         { *m = QueryGetPaymentAccountResponse{} }
func (m *QueryGetPaymentAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountResponse) ProtoMessage()    {}
func (*QueryGetPaymentAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{11}
}
func (m *QueryGetPaymentAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountResponse.Merge(m, src)
}
func (m *QueryGetPaymentAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountResponse proto.InternalMessageInfo

func (m *QueryGetPaymentAccountResponse) GetPaymentAccount() PaymentAccount {
	if m != nil {
		return m.PaymentAccount
	}
	return PaymentAccount{}
}

type QueryAllPaymentAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAccountRequest) Reset()         { *m = QueryAllPaymentAccountRequest{} }
func (m *QueryAllPaymentAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAccountRequest) ProtoMessage()    {}
func (*QueryAllPaymentAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{12}
}
func (m *QueryAllPaymentAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAccountRequest.Merge(m, src)
}
func (m *QueryAllPaymentAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAccountRequest proto.InternalMessageInfo

func (m *QueryAllPaymentAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPaymentAccountResponse struct {
	PaymentAccount []PaymentAccount    `protobuf:"bytes,1,rep,name=paymentAccount,proto3" json:"paymentAccount"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAccountResponse) Reset()         { *m = QueryAllPaymentAccountResponse{} }
func (m *QueryAllPaymentAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAccountResponse) ProtoMessage()    {}
func (*QueryAllPaymentAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{13}
}
func (m *QueryAllPaymentAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAccountResponse.Merge(m, src)
}
func (m *QueryAllPaymentAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAccountResponse proto.InternalMessageInfo

func (m *QueryAllPaymentAccountResponse) GetPaymentAccount() []PaymentAccount {
	if m != nil {
		return m.PaymentAccount
	}
	return nil
}

func (m *QueryAllPaymentAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDynamicBalanceRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryDynamicBalanceRequest) Reset()         { *m = QueryDynamicBalanceRequest{} }
func (m *QueryDynamicBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDynamicBalanceRequest) ProtoMessage()    {}
func (*QueryDynamicBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{14}
}
func (m *QueryDynamicBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDynamicBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDynamicBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDynamicBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDynamicBalanceRequest.Merge(m, src)
}
func (m *QueryDynamicBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDynamicBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDynamicBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDynamicBalanceRequest proto.InternalMessageInfo

func (m *QueryDynamicBalanceRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryDynamicBalanceResponse struct {
	DynamicBalance   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=dynamicBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"dynamicBalance"`
	StreamRecord     StreamRecord                           `protobuf:"bytes,2,opt,name=streamRecord,proto3" json:"streamRecord"`
	CurrentTimestamp int64                                  `protobuf:"varint,3,opt,name=currentTimestamp,proto3" json:"currentTimestamp,omitempty"`
}

func (m *QueryDynamicBalanceResponse) Reset()         { *m = QueryDynamicBalanceResponse{} }
func (m *QueryDynamicBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDynamicBalanceResponse) ProtoMessage()    {}
func (*QueryDynamicBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{15}
}
func (m *QueryDynamicBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDynamicBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDynamicBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDynamicBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDynamicBalanceResponse.Merge(m, src)
}
func (m *QueryDynamicBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDynamicBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDynamicBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDynamicBalanceResponse proto.InternalMessageInfo

func (m *QueryDynamicBalanceResponse) GetStreamRecord() StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return StreamRecord{}
}

func (m *QueryDynamicBalanceResponse) GetCurrentTimestamp() int64 {
	if m != nil {
		return m.CurrentTimestamp
	}
	return 0
}

type QueryGetPaymentAccountsByOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetPaymentAccountsByOwnerRequest) Reset()         { *m = QueryGetPaymentAccountsByOwnerRequest{} }
func (m *QueryGetPaymentAccountsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountsByOwnerRequest) ProtoMessage()    {}
func (*QueryGetPaymentAccountsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{16}
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountsByOwnerRequest.Merge(m, src)
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountsByOwnerRequest proto.InternalMessageInfo

func (m *QueryGetPaymentAccountsByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetPaymentAccountsByOwnerResponse struct {
	PaymentAccounts []string `protobuf:"bytes,1,rep,name=paymentAccounts,proto3" json:"paymentAccounts,omitempty"`
}

func (m *QueryGetPaymentAccountsByOwnerResponse) Reset() {
	*m = QueryGetPaymentAccountsByOwnerResponse{}
}
func (m *QueryGetPaymentAccountsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAccountsByOwnerResponse) ProtoMessage()    {}
func (*QueryGetPaymentAccountsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{17}
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAccountsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAccountsByOwnerResponse.Merge(m, src)
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAccountsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAccountsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAccountsByOwnerResponse proto.InternalMessageInfo

func (m *QueryGetPaymentAccountsByOwnerResponse) GetPaymentAccounts() []string {
	if m != nil {
		return m.PaymentAccounts
	}
	return nil
}

// this line is used by starport scaffolding # 3
type QueryGetMockBucketMetaRequest struct {
	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
}

func (m *QueryGetMockBucketMetaRequest) Reset()         { *m = QueryGetMockBucketMetaRequest{} }
func (m *QueryGetMockBucketMetaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMockBucketMetaRequest) ProtoMessage()    {}
func (*QueryGetMockBucketMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{18}
}
func (m *QueryGetMockBucketMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMockBucketMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMockBucketMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMockBucketMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMockBucketMetaRequest.Merge(m, src)
}
func (m *QueryGetMockBucketMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMockBucketMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMockBucketMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMockBucketMetaRequest proto.InternalMessageInfo

func (m *QueryGetMockBucketMetaRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

type QueryGetMockBucketMetaResponse struct {
	MockBucketMeta MockBucketMeta `protobuf:"bytes,1,opt,name=mockBucketMeta,proto3" json:"mockBucketMeta"`
}

func (m *QueryGetMockBucketMetaResponse) Reset()         { *m = QueryGetMockBucketMetaResponse{} }
func (m *QueryGetMockBucketMetaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMockBucketMetaResponse) ProtoMessage()    {}
func (*QueryGetMockBucketMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{19}
}
func (m *QueryGetMockBucketMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMockBucketMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMockBucketMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMockBucketMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMockBucketMetaResponse.Merge(m, src)
}
func (m *QueryGetMockBucketMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMockBucketMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMockBucketMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMockBucketMetaResponse proto.InternalMessageInfo

func (m *QueryGetMockBucketMetaResponse) GetMockBucketMeta() MockBucketMeta {
	if m != nil {
		return m.MockBucketMeta
	}
	return MockBucketMeta{}
}

type QueryAllMockBucketMetaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMockBucketMetaRequest) Reset()         { *m = QueryAllMockBucketMetaRequest{} }
func (m *QueryAllMockBucketMetaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMockBucketMetaRequest) ProtoMessage()    {}
func (*QueryAllMockBucketMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{20}
}
func (m *QueryAllMockBucketMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMockBucketMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMockBucketMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMockBucketMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMockBucketMetaRequest.Merge(m, src)
}
func (m *QueryAllMockBucketMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMockBucketMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMockBucketMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMockBucketMetaRequest proto.InternalMessageInfo

func (m *QueryAllMockBucketMetaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMockBucketMetaResponse struct {
	MockBucketMeta []MockBucketMeta    `protobuf:"bytes,1,rep,name=mockBucketMeta,proto3" json:"mockBucketMeta"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMockBucketMetaResponse) Reset()         { *m = QueryAllMockBucketMetaResponse{} }
func (m *QueryAllMockBucketMetaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMockBucketMetaResponse) ProtoMessage()    {}
func (*QueryAllMockBucketMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{21}
}
func (m *QueryAllMockBucketMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMockBucketMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMockBucketMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMockBucketMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMockBucketMetaResponse.Merge(m, src)
}
func (m *QueryAllMockBucketMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMockBucketMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMockBucketMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMockBucketMetaResponse proto.InternalMessageInfo

func (m *QueryAllMockBucketMetaResponse) GetMockBucketMeta() []MockBucketMeta {
	if m != nil {
		return m.MockBucketMeta
	}
	return nil
}

func (m *QueryAllMockBucketMetaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFlowRequest struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *QueryGetFlowRequest) Reset()         { *m = QueryGetFlowRequest{} }
func (m *QueryGetFlowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFlowRequest) ProtoMessage()    {}
func (*QueryGetFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{22}
}
func (m *QueryGetFlowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFlowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFlowRequest.Merge(m, src)
}
func (m *QueryGetFlowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFlowRequest proto.InternalMessageInfo

func (m *QueryGetFlowRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *QueryGetFlowRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type QueryGetFlowResponse struct {
	Flow Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow"`
}

func (m *QueryGetFlowResponse) Reset()         { *m = QueryGetFlowResponse{} }
func (m *QueryGetFlowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFlowResponse) ProtoMessage()    {}
func (*QueryGetFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{23}
}
func (m *QueryGetFlowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFlowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFlowResponse.Merge(m, src)
}
func (m *QueryGetFlowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFlowResponse proto.InternalMessageInfo

func (m *QueryGetFlowResponse) GetFlow() Flow {
	if m != nil {
		return m.Flow
	}
	return Flow{}
}

type QueryAllFlowRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFlowRequest) Reset()         { *m = QueryAllFlowRequest{} }
func (m *QueryAllFlowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFlowRequest) ProtoMessage()    {}
func (*QueryAllFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{24}
}
func (m *QueryAllFlowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFlowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFlowRequest.Merge(m, src)
}
func (m *QueryAllFlowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFlowRequest proto.InternalMessageInfo

func (m *QueryAllFlowRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFlowResponse struct {
	Flow       []Flow              `protobuf:"bytes,1,rep,name=flow,proto3" json:"flow"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFlowResponse) Reset()         { *m = QueryAllFlowResponse{} }
func (m *QueryAllFlowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFlowResponse) ProtoMessage()    {}
func (*QueryAllFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{25}
}
func (m *QueryAllFlowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFlowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFlowResponse.Merge(m, src)
}
func (m *QueryAllFlowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFlowResponse proto.InternalMessageInfo

func (m *QueryAllFlowResponse) GetFlow() []Flow {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *QueryAllFlowResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBnbPriceRequest struct {
}

func (m *QueryGetBnbPriceRequest) Reset()         { *m = QueryGetBnbPriceRequest{} }
func (m *QueryGetBnbPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBnbPriceRequest) ProtoMessage()    {}
func (*QueryGetBnbPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{26}
}
func (m *QueryGetBnbPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBnbPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBnbPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBnbPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBnbPriceRequest.Merge(m, src)
}
func (m *QueryGetBnbPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBnbPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBnbPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBnbPriceRequest proto.InternalMessageInfo

type QueryGetBnbPriceResponse struct {
	BnbPrice BnbPrice `protobuf:"bytes,1,opt,name=BnbPrice,proto3" json:"BnbPrice"`
}

func (m *QueryGetBnbPriceResponse) Reset()         { *m = QueryGetBnbPriceResponse{} }
func (m *QueryGetBnbPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBnbPriceResponse) ProtoMessage()    {}
func (*QueryGetBnbPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{27}
}
func (m *QueryGetBnbPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBnbPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBnbPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBnbPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBnbPriceResponse.Merge(m, src)
}
func (m *QueryGetBnbPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBnbPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBnbPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBnbPriceResponse proto.InternalMessageInfo

func (m *QueryGetBnbPriceResponse) GetBnbPrice() BnbPrice {
	if m != nil {
		return m.BnbPrice
	}
	return BnbPrice{}
}

type QueryGetAutoSettleQueueRequest struct {
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	User      string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryGetAutoSettleQueueRequest) Reset()         { *m = QueryGetAutoSettleQueueRequest{} }
func (m *QueryGetAutoSettleQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAutoSettleQueueRequest) ProtoMessage()    {}
func (*QueryGetAutoSettleQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{28}
}
func (m *QueryGetAutoSettleQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAutoSettleQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAutoSettleQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAutoSettleQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAutoSettleQueueRequest.Merge(m, src)
}
func (m *QueryGetAutoSettleQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAutoSettleQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAutoSettleQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAutoSettleQueueRequest proto.InternalMessageInfo

func (m *QueryGetAutoSettleQueueRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *QueryGetAutoSettleQueueRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryGetAutoSettleQueueResponse struct {
	AutoSettleQueue AutoSettleQueue `protobuf:"bytes,1,opt,name=autoSettleQueue,proto3" json:"autoSettleQueue"`
}

func (m *QueryGetAutoSettleQueueResponse) Reset()         { *m = QueryGetAutoSettleQueueResponse{} }
func (m *QueryGetAutoSettleQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAutoSettleQueueResponse) ProtoMessage()    {}
func (*QueryGetAutoSettleQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{29}
}
func (m *QueryGetAutoSettleQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAutoSettleQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAutoSettleQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAutoSettleQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAutoSettleQueueResponse.Merge(m, src)
}
func (m *QueryGetAutoSettleQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAutoSettleQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAutoSettleQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAutoSettleQueueResponse proto.InternalMessageInfo

func (m *QueryGetAutoSettleQueueResponse) GetAutoSettleQueue() AutoSettleQueue {
	if m != nil {
		return m.AutoSettleQueue
	}
	return AutoSettleQueue{}
}

type QueryAllAutoSettleQueueRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAutoSettleQueueRequest) Reset()         { *m = QueryAllAutoSettleQueueRequest{} }
func (m *QueryAllAutoSettleQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAutoSettleQueueRequest) ProtoMessage()    {}
func (*QueryAllAutoSettleQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{30}
}
func (m *QueryAllAutoSettleQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAutoSettleQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAutoSettleQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAutoSettleQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAutoSettleQueueRequest.Merge(m, src)
}
func (m *QueryAllAutoSettleQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAutoSettleQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAutoSettleQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAutoSettleQueueRequest proto.InternalMessageInfo

func (m *QueryAllAutoSettleQueueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAutoSettleQueueResponse struct {
	AutoSettleQueue []AutoSettleQueue   `protobuf:"bytes,1,rep,name=autoSettleQueue,proto3" json:"autoSettleQueue"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAutoSettleQueueResponse) Reset()         { *m = QueryAllAutoSettleQueueResponse{} }
func (m *QueryAllAutoSettleQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAutoSettleQueueResponse) ProtoMessage()    {}
func (*QueryAllAutoSettleQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57f8b7fb4487437c, []int{31}
}
func (m *QueryAllAutoSettleQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAutoSettleQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAutoSettleQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAutoSettleQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAutoSettleQueueResponse.Merge(m, src)
}
func (m *QueryAllAutoSettleQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAutoSettleQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAutoSettleQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAutoSettleQueueResponse proto.InternalMessageInfo

func (m *QueryAllAutoSettleQueueResponse) GetAutoSettleQueue() []AutoSettleQueue {
	if m != nil {
		return m.AutoSettleQueue
	}
	return nil
}

func (m *QueryAllAutoSettleQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "bnbchain.bfs.payment.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bnbchain.bfs.payment.QueryParamsResponse")
	proto.RegisterType((*QueryGetStreamRecordRequest)(nil), "bnbchain.bfs.payment.QueryGetStreamRecordRequest")
	proto.RegisterType((*QueryGetStreamRecordResponse)(nil), "bnbchain.bfs.payment.QueryGetStreamRecordResponse")
	proto.RegisterType((*QueryAllStreamRecordRequest)(nil), "bnbchain.bfs.payment.QueryAllStreamRecordRequest")
	proto.RegisterType((*QueryAllStreamRecordResponse)(nil), "bnbchain.bfs.payment.QueryAllStreamRecordResponse")
	proto.RegisterType((*QueryGetPaymentAccountCountRequest)(nil), "bnbchain.bfs.payment.QueryGetPaymentAccountCountRequest")
	proto.RegisterType((*QueryGetPaymentAccountCountResponse)(nil), "bnbchain.bfs.payment.QueryGetPaymentAccountCountResponse")
	proto.RegisterType((*QueryAllPaymentAccountCountRequest)(nil), "bnbchain.bfs.payment.QueryAllPaymentAccountCountRequest")
	proto.RegisterType((*QueryAllPaymentAccountCountResponse)(nil), "bnbchain.bfs.payment.QueryAllPaymentAccountCountResponse")
	proto.RegisterType((*QueryGetPaymentAccountRequest)(nil), "bnbchain.bfs.payment.QueryGetPaymentAccountRequest")
	proto.RegisterType((*QueryGetPaymentAccountResponse)(nil), "bnbchain.bfs.payment.QueryGetPaymentAccountResponse")
	proto.RegisterType((*QueryAllPaymentAccountRequest)(nil), "bnbchain.bfs.payment.QueryAllPaymentAccountRequest")
	proto.RegisterType((*QueryAllPaymentAccountResponse)(nil), "bnbchain.bfs.payment.QueryAllPaymentAccountResponse")
	proto.RegisterType((*QueryDynamicBalanceRequest)(nil), "bnbchain.bfs.payment.QueryDynamicBalanceRequest")
	proto.RegisterType((*QueryDynamicBalanceResponse)(nil), "bnbchain.bfs.payment.QueryDynamicBalanceResponse")
	proto.RegisterType((*QueryGetPaymentAccountsByOwnerRequest)(nil), "bnbchain.bfs.payment.QueryGetPaymentAccountsByOwnerRequest")
	proto.RegisterType((*QueryGetPaymentAccountsByOwnerResponse)(nil), "bnbchain.bfs.payment.QueryGetPaymentAccountsByOwnerResponse")
	proto.RegisterType((*QueryGetMockBucketMetaRequest)(nil), "bnbchain.bfs.payment.QueryGetMockBucketMetaRequest")
	proto.RegisterType((*QueryGetMockBucketMetaResponse)(nil), "bnbchain.bfs.payment.QueryGetMockBucketMetaResponse")
	proto.RegisterType((*QueryAllMockBucketMetaRequest)(nil), "bnbchain.bfs.payment.QueryAllMockBucketMetaRequest")
	proto.RegisterType((*QueryAllMockBucketMetaResponse)(nil), "bnbchain.bfs.payment.QueryAllMockBucketMetaResponse")
	proto.RegisterType((*QueryGetFlowRequest)(nil), "bnbchain.bfs.payment.QueryGetFlowRequest")
	proto.RegisterType((*QueryGetFlowResponse)(nil), "bnbchain.bfs.payment.QueryGetFlowResponse")
	proto.RegisterType((*QueryAllFlowRequest)(nil), "bnbchain.bfs.payment.QueryAllFlowRequest")
	proto.RegisterType((*QueryAllFlowResponse)(nil), "bnbchain.bfs.payment.QueryAllFlowResponse")
	proto.RegisterType((*QueryGetBnbPriceRequest)(nil), "bnbchain.bfs.payment.QueryGetBnbPriceRequest")
	proto.RegisterType((*QueryGetBnbPriceResponse)(nil), "bnbchain.bfs.payment.QueryGetBnbPriceResponse")
	proto.RegisterType((*QueryGetAutoSettleQueueRequest)(nil), "bnbchain.bfs.payment.QueryGetAutoSettleQueueRequest")
	proto.RegisterType((*QueryGetAutoSettleQueueResponse)(nil), "bnbchain.bfs.payment.QueryGetAutoSettleQueueResponse")
	proto.RegisterType((*QueryAllAutoSettleQueueRequest)(nil), "bnbchain.bfs.payment.QueryAllAutoSettleQueueRequest")
	proto.RegisterType((*QueryAllAutoSettleQueueResponse)(nil), "bnbchain.bfs.payment.QueryAllAutoSettleQueueResponse")
}

func init() { proto.RegisterFile("bfs/payment/query.proto", fileDescriptor_57f8b7fb4487437c) }

var fileDescriptor_57f8b7fb4487437c = []byte{
	// 1547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0xcf, 0x64, 0xd3, 0xf6, 0x9b, 0xf9, 0x56, 0x09, 0x9d, 0xa4, 0x6d, 0xea, 0xa4, 0x9b, 0x32,
	0x49, 0xd3, 0x4d, 0x68, 0xd6, 0xcd, 0x0f, 0x4a, 0x7f, 0x0a, 0xb2, 0x45, 0xad, 0x2a, 0xb5, 0x90,
	0xba, 0x70, 0x41, 0x20, 0xcb, 0x76, 0x26, 0xdb, 0x55, 0xfc, 0x63, 0xbb, 0x9e, 0xa5, 0x0d, 0xab,
	0xbd, 0x20, 0x21, 0x71, 0x42, 0x48, 0x15, 0x37, 0x6e, 0x80, 0xc4, 0x05, 0x71, 0x00, 0x0e, 0x1c,
	0x40, 0x42, 0x5c, 0x7a, 0x2c, 0xe5, 0x82, 0x38, 0x54, 0xa8, 0xe1, 0xdf, 0x40, 0x42, 0x1e, 0x3f,
	0x67, 0x6d, 0xaf, 0xed, 0xdd, 0x4d, 0x96, 0x4b, 0x63, 0xcf, 0xbc, 0xf7, 0xe6, 0xf3, 0x79, 0xef,
	0xcd, 0xec, 0x67, 0x5c, 0x7c, 0x5c, 0xdf, 0x74, 0xe5, 0xaa, 0xb6, 0x6d, 0x31, 0x9b, 0xcb, 0xf7,
	0xeb, 0xac, 0xb6, 0x5d, 0xac, 0xd6, 0x1c, 0xee, 0x90, 0x71, 0xdd, 0xd6, 0x8d, 0x7b, 0x5a, 0xc5,
	0x2e, 0xea, 0x9b, 0x6e, 0x11, 0x2c, 0xa4, 0x63, 0x61, 0xf3, 0x4d, 0xd3, 0x79, 0xe0, 0x5b, 0x4b,
	0x34, 0x3c, 0x6e, 0x39, 0xc6, 0x96, 0xaa, 0xd7, 0x8d, 0x2d, 0xc6, 0x55, 0x8b, 0x71, 0x0d, 0x6c,
	0x26, 0xc2, 0x36, 0x55, 0xad, 0xa6, 0x59, 0x2e, 0xcc, 0xbc, 0x18, 0x9d, 0x11, 0x7f, 0x55, 0xcd,
	0x30, 0x9c, 0xba, 0xcd, 0xc1, 0xe4, 0x4c, 0x86, 0x89, 0x1a, 0x36, 0x9c, 0x0e, 0x1b, 0xba, 0xbc,
	0xc6, 0x34, 0x4b, 0xad, 0x31, 0xc3, 0xa9, 0x6d, 0x80, 0xc1, 0x82, 0xe1, 0xb8, 0x96, 0xe3, 0xca,
	0xba, 0xe6, 0x32, 0x9f, 0xb1, 0xfc, 0xfe, 0x92, 0xce, 0xb8, 0xb6, 0x24, 0x57, 0xb5, 0x72, 0xc5,
	0xd6, 0x78, 0xc5, 0xb1, 0xc1, 0xf6, 0x84, 0x6f, 0xab, 0x8a, 0x37, 0xd9, 0x7f, 0x81, 0xa9, 0xf1,
	0xb2, 0x53, 0x76, 0xfc, 0x71, 0xef, 0x09, 0x46, 0xa7, 0xca, 0x8e, 0x53, 0x36, 0x99, 0xac, 0x55,
	0x2b, 0xb2, 0x66, 0xdb, 0x0e, 0x17, 0xd1, 0x02, 0x9f, 0xc9, 0x30, 0x36, 0xdd, 0xd6, 0xd5, 0x6a,
	0xad, 0x62, 0x30, 0x98, 0x9c, 0x09, 0x4f, 0x6a, 0x75, 0xee, 0xa8, 0x2e, 0xe3, 0xdc, 0x64, 0xea,
	0xfd, 0x3a, 0xab, 0x83, 0x11, 0x1d, 0xc7, 0xe4, 0x8e, 0x07, 0x79, 0x5d, 0xa4, 0x4f, 0x61, 0xf7,
	0xeb, 0xcc, 0xe5, 0xf4, 0x0e, 0x1e, 0x8b, 0x8c, 0xba, 0x55, 0xc7, 0x76, 0x19, 0xb9, 0x84, 0x0f,
	0xfa, 0x69, 0x9e, 0x40, 0xa7, 0x50, 0xe1, 0xff, 0xcb, 0x53, 0xc5, 0xa4, 0x9a, 0x16, 0x7d, 0xaf,
	0xd2, 0xd0, 0xe3, 0x67, 0xd3, 0x03, 0x0a, 0x78, 0xd0, 0x57, 0xf0, 0xa4, 0x08, 0x79, 0x83, 0xf1,
	0xbb, 0x22, 0x89, 0x8a, 0xc8, 0x21, 0xac, 0x48, 0x26, 0xf0, 0x21, 0x48, 0xbe, 0x88, 0x3d, 0xac,
	0x04, 0xaf, 0xd4, 0xc4, 0x53, 0xc9, 0x8e, 0x00, 0xea, 0x16, 0x3e, 0xec, 0x86, 0xc6, 0x01, 0x1a,
	0x4d, 0x86, 0x16, 0x8e, 0x00, 0x00, 0x23, 0xde, 0x94, 0x01, 0xcc, 0x35, 0xd3, 0x4c, 0x82, 0x79,
	0x1d, 0xe3, 0x56, 0x4d, 0x61, 0xa9, 0xb9, 0x22, 0xd4, 0xd1, 0x6b, 0x80, 0xa2, 0xdf, 0xf2, 0xd0,
	0x00, 0xc5, 0x75, 0xad, 0xcc, 0xc0, 0x57, 0x09, 0x79, 0xd2, 0x1f, 0x10, 0xb0, 0x6a, 0x5b, 0x27,
	0x95, 0x55, 0x6e, 0xef, 0xac, 0xc8, 0x8d, 0x08, 0xec, 0x41, 0x01, 0xfb, 0x4c, 0x47, 0xd8, 0x3e,
	0x94, 0x08, 0xee, 0x4b, 0x98, 0x06, 0xc5, 0x58, 0xf7, 0x17, 0x5f, 0xf3, 0xcb, 0x74, 0xcd, 0xfb,
	0x27, 0xc8, 0xd2, 0x38, 0x3e, 0xe0, 0x3c, 0xb0, 0x59, 0x0d, 0x4a, 0xe9, 0xbf, 0xd0, 0x8f, 0x11,
	0x9e, 0xc9, 0x74, 0x06, 0xea, 0x1a, 0x1e, 0xab, 0xb6, 0x4f, 0x43, 0xb2, 0xe7, 0xd3, 0x5a, 0xae,
	0xcd, 0x01, 0x12, 0x91, 0x14, 0x8b, 0x9a, 0x40, 0x63, 0xcd, 0x34, 0x33, 0x68, 0xf4, 0xab, 0xd8,
	0xbf, 0x05, 0xc4, 0xd3, 0x96, 0xeb, 0x44, 0x3c, 0xd7, 0x2f, 0xe2, 0xfd, 0x6b, 0x84, 0x15, 0x7c,
	0x32, 0xb9, 0x96, 0x41, 0xf2, 0x08, 0x1e, 0xd2, 0x36, 0x36, 0x82, 0x16, 0x10, 0xcf, 0x94, 0xe3,
	0x7c, 0x9a, 0x13, 0xa4, 0x40, 0xc1, 0x23, 0x51, 0xd8, 0x90, 0xf6, 0xd9, 0x6e, 0xd8, 0x03, 0xf1,
	0x58, 0x04, 0x5a, 0x06, 0xa8, 0x6d, 0xd9, 0xef, 0x77, 0x9d, 0x7f, 0x42, 0xc0, 0x2f, 0x61, 0xa5,
	0x0c, 0x7e, 0xb9, 0xfd, 0xf1, 0xeb, 0x5f, 0x4d, 0xcf, 0x63, 0x49, 0xc0, 0x7f, 0x7d, 0xdb, 0xd6,
	0xac, 0x8a, 0x51, 0xd2, 0x4c, 0xcd, 0x36, 0x58, 0xe7, 0x13, 0xfa, 0x1f, 0x04, 0x87, 0x66, 0xdc,
	0x11, 0x48, 0x6f, 0xe0, 0x91, 0x8d, 0xc8, 0x8c, 0x1f, 0xa0, 0x74, 0xc5, 0xa3, 0xf3, 0xe7, 0xb3,
	0xe9, 0xb9, 0x72, 0x85, 0xdf, 0xab, 0xeb, 0x45, 0xc3, 0xb1, 0xe0, 0x27, 0x11, 0xfe, 0x2c, 0xba,
	0x1b, 0x5b, 0x32, 0xdf, 0xae, 0x32, 0xb7, 0x78, 0xd3, 0xe6, 0x4f, 0xbf, 0x5f, 0xc4, 0xc0, 0xea,
	0xa6, 0xcd, 0x95, 0x58, 0xcc, 0xb6, 0x13, 0x73, 0x70, 0x3f, 0xbf, 0x03, 0x64, 0x01, 0xbf, 0x60,
	0xd4, 0x6b, 0x35, 0x66, 0xf3, 0xb7, 0x2a, 0x16, 0x73, 0xb9, 0x66, 0x55, 0x27, 0x72, 0xa7, 0x50,
	0x21, 0xa7, 0xb4, 0x8d, 0xd3, 0xab, 0xf8, 0x74, 0x72, 0x5b, 0xbb, 0xa5, 0xed, 0x37, 0xbd, 0xa3,
	0x2f, 0xfb, 0x5c, 0x54, 0xf0, 0x5c, 0x27, 0x77, 0x48, 0x64, 0x01, 0x8f, 0x46, 0x6b, 0xef, 0x8a,
	0xf6, 0x19, 0x56, 0xe2, 0xc3, 0xf4, 0xd5, 0xd6, 0xf6, 0xbc, 0xed, 0x18, 0x5b, 0x25, 0xa1, 0x9d,
	0x6e, 0x33, 0xae, 0x05, 0x50, 0xf2, 0x18, 0xfb, 0x82, 0xea, 0x0d, 0xcd, 0x82, 0x7a, 0x28, 0xa1,
	0x91, 0xf0, 0x56, 0x8d, 0x07, 0x68, 0xb5, 0xb2, 0x15, 0x99, 0xc9, 0xde, 0xaa, 0xd1, 0x28, 0x41,
	0x2b, 0x47, 0x23, 0x84, 0xb7, 0x6a, 0x32, 0xec, 0xff, 0x62, 0xab, 0xf6, 0xc0, 0x2f, 0xb7, 0x3f,
	0x7e, 0xfd, 0xdb, 0xaa, 0x17, 0x41, 0xa0, 0xdd, 0x60, 0xfc, 0xba, 0xe9, 0x3c, 0x08, 0x1d, 0xba,
	0x9b, 0x35, 0xc7, 0x0a, 0x0e, 0x5d, 0xef, 0x99, 0x8c, 0xe0, 0x41, 0xee, 0x88, 0xb5, 0x86, 0x95,
	0x41, 0xee, 0xd0, 0x5b, 0x78, 0x3c, 0xea, 0x0a, 0x7c, 0x57, 0xf1, 0x90, 0xa7, 0xbf, 0x21, 0xa9,
	0x52, 0x32, 0x4b, 0xcf, 0x03, 0xb8, 0x09, 0x6b, 0xfa, 0x1e, 0x00, 0x59, 0x33, 0xcd, 0x30, 0x90,
	0x7e, 0xd5, 0xe9, 0x33, 0x04, 0x68, 0x77, 0xe3, 0xb7, 0xa1, 0xcd, 0x75, 0x8f, 0xb6, 0x7f, 0xf9,
	0x3f, 0x81, 0x8f, 0x07, 0x49, 0x2c, 0xd9, 0xfa, 0xba, 0xa7, 0xba, 0x03, 0xed, 0xfc, 0x2e, 0x9e,
	0x68, 0x9f, 0x02, 0xd4, 0xaf, 0xe1, 0xff, 0x05, 0x63, 0x90, 0x94, 0x7c, 0x32, 0xf2, 0xc0, 0x0a,
	0xd0, 0xef, 0x7a, 0x51, 0xa5, 0xb5, 0x2f, 0xd7, 0xea, 0xdc, 0xb9, 0x2b, 0x14, 0xfd, 0x1d, 0x4f,
	0xd0, 0x07, 0xa9, 0x9f, 0xc2, 0xc3, 0x7c, 0xf7, 0xc8, 0x42, 0xe2, 0xc8, 0x6a, 0x0d, 0x78, 0x1d,
	0x52, 0x77, 0x59, 0x0d, 0xfa, 0x41, 0x3c, 0xd3, 0x87, 0x78, 0x3a, 0x35, 0x26, 0x00, 0x7f, 0x1b,
	0x8f, 0x6a, 0xd1, 0x29, 0xc0, 0x7f, 0x3a, 0x19, 0x7f, 0x2c, 0x0e, 0xd0, 0x88, 0xc7, 0xa0, 0xf7,
	0x5a, 0xbb, 0x30, 0x85, 0x4d, 0xbf, 0x1a, 0xe9, 0x17, 0x04, 0x24, 0x93, 0x96, 0xca, 0x22, 0x99,
	0xdb, 0x2f, 0xc9, 0xbe, 0x35, 0xdd, 0xf2, 0x37, 0x47, 0xf1, 0x01, 0xc1, 0x81, 0x7c, 0x80, 0x0f,
	0xfa, 0x97, 0x2c, 0x52, 0x48, 0x86, 0xd6, 0x7e, 0xa7, 0x93, 0xe6, 0xbb, 0xb0, 0xf4, 0x17, 0xa5,
	0x93, 0x1f, 0xfe, 0xfe, 0xf7, 0xa3, 0xc1, 0xa3, 0x64, 0x4c, 0x6e, 0xbf, 0x61, 0x93, 0x2f, 0x10,
	0x3e, 0x1c, 0xfe, 0xf9, 0x24, 0x4b, 0x19, 0x81, 0x93, 0x6f, 0x7b, 0xd2, 0x72, 0x2f, 0x2e, 0x00,
	0xea, 0xac, 0x00, 0x35, 0x47, 0x66, 0xe5, 0xd4, 0x0b, 0xb9, 0xdc, 0x00, 0x49, 0xd2, 0x24, 0x9f,
	0x23, 0x3c, 0x1a, 0x0e, 0xb3, 0x66, 0x9a, 0x99, 0x40, 0x93, 0xef, 0x7b, 0x99, 0x40, 0x53, 0xae,
	0x6e, 0x94, 0x0a, 0xa0, 0x53, 0x44, 0x4a, 0x07, 0x4a, 0x7e, 0x46, 0x78, 0x2c, 0x41, 0xba, 0x93,
	0x0b, 0xd9, 0x89, 0x49, 0xbf, 0xac, 0x48, 0x17, 0xf7, 0xe0, 0x09, 0x80, 0x97, 0x05, 0xe0, 0xb3,
	0x64, 0x41, 0xee, 0xf8, 0x4d, 0x44, 0x6e, 0x08, 0xcd, 0xd2, 0x24, 0x3f, 0x22, 0x7c, 0x2c, 0x21,
	0xa6, 0x97, 0xe6, 0x0b, 0xd9, 0x39, 0xdb, 0x23, 0x87, 0xec, 0xbb, 0x13, 0x5d, 0x10, 0x1c, 0x66,
	0x09, 0xed, 0xcc, 0x81, 0x7c, 0x8d, 0xf0, 0x48, 0x34, 0x16, 0x59, 0xe9, 0x25, 0x7b, 0x01, 0xdc,
	0xd5, 0xde, 0x9c, 0x00, 0xe9, 0x4b, 0x02, 0xe9, 0x69, 0x32, 0x93, 0x85, 0x54, 0x6e, 0x78, 0x17,
	0xa6, 0x26, 0xf9, 0x12, 0xe1, 0x23, 0xd1, 0x38, 0x5e, 0x86, 0x57, 0x7a, 0xc9, 0x53, 0x37, 0x68,
	0x53, 0x2f, 0x2c, 0x74, 0x56, 0xa0, 0xcd, 0x93, 0xa9, 0x2c, 0xb4, 0xe4, 0x2b, 0x84, 0x47, 0xa2,
	0xe2, 0x9f, 0x9c, 0xcb, 0x58, 0x2e, 0xf1, 0x82, 0x21, 0x2d, 0xf5, 0xe0, 0x01, 0xe8, 0x8a, 0x02,
	0x5d, 0x81, 0xcc, 0x45, 0xd0, 0xc1, 0xc5, 0x40, 0xd5, 0x7d, 0xeb, 0xd0, 0xa9, 0xf0, 0x14, 0xe1,
	0x13, 0xa9, 0x32, 0x9b, 0x5c, 0xee, 0xa5, 0x9e, 0x31, 0x6d, 0x2f, 0x5d, 0xd9, 0x9b, 0x33, 0x10,
	0xb9, 0x24, 0x88, 0xac, 0x92, 0xe5, 0x08, 0x91, 0x32, 0xe3, 0x6a, 0x2c, 0xd5, 0xae, 0xaa, 0x6f,
	0xab, 0x62, 0x0f, 0x86, 0xb7, 0xe2, 0x48, 0x54, 0x7d, 0x76, 0x6a, 0xe7, 0x44, 0x6d, 0xdd, 0xa9,
	0x9d, 0x93, 0x65, 0x32, 0xbd, 0x22, 0x90, 0x9f, 0x27, 0xab, 0xb2, 0x6e, 0xeb, 0x8b, 0xc2, 0x5d,
	0xce, 0xfa, 0x76, 0x2b, 0x37, 0x5a, 0xb7, 0x8c, 0x26, 0xf9, 0x16, 0xe1, 0x23, 0xd1, 0xc0, 0x5d,
	0xf4, 0x77, 0xef, 0xf0, 0x53, 0x55, 0x3e, 0x95, 0x05, 0xfc, 0x79, 0x72, 0xa6, 0x4b, 0xf8, 0xe4,
	0x13, 0x84, 0x87, 0x3c, 0x5d, 0x49, 0xe6, 0xb3, 0xd3, 0x15, 0x52, 0xc3, 0xd2, 0x42, 0x37, 0xa6,
	0x5d, 0x02, 0xf2, 0x74, 0xac, 0xdc, 0xf0, 0x94, 0x7d, 0x53, 0x6e, 0x70, 0xa7, 0x49, 0x3e, 0x42,
	0xf8, 0x90, 0x17, 0xc1, 0x4b, 0xdc, 0x7c, 0x76, 0x0e, 0xba, 0xc5, 0x14, 0x13, 0xdb, 0x74, 0x46,
	0x60, 0x3a, 0x49, 0x26, 0x33, 0x30, 0x91, 0x47, 0xa8, 0x25, 0x6e, 0xc9, 0x62, 0x36, 0xe3, 0x98,
	0x66, 0x96, 0x8a, 0xdd, 0x9a, 0x03, 0xa0, 0x82, 0x00, 0x44, 0xc9, 0xa9, 0x14, 0x40, 0xbb, 0x9f,
	0xc2, 0xc9, 0xaf, 0x08, 0x8f, 0xc6, 0x74, 0x1a, 0xe9, 0xd0, 0xe8, 0xc9, 0x4a, 0x54, 0x7a, 0xb9,
	0x47, 0x2f, 0x80, 0x7a, 0x4d, 0x40, 0xbd, 0x4a, 0x2e, 0xa7, 0x40, 0x6d, 0xfb, 0x30, 0x2f, 0x37,
	0x76, 0xd5, 0x7a, 0x53, 0x6e, 0x78, 0x02, 0xbd, 0x49, 0xbe, 0x43, 0x98, 0xc4, 0x16, 0xf0, 0xca,
	0xdd, 0xa1, 0xe5, 0xf7, 0x40, 0x24, 0x5d, 0x1d, 0xd3, 0x73, 0x82, 0xc8, 0x02, 0x29, 0x74, 0x4b,
	0xa4, 0x54, 0x7a, 0xfc, 0x3c, 0x8f, 0x9e, 0x3c, 0xcf, 0xa3, 0xbf, 0x9e, 0xe7, 0xd1, 0xa7, 0x3b,
	0xf9, 0x81, 0x27, 0x3b, 0xf9, 0x81, 0x3f, 0x76, 0xf2, 0x03, 0xef, 0x14, 0x42, 0x5f, 0x7c, 0xa2,
	0xd1, 0x1e, 0xee, 0xc6, 0x13, 0xdf, 0x7d, 0xf4, 0x83, 0xe2, 0xbf, 0x29, 0x56, 0xfe, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x74, 0x43, 0x81, 0x2a, 0x57, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a StreamRecord by index.
	StreamRecord(ctx context.Context, in *QueryGetStreamRecordRequest, opts ...grpc.CallOption) (*QueryGetStreamRecordResponse, error)
	// Queries a list of StreamRecord items.
	StreamRecordAll(ctx context.Context, in *QueryAllStreamRecordRequest, opts ...grpc.CallOption) (*QueryAllStreamRecordResponse, error)
	// Queries a PaymentAccountCount by index.
	PaymentAccountCount(ctx context.Context, in *QueryGetPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountCountResponse, error)
	// Queries a list of PaymentAccountCount items.
	PaymentAccountCountAll(ctx context.Context, in *QueryAllPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryAllPaymentAccountCountResponse, error)
	// Queries a PaymentAccount by index.
	PaymentAccount(ctx context.Context, in *QueryGetPaymentAccountRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountResponse, error)
	// Queries a list of PaymentAccount items.
	PaymentAccountAll(ctx context.Context, in *QueryAllPaymentAccountRequest, opts ...grpc.CallOption) (*QueryAllPaymentAccountResponse, error)
	// Queries a list of DynamicBalance items.
	DynamicBalance(ctx context.Context, in *QueryDynamicBalanceRequest, opts ...grpc.CallOption) (*QueryDynamicBalanceResponse, error)
	// Queries a list of GetPaymentAccountsByOwner items.
	GetPaymentAccountsByOwner(ctx context.Context, in *QueryGetPaymentAccountsByOwnerRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountsByOwnerResponse, error)
	// Queries a list of MockBucketMeta items.
	MockBucketMeta(ctx context.Context, in *QueryGetMockBucketMetaRequest, opts ...grpc.CallOption) (*QueryGetMockBucketMetaResponse, error)
	MockBucketMetaAll(ctx context.Context, in *QueryAllMockBucketMetaRequest, opts ...grpc.CallOption) (*QueryAllMockBucketMetaResponse, error)
	// Queries a list of Flow items.
	Flow(ctx context.Context, in *QueryGetFlowRequest, opts ...grpc.CallOption) (*QueryGetFlowResponse, error)
	FlowAll(ctx context.Context, in *QueryAllFlowRequest, opts ...grpc.CallOption) (*QueryAllFlowResponse, error)
	// Queries a BnbPrice by index.
	BnbPrice(ctx context.Context, in *QueryGetBnbPriceRequest, opts ...grpc.CallOption) (*QueryGetBnbPriceResponse, error)
	// Queries a list of AutoSettleQueue items.
	AutoSettleQueue(ctx context.Context, in *QueryGetAutoSettleQueueRequest, opts ...grpc.CallOption) (*QueryGetAutoSettleQueueResponse, error)
	AutoSettleQueueAll(ctx context.Context, in *QueryAllAutoSettleQueueRequest, opts ...grpc.CallOption) (*QueryAllAutoSettleQueueResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamRecord(ctx context.Context, in *QueryGetStreamRecordRequest, opts ...grpc.CallOption) (*QueryGetStreamRecordResponse, error) {
	out := new(QueryGetStreamRecordResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/StreamRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamRecordAll(ctx context.Context, in *QueryAllStreamRecordRequest, opts ...grpc.CallOption) (*QueryAllStreamRecordResponse, error) {
	out := new(QueryAllStreamRecordResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/StreamRecordAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountCount(ctx context.Context, in *QueryGetPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountCountResponse, error) {
	out := new(QueryGetPaymentAccountCountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/PaymentAccountCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountCountAll(ctx context.Context, in *QueryAllPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryAllPaymentAccountCountResponse, error) {
	out := new(QueryAllPaymentAccountCountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/PaymentAccountCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccount(ctx context.Context, in *QueryGetPaymentAccountRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountResponse, error) {
	out := new(QueryGetPaymentAccountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/PaymentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountAll(ctx context.Context, in *QueryAllPaymentAccountRequest, opts ...grpc.CallOption) (*QueryAllPaymentAccountResponse, error) {
	out := new(QueryAllPaymentAccountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/PaymentAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DynamicBalance(ctx context.Context, in *QueryDynamicBalanceRequest, opts ...grpc.CallOption) (*QueryDynamicBalanceResponse, error) {
	out := new(QueryDynamicBalanceResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/DynamicBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPaymentAccountsByOwner(ctx context.Context, in *QueryGetPaymentAccountsByOwnerRequest, opts ...grpc.CallOption) (*QueryGetPaymentAccountsByOwnerResponse, error) {
	out := new(QueryGetPaymentAccountsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/GetPaymentAccountsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MockBucketMeta(ctx context.Context, in *QueryGetMockBucketMetaRequest, opts ...grpc.CallOption) (*QueryGetMockBucketMetaResponse, error) {
	out := new(QueryGetMockBucketMetaResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/MockBucketMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MockBucketMetaAll(ctx context.Context, in *QueryAllMockBucketMetaRequest, opts ...grpc.CallOption) (*QueryAllMockBucketMetaResponse, error) {
	out := new(QueryAllMockBucketMetaResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/MockBucketMetaAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Flow(ctx context.Context, in *QueryGetFlowRequest, opts ...grpc.CallOption) (*QueryGetFlowResponse, error) {
	out := new(QueryGetFlowResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/Flow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FlowAll(ctx context.Context, in *QueryAllFlowRequest, opts ...grpc.CallOption) (*QueryAllFlowResponse, error) {
	out := new(QueryAllFlowResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/FlowAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BnbPrice(ctx context.Context, in *QueryGetBnbPriceRequest, opts ...grpc.CallOption) (*QueryGetBnbPriceResponse, error) {
	out := new(QueryGetBnbPriceResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/BnbPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutoSettleQueue(ctx context.Context, in *QueryGetAutoSettleQueueRequest, opts ...grpc.CallOption) (*QueryGetAutoSettleQueueResponse, error) {
	out := new(QueryGetAutoSettleQueueResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/AutoSettleQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutoSettleQueueAll(ctx context.Context, in *QueryAllAutoSettleQueueRequest, opts ...grpc.CallOption) (*QueryAllAutoSettleQueueResponse, error) {
	out := new(QueryAllAutoSettleQueueResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.bfs.payment.Query/AutoSettleQueueAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a StreamRecord by index.
	StreamRecord(context.Context, *QueryGetStreamRecordRequest) (*QueryGetStreamRecordResponse, error)
	// Queries a list of StreamRecord items.
	StreamRecordAll(context.Context, *QueryAllStreamRecordRequest) (*QueryAllStreamRecordResponse, error)
	// Queries a PaymentAccountCount by index.
	PaymentAccountCount(context.Context, *QueryGetPaymentAccountCountRequest) (*QueryGetPaymentAccountCountResponse, error)
	// Queries a list of PaymentAccountCount items.
	PaymentAccountCountAll(context.Context, *QueryAllPaymentAccountCountRequest) (*QueryAllPaymentAccountCountResponse, error)
	// Queries a PaymentAccount by index.
	PaymentAccount(context.Context, *QueryGetPaymentAccountRequest) (*QueryGetPaymentAccountResponse, error)
	// Queries a list of PaymentAccount items.
	PaymentAccountAll(context.Context, *QueryAllPaymentAccountRequest) (*QueryAllPaymentAccountResponse, error)
	// Queries a list of DynamicBalance items.
	DynamicBalance(context.Context, *QueryDynamicBalanceRequest) (*QueryDynamicBalanceResponse, error)
	// Queries a list of GetPaymentAccountsByOwner items.
	GetPaymentAccountsByOwner(context.Context, *QueryGetPaymentAccountsByOwnerRequest) (*QueryGetPaymentAccountsByOwnerResponse, error)
	// Queries a list of MockBucketMeta items.
	MockBucketMeta(context.Context, *QueryGetMockBucketMetaRequest) (*QueryGetMockBucketMetaResponse, error)
	MockBucketMetaAll(context.Context, *QueryAllMockBucketMetaRequest) (*QueryAllMockBucketMetaResponse, error)
	// Queries a list of Flow items.
	Flow(context.Context, *QueryGetFlowRequest) (*QueryGetFlowResponse, error)
	FlowAll(context.Context, *QueryAllFlowRequest) (*QueryAllFlowResponse, error)
	// Queries a BnbPrice by index.
	BnbPrice(context.Context, *QueryGetBnbPriceRequest) (*QueryGetBnbPriceResponse, error)
	// Queries a list of AutoSettleQueue items.
	AutoSettleQueue(context.Context, *QueryGetAutoSettleQueueRequest) (*QueryGetAutoSettleQueueResponse, error)
	AutoSettleQueueAll(context.Context, *QueryAllAutoSettleQueueRequest) (*QueryAllAutoSettleQueueResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StreamRecord(ctx context.Context, req *QueryGetStreamRecordRequest) (*QueryGetStreamRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamRecord not implemented")
}
func (*UnimplementedQueryServer) StreamRecordAll(ctx context.Context, req *QueryAllStreamRecordRequest) (*QueryAllStreamRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamRecordAll not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountCount(ctx context.Context, req *QueryGetPaymentAccountCountRequest) (*QueryGetPaymentAccountCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountCount not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountCountAll(ctx context.Context, req *QueryAllPaymentAccountCountRequest) (*QueryAllPaymentAccountCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountCountAll not implemented")
}
func (*UnimplementedQueryServer) PaymentAccount(ctx context.Context, req *QueryGetPaymentAccountRequest) (*QueryGetPaymentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccount not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountAll(ctx context.Context, req *QueryAllPaymentAccountRequest) (*QueryAllPaymentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountAll not implemented")
}
func (*UnimplementedQueryServer) DynamicBalance(ctx context.Context, req *QueryDynamicBalanceRequest) (*QueryDynamicBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicBalance not implemented")
}
func (*UnimplementedQueryServer) GetPaymentAccountsByOwner(ctx context.Context, req *QueryGetPaymentAccountsByOwnerRequest) (*QueryGetPaymentAccountsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentAccountsByOwner not implemented")
}
func (*UnimplementedQueryServer) MockBucketMeta(ctx context.Context, req *QueryGetMockBucketMetaRequest) (*QueryGetMockBucketMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockBucketMeta not implemented")
}
func (*UnimplementedQueryServer) MockBucketMetaAll(ctx context.Context, req *QueryAllMockBucketMetaRequest) (*QueryAllMockBucketMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockBucketMetaAll not implemented")
}
func (*UnimplementedQueryServer) Flow(ctx context.Context, req *QueryGetFlowRequest) (*QueryGetFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flow not implemented")
}
func (*UnimplementedQueryServer) FlowAll(ctx context.Context, req *QueryAllFlowRequest) (*QueryAllFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowAll not implemented")
}
func (*UnimplementedQueryServer) BnbPrice(ctx context.Context, req *QueryGetBnbPriceRequest) (*QueryGetBnbPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BnbPrice not implemented")
}
func (*UnimplementedQueryServer) AutoSettleQueue(ctx context.Context, req *QueryGetAutoSettleQueueRequest) (*QueryGetAutoSettleQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSettleQueue not implemented")
}
func (*UnimplementedQueryServer) AutoSettleQueueAll(ctx context.Context, req *QueryAllAutoSettleQueueRequest) (*QueryAllAutoSettleQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSettleQueueAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStreamRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/StreamRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamRecord(ctx, req.(*QueryGetStreamRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStreamRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/StreamRecordAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamRecordAll(ctx, req.(*QueryAllStreamRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentAccountCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/PaymentAccountCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountCount(ctx, req.(*QueryGetPaymentAccountCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPaymentAccountCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/PaymentAccountCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountCountAll(ctx, req.(*QueryAllPaymentAccountCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/PaymentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccount(ctx, req.(*QueryGetPaymentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPaymentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/PaymentAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountAll(ctx, req.(*QueryAllPaymentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DynamicBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDynamicBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DynamicBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/DynamicBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DynamicBalance(ctx, req.(*QueryDynamicBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPaymentAccountsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentAccountsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPaymentAccountsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/GetPaymentAccountsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPaymentAccountsByOwner(ctx, req.(*QueryGetPaymentAccountsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MockBucketMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMockBucketMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MockBucketMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/MockBucketMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MockBucketMeta(ctx, req.(*QueryGetMockBucketMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MockBucketMetaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMockBucketMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MockBucketMetaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/MockBucketMetaAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MockBucketMetaAll(ctx, req.(*QueryAllMockBucketMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Flow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Flow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/Flow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Flow(ctx, req.(*QueryGetFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FlowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FlowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/FlowAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FlowAll(ctx, req.(*QueryAllFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BnbPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBnbPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BnbPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/BnbPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BnbPrice(ctx, req.(*QueryGetBnbPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutoSettleQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAutoSettleQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutoSettleQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/AutoSettleQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutoSettleQueue(ctx, req.(*QueryGetAutoSettleQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutoSettleQueueAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAutoSettleQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutoSettleQueueAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.bfs.payment.Query/AutoSettleQueueAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutoSettleQueueAll(ctx, req.(*QueryAllAutoSettleQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bnbchain.bfs.payment.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StreamRecord",
			Handler:    _Query_StreamRecord_Handler,
		},
		{
			MethodName: "StreamRecordAll",
			Handler:    _Query_StreamRecordAll_Handler,
		},
		{
			MethodName: "PaymentAccountCount",
			Handler:    _Query_PaymentAccountCount_Handler,
		},
		{
			MethodName: "PaymentAccountCountAll",
			Handler:    _Query_PaymentAccountCountAll_Handler,
		},
		{
			MethodName: "PaymentAccount",
			Handler:    _Query_PaymentAccount_Handler,
		},
		{
			MethodName: "PaymentAccountAll",
			Handler:    _Query_PaymentAccountAll_Handler,
		},
		{
			MethodName: "DynamicBalance",
			Handler:    _Query_DynamicBalance_Handler,
		},
		{
			MethodName: "GetPaymentAccountsByOwner",
			Handler:    _Query_GetPaymentAccountsByOwner_Handler,
		},
		{
			MethodName: "MockBucketMeta",
			Handler:    _Query_MockBucketMeta_Handler,
		},
		{
			MethodName: "MockBucketMetaAll",
			Handler:    _Query_MockBucketMetaAll_Handler,
		},
		{
			MethodName: "Flow",
			Handler:    _Query_Flow_Handler,
		},
		{
			MethodName: "FlowAll",
			Handler:    _Query_FlowAll_Handler,
		},
		{
			MethodName: "BnbPrice",
			Handler:    _Query_BnbPrice_Handler,
		},
		{
			MethodName: "AutoSettleQueue",
			Handler:    _Query_AutoSettleQueue_Handler,
		},
		{
			MethodName: "AutoSettleQueueAll",
			Handler:    _Query_AutoSettleQueueAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bfs/payment/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStreamRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStreamRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStreamRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStreamRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStreamRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStreamRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStreamRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStreamRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStreamRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStreamRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStreamRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStreamRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamRecord) > 0 {
		for iNdEx := len(m.StreamRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StreamRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentAccountCount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAccountCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAccountCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAccountCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAccountCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAccountCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAccountCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentAccountCount) > 0 {
		for iNdEx := len(m.PaymentAccountCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAccountCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentAccount) > 0 {
		for iNdEx := len(m.PaymentAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDynamicBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDynamicBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDynamicBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDynamicBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDynamicBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDynamicBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.DynamicBalance.Size()
		i -= size
		if _, err := m.DynamicBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAccountsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAccountsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAccountsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for iNdEx := len(m.PaymentAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PaymentAccounts[iNdEx])
			copy(dAtA[i:], m.PaymentAccounts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PaymentAccounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMockBucketMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMockBucketMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMockBucketMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMockBucketMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMockBucketMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMockBucketMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MockBucketMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMockBucketMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMockBucketMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMockBucketMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMockBucketMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMockBucketMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMockBucketMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MockBucketMeta) > 0 {
		for iNdEx := len(m.MockBucketMeta) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MockBucketMeta[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFlowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFlowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFlowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFlowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Flow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFlowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFlowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFlowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFlowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Flow) > 0 {
		for iNdEx := len(m.Flow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBnbPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBnbPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBnbPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetBnbPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBnbPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBnbPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BnbPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAutoSettleQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAutoSettleQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAutoSettleQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAutoSettleQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAutoSettleQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAutoSettleQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AutoSettleQueue.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAutoSettleQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAutoSettleQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAutoSettleQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAutoSettleQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAutoSettleQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAutoSettleQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AutoSettleQueue) > 0 {
		for iNdEx := len(m.AutoSettleQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AutoSettleQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStreamRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStreamRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StreamRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStreamRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStreamRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StreamRecord) > 0 {
		for _, e := range m.StreamRecord {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentAccountCount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPaymentAccountCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPaymentAccountCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccountCount) > 0 {
		for _, e := range m.PaymentAccountCount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPaymentAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPaymentAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccount) > 0 {
		for _, e := range m.PaymentAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDynamicBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDynamicBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DynamicBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.StreamRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CurrentTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.CurrentTimestamp))
	}
	return n
}

func (m *QueryGetPaymentAccountsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAccountsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for _, s := range m.PaymentAccounts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetMockBucketMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMockBucketMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MockBucketMeta.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMockBucketMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMockBucketMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MockBucketMeta) > 0 {
		for _, e := range m.MockBucketMeta {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFlowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFlowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Flow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFlowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFlowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Flow) > 0 {
		for _, e := range m.Flow {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBnbPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetBnbPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BnbPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAutoSettleQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAutoSettleQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AutoSettleQueue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAutoSettleQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAutoSettleQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AutoSettleQueue) > 0 {
		for _, e := range m.AutoSettleQueue {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStreamRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStreamRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStreamRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStreamRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStreamRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStreamRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStreamRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStreamRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStreamRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStreamRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStreamRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStreamRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamRecord = append(m.StreamRecord, StreamRecord{})
			if err := m.StreamRecord[len(m.StreamRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccountCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentAccountCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAccountCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAccountCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAccountCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAccountCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAccountCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAccountCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccountCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccountCount = append(m.PaymentAccountCount, PaymentAccountCount{})
			if err := m.PaymentAccountCount[len(m.PaymentAccountCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccount = append(m.PaymentAccount, PaymentAccount{})
			if err := m.PaymentAccount[len(m.PaymentAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDynamicBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDynamicBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDynamicBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDynamicBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDynamicBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDynamicBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DynamicBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTimestamp", wireType)
			}
			m.CurrentTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAccountsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAccountsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAccountsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccounts = append(m.PaymentAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMockBucketMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMockBucketMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMockBucketMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMockBucketMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMockBucketMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMockBucketMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MockBucketMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MockBucketMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMockBucketMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMockBucketMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMockBucketMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMockBucketMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMockBucketMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMockBucketMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MockBucketMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MockBucketMeta = append(m.MockBucketMeta, MockBucketMeta{})
			if err := m.MockBucketMeta[len(m.MockBucketMeta)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFlowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFlowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFlowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFlowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFlowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFlowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flow = append(m.Flow, Flow{})
			if err := m.Flow[len(m.Flow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBnbPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBnbPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBnbPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBnbPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBnbPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBnbPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BnbPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BnbPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAutoSettleQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAutoSettleQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAutoSettleQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAutoSettleQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAutoSettleQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAutoSettleQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSettleQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AutoSettleQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAutoSettleQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAutoSettleQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAutoSettleQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAutoSettleQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAutoSettleQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAutoSettleQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSettleQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoSettleQueue = append(m.AutoSettleQueue, AutoSettleQueue{})
			if err := m.AutoSettleQueue[len(m.AutoSettleQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
