// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/payment/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryParamsByTimestampRequest is request type for the Query/ParamsByTimestamp RPC method with timestamp.
type QueryParamsByTimestampRequest struct {
	// the timestamp of the block time you want to query
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryParamsByTimestampRequest) Reset()         { *m = QueryParamsByTimestampRequest{} }
func (m *QueryParamsByTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsByTimestampRequest) ProtoMessage()    {}
func (*QueryParamsByTimestampRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{2}
}
func (m *QueryParamsByTimestampRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsByTimestampRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsByTimestampRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsByTimestampRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsByTimestampRequest.Merge(m, src)
}
func (m *QueryParamsByTimestampRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsByTimestampRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsByTimestampRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsByTimestampRequest proto.InternalMessageInfo

func (m *QueryParamsByTimestampRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// QueryParamsByTimestampResponse is response type for the Query/ParamsByTimestamp RPC method with timestamp.
type QueryParamsByTimestampResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsByTimestampResponse) Reset()         { *m = QueryParamsByTimestampResponse{} }
func (m *QueryParamsByTimestampResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsByTimestampResponse) ProtoMessage()    {}
func (*QueryParamsByTimestampResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{3}
}
func (m *QueryParamsByTimestampResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsByTimestampResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsByTimestampResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsByTimestampResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsByTimestampResponse.Merge(m, src)
}
func (m *QueryParamsByTimestampResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsByTimestampResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsByTimestampResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsByTimestampResponse proto.InternalMessageInfo

func (m *QueryParamsByTimestampResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryOutFlowsRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryOutFlowsRequest) Reset()         { *m = QueryOutFlowsRequest{} }
func (m *QueryOutFlowsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutFlowsRequest) ProtoMessage()    {}
func (*QueryOutFlowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{4}
}
func (m *QueryOutFlowsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutFlowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutFlowsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutFlowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutFlowsRequest.Merge(m, src)
}
func (m *QueryOutFlowsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutFlowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutFlowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutFlowsRequest proto.InternalMessageInfo

func (m *QueryOutFlowsRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryOutFlowsResponse struct {
	OutFlows []OutFlow `protobuf:"bytes,1,rep,name=out_flows,json=outFlows,proto3" json:"out_flows"`
}

func (m *QueryOutFlowsResponse) Reset()         { *m = QueryOutFlowsResponse{} }
func (m *QueryOutFlowsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutFlowsResponse) ProtoMessage()    {}
func (*QueryOutFlowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{5}
}
func (m *QueryOutFlowsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutFlowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutFlowsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutFlowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutFlowsResponse.Merge(m, src)
}
func (m *QueryOutFlowsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutFlowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutFlowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutFlowsResponse proto.InternalMessageInfo

func (m *QueryOutFlowsResponse) GetOutFlows() []OutFlow {
	if m != nil {
		return m.OutFlows
	}
	return nil
}

type QueryGetStreamRecordRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryGetStreamRecordRequest) Reset()         { *m = QueryGetStreamRecordRequest{} }
func (m *QueryGetStreamRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStreamRecordRequest) ProtoMessage()    {}
func (*QueryGetStreamRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{6}
}
func (m *QueryGetStreamRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStreamRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStreamRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStreamRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStreamRecordRequest.Merge(m, src)
}
func (m *QueryGetStreamRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStreamRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStreamRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStreamRecordRequest proto.InternalMessageInfo

func (m *QueryGetStreamRecordRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryGetStreamRecordResponse struct {
	StreamRecord StreamRecord `protobuf:"bytes,1,opt,name=stream_record,json=streamRecord,proto3" json:"stream_record"`
}

func (m *QueryGetStreamRecordResponse) Reset()         { *m = QueryGetStreamRecordResponse{} }
func (m *QueryGetStreamRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStreamRecordResponse) ProtoMessage()    {}
func (*QueryGetStreamRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{7}
}
func (m *QueryGetStreamRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStreamRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStreamRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStreamRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStreamRecordResponse.Merge(m, src)
}
func (m *QueryGetStreamRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStreamRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStreamRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStreamRecordResponse proto.InternalMessageInfo

func (m *QueryGetStreamRecordResponse) GetStreamRecord() StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return StreamRecord{}
}

type QueryStreamRecordsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStreamRecordsRequest) Reset()         { *m = QueryStreamRecordsRequest{} }
func (m *QueryStreamRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStreamRecordsRequest) ProtoMessage()    {}
func (*QueryStreamRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{8}
}
func (m *QueryStreamRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamRecordsRequest.Merge(m, src)
}
func (m *QueryStreamRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamRecordsRequest proto.InternalMessageInfo

func (m *QueryStreamRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryStreamRecordsResponse struct {
	StreamRecords []StreamRecord      `protobuf:"bytes,1,rep,name=stream_records,json=streamRecords,proto3" json:"stream_records"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStreamRecordsResponse) Reset()         { *m = QueryStreamRecordsResponse{} }
func (m *QueryStreamRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStreamRecordsResponse) ProtoMessage()    {}
func (*QueryStreamRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{9}
}
func (m *QueryStreamRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamRecordsResponse.Merge(m, src)
}
func (m *QueryStreamRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamRecordsResponse proto.InternalMessageInfo

func (m *QueryStreamRecordsResponse) GetStreamRecords() []StreamRecord {
	if m != nil {
		return m.StreamRecords
	}
	return nil
}

func (m *QueryStreamRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPaymentAccountCountRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryPaymentAccountCountRequest) Reset()         { *m = QueryPaymentAccountCountRequest{} }
func (m *QueryPaymentAccountCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountCountRequest) ProtoMessage()    {}
func (*QueryPaymentAccountCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{10}
}
func (m *QueryPaymentAccountCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountCountRequest.Merge(m, src)
}
func (m *QueryPaymentAccountCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountCountRequest proto.InternalMessageInfo

func (m *QueryPaymentAccountCountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryPaymentAccountCountResponse struct {
	PaymentAccountCount PaymentAccountCount `protobuf:"bytes,1,opt,name=payment_account_count,json=paymentAccountCount,proto3" json:"payment_account_count"`
}

func (m *QueryPaymentAccountCountResponse) Reset()         { *m = QueryPaymentAccountCountResponse{} }
func (m *QueryPaymentAccountCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountCountResponse) ProtoMessage()    {}
func (*QueryPaymentAccountCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{11}
}
func (m *QueryPaymentAccountCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountCountResponse.Merge(m, src)
}
func (m *QueryPaymentAccountCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountCountResponse proto.InternalMessageInfo

func (m *QueryPaymentAccountCountResponse) GetPaymentAccountCount() PaymentAccountCount {
	if m != nil {
		return m.PaymentAccountCount
	}
	return PaymentAccountCount{}
}

type QueryPaymentAccountCountsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPaymentAccountCountsRequest) Reset()         { *m = QueryPaymentAccountCountsRequest{} }
func (m *QueryPaymentAccountCountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountCountsRequest) ProtoMessage()    {}
func (*QueryPaymentAccountCountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{12}
}
func (m *QueryPaymentAccountCountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountCountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountCountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountCountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountCountsRequest.Merge(m, src)
}
func (m *QueryPaymentAccountCountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountCountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountCountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountCountsRequest proto.InternalMessageInfo

func (m *QueryPaymentAccountCountsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPaymentAccountCountsResponse struct {
	PaymentAccountCounts []PaymentAccountCount `protobuf:"bytes,1,rep,name=payment_account_counts,json=paymentAccountCounts,proto3" json:"payment_account_counts"`
	Pagination           *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPaymentAccountCountsResponse) Reset()         { *m = QueryPaymentAccountCountsResponse{} }
func (m *QueryPaymentAccountCountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountCountsResponse) ProtoMessage()    {}
func (*QueryPaymentAccountCountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{13}
}
func (m *QueryPaymentAccountCountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountCountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountCountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountCountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountCountsResponse.Merge(m, src)
}
func (m *QueryPaymentAccountCountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountCountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountCountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountCountsResponse proto.InternalMessageInfo

func (m *QueryPaymentAccountCountsResponse) GetPaymentAccountCounts() []PaymentAccountCount {
	if m != nil {
		return m.PaymentAccountCounts
	}
	return nil
}

func (m *QueryPaymentAccountCountsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPaymentAccountRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryPaymentAccountRequest) Reset()         { *m = QueryPaymentAccountRequest{} }
func (m *QueryPaymentAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountRequest) ProtoMessage()    {}
func (*QueryPaymentAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{14}
}
func (m *QueryPaymentAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountRequest.Merge(m, src)
}
func (m *QueryPaymentAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountRequest proto.InternalMessageInfo

func (m *QueryPaymentAccountRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryPaymentAccountResponse struct {
	PaymentAccount PaymentAccount `protobuf:"bytes,1,opt,name=payment_account,json=paymentAccount,proto3" json:"payment_account"`
}

func (m *QueryPaymentAccountResponse) Reset()         { *m = QueryPaymentAccountResponse{} }
func (m *QueryPaymentAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountResponse) ProtoMessage()    {}
func (*QueryPaymentAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{15}
}
func (m *QueryPaymentAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountResponse.Merge(m, src)
}
func (m *QueryPaymentAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountResponse proto.InternalMessageInfo

func (m *QueryPaymentAccountResponse) GetPaymentAccount() PaymentAccount {
	if m != nil {
		return m.PaymentAccount
	}
	return PaymentAccount{}
}

type QueryPaymentAccountsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPaymentAccountsRequest) Reset()         { *m = QueryPaymentAccountsRequest{} }
func (m *QueryPaymentAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountsRequest) ProtoMessage()    {}
func (*QueryPaymentAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{16}
}
func (m *QueryPaymentAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountsRequest.Merge(m, src)
}
func (m *QueryPaymentAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountsRequest proto.InternalMessageInfo

func (m *QueryPaymentAccountsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPaymentAccountsResponse struct {
	PaymentAccounts []PaymentAccount    `protobuf:"bytes,1,rep,name=payment_accounts,json=paymentAccounts,proto3" json:"payment_accounts"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPaymentAccountsResponse) Reset()         { *m = QueryPaymentAccountsResponse{} }
func (m *QueryPaymentAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountsResponse) ProtoMessage()    {}
func (*QueryPaymentAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{17}
}
func (m *QueryPaymentAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountsResponse.Merge(m, src)
}
func (m *QueryPaymentAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountsResponse proto.InternalMessageInfo

func (m *QueryPaymentAccountsResponse) GetPaymentAccounts() []PaymentAccount {
	if m != nil {
		return m.PaymentAccounts
	}
	return nil
}

func (m *QueryPaymentAccountsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDynamicBalanceRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryDynamicBalanceRequest) Reset()         { *m = QueryDynamicBalanceRequest{} }
func (m *QueryDynamicBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDynamicBalanceRequest) ProtoMessage()    {}
func (*QueryDynamicBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{18}
}
func (m *QueryDynamicBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDynamicBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDynamicBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDynamicBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDynamicBalanceRequest.Merge(m, src)
}
func (m *QueryDynamicBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDynamicBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDynamicBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDynamicBalanceRequest proto.InternalMessageInfo

func (m *QueryDynamicBalanceRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryDynamicBalanceResponse struct {
	// dynamic balance is static balance + flowDelta
	DynamicBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=dynamic_balance,json=dynamicBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"dynamic_balance"`
	// the stream record of the given account, if it does not exist, it will be default values
	StreamRecord StreamRecord `protobuf:"bytes,2,opt,name=stream_record,json=streamRecord,proto3" json:"stream_record"`
	// the timestamp of the current block
	CurrentTimestamp int64 `protobuf:"varint,3,opt,name=current_timestamp,json=currentTimestamp,proto3" json:"current_timestamp,omitempty"`
	// bank_balance is the BNB balance of the bank module
	BankBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=bank_balance,json=bankBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bank_balance"`
	// available_balance is bank balance + static balance
	AvailableBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=available_balance,json=availableBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"available_balance"`
	// locked_fee is buffer balance + locked balance
	LockedFee github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=locked_fee,json=lockedFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"locked_fee"`
	// change_rate is the netflow rate of the given account
	ChangeRate github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=change_rate,json=changeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"change_rate"`
}

func (m *QueryDynamicBalanceResponse) Reset()         { *m = QueryDynamicBalanceResponse{} }
func (m *QueryDynamicBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDynamicBalanceResponse) ProtoMessage()    {}
func (*QueryDynamicBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{19}
}
func (m *QueryDynamicBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDynamicBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDynamicBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDynamicBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDynamicBalanceResponse.Merge(m, src)
}
func (m *QueryDynamicBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDynamicBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDynamicBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDynamicBalanceResponse proto.InternalMessageInfo

func (m *QueryDynamicBalanceResponse) GetStreamRecord() StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return StreamRecord{}
}

func (m *QueryDynamicBalanceResponse) GetCurrentTimestamp() int64 {
	if m != nil {
		return m.CurrentTimestamp
	}
	return 0
}

type QueryPaymentAccountsByOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryPaymentAccountsByOwnerRequest) Reset()         { *m = QueryPaymentAccountsByOwnerRequest{} }
func (m *QueryPaymentAccountsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountsByOwnerRequest) ProtoMessage()    {}
func (*QueryPaymentAccountsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{20}
}
func (m *QueryPaymentAccountsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountsByOwnerRequest.Merge(m, src)
}
func (m *QueryPaymentAccountsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountsByOwnerRequest proto.InternalMessageInfo

func (m *QueryPaymentAccountsByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryPaymentAccountsByOwnerResponse struct {
	PaymentAccounts []string `protobuf:"bytes,1,rep,name=paymentAccounts,proto3" json:"paymentAccounts,omitempty"`
}

func (m *QueryPaymentAccountsByOwnerResponse) Reset()         { *m = QueryPaymentAccountsByOwnerResponse{} }
func (m *QueryPaymentAccountsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentAccountsByOwnerResponse) ProtoMessage()    {}
func (*QueryPaymentAccountsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{21}
}
func (m *QueryPaymentAccountsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentAccountsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentAccountsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentAccountsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentAccountsByOwnerResponse.Merge(m, src)
}
func (m *QueryPaymentAccountsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentAccountsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentAccountsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentAccountsByOwnerResponse proto.InternalMessageInfo

func (m *QueryPaymentAccountsByOwnerResponse) GetPaymentAccounts() []string {
	if m != nil {
		return m.PaymentAccounts
	}
	return nil
}

type QueryAutoSettleRecordsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAutoSettleRecordsRequest) Reset()         { *m = QueryAutoSettleRecordsRequest{} }
func (m *QueryAutoSettleRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAutoSettleRecordsRequest) ProtoMessage()    {}
func (*QueryAutoSettleRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{22}
}
func (m *QueryAutoSettleRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutoSettleRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutoSettleRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutoSettleRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutoSettleRecordsRequest.Merge(m, src)
}
func (m *QueryAutoSettleRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutoSettleRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutoSettleRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutoSettleRecordsRequest proto.InternalMessageInfo

func (m *QueryAutoSettleRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAutoSettleRecordsResponse struct {
	AutoSettleRecords []AutoSettleRecord  `protobuf:"bytes,1,rep,name=auto_settle_records,json=autoSettleRecords,proto3" json:"auto_settle_records"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAutoSettleRecordsResponse) Reset()         { *m = QueryAutoSettleRecordsResponse{} }
func (m *QueryAutoSettleRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAutoSettleRecordsResponse) ProtoMessage()    {}
func (*QueryAutoSettleRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{23}
}
func (m *QueryAutoSettleRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutoSettleRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutoSettleRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutoSettleRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutoSettleRecordsResponse.Merge(m, src)
}
func (m *QueryAutoSettleRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutoSettleRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutoSettleRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutoSettleRecordsResponse proto.InternalMessageInfo

func (m *QueryAutoSettleRecordsResponse) GetAutoSettleRecords() []AutoSettleRecord {
	if m != nil {
		return m.AutoSettleRecords
	}
	return nil
}

func (m *QueryAutoSettleRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDelayedWithdrawalRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryDelayedWithdrawalRequest) Reset()         { *m = QueryDelayedWithdrawalRequest{} }
func (m *QueryDelayedWithdrawalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelayedWithdrawalRequest) ProtoMessage()    {}
func (*QueryDelayedWithdrawalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{24}
}
func (m *QueryDelayedWithdrawalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelayedWithdrawalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelayedWithdrawalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelayedWithdrawalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelayedWithdrawalRequest.Merge(m, src)
}
func (m *QueryDelayedWithdrawalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelayedWithdrawalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelayedWithdrawalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelayedWithdrawalRequest proto.InternalMessageInfo

func (m *QueryDelayedWithdrawalRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryDelayedWithdrawalResponse struct {
	DelayedWithdrawal DelayedWithdrawalRecord `protobuf:"bytes,1,opt,name=delayed_withdrawal,json=delayedWithdrawal,proto3" json:"delayed_withdrawal"`
}

func (m *QueryDelayedWithdrawalResponse) Reset()         { *m = QueryDelayedWithdrawalResponse{} }
func (m *QueryDelayedWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelayedWithdrawalResponse) ProtoMessage()    {}
func (*QueryDelayedWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62e6684473ccf4a, []int{25}
}
func (m *QueryDelayedWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelayedWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelayedWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelayedWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelayedWithdrawalResponse.Merge(m, src)
}
func (m *QueryDelayedWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelayedWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelayedWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelayedWithdrawalResponse proto.InternalMessageInfo

func (m *QueryDelayedWithdrawalResponse) GetDelayedWithdrawal() DelayedWithdrawalRecord {
	if m != nil {
		return m.DelayedWithdrawal
	}
	return DelayedWithdrawalRecord{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "greenfield.payment.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "greenfield.payment.QueryParamsResponse")
	proto.RegisterType((*QueryParamsByTimestampRequest)(nil), "greenfield.payment.QueryParamsByTimestampRequest")
	proto.RegisterType((*QueryParamsByTimestampResponse)(nil), "greenfield.payment.QueryParamsByTimestampResponse")
	proto.RegisterType((*QueryOutFlowsRequest)(nil), "greenfield.payment.QueryOutFlowsRequest")
	proto.RegisterType((*QueryOutFlowsResponse)(nil), "greenfield.payment.QueryOutFlowsResponse")
	proto.RegisterType((*QueryGetStreamRecordRequest)(nil), "greenfield.payment.QueryGetStreamRecordRequest")
	proto.RegisterType((*QueryGetStreamRecordResponse)(nil), "greenfield.payment.QueryGetStreamRecordResponse")
	proto.RegisterType((*QueryStreamRecordsRequest)(nil), "greenfield.payment.QueryStreamRecordsRequest")
	proto.RegisterType((*QueryStreamRecordsResponse)(nil), "greenfield.payment.QueryStreamRecordsResponse")
	proto.RegisterType((*QueryPaymentAccountCountRequest)(nil), "greenfield.payment.QueryPaymentAccountCountRequest")
	proto.RegisterType((*QueryPaymentAccountCountResponse)(nil), "greenfield.payment.QueryPaymentAccountCountResponse")
	proto.RegisterType((*QueryPaymentAccountCountsRequest)(nil), "greenfield.payment.QueryPaymentAccountCountsRequest")
	proto.RegisterType((*QueryPaymentAccountCountsResponse)(nil), "greenfield.payment.QueryPaymentAccountCountsResponse")
	proto.RegisterType((*QueryPaymentAccountRequest)(nil), "greenfield.payment.QueryPaymentAccountRequest")
	proto.RegisterType((*QueryPaymentAccountResponse)(nil), "greenfield.payment.QueryPaymentAccountResponse")
	proto.RegisterType((*QueryPaymentAccountsRequest)(nil), "greenfield.payment.QueryPaymentAccountsRequest")
	proto.RegisterType((*QueryPaymentAccountsResponse)(nil), "greenfield.payment.QueryPaymentAccountsResponse")
	proto.RegisterType((*QueryDynamicBalanceRequest)(nil), "greenfield.payment.QueryDynamicBalanceRequest")
	proto.RegisterType((*QueryDynamicBalanceResponse)(nil), "greenfield.payment.QueryDynamicBalanceResponse")
	proto.RegisterType((*QueryPaymentAccountsByOwnerRequest)(nil), "greenfield.payment.QueryPaymentAccountsByOwnerRequest")
	proto.RegisterType((*QueryPaymentAccountsByOwnerResponse)(nil), "greenfield.payment.QueryPaymentAccountsByOwnerResponse")
	proto.RegisterType((*QueryAutoSettleRecordsRequest)(nil), "greenfield.payment.QueryAutoSettleRecordsRequest")
	proto.RegisterType((*QueryAutoSettleRecordsResponse)(nil), "greenfield.payment.QueryAutoSettleRecordsResponse")
	proto.RegisterType((*QueryDelayedWithdrawalRequest)(nil), "greenfield.payment.QueryDelayedWithdrawalRequest")
	proto.RegisterType((*QueryDelayedWithdrawalResponse)(nil), "greenfield.payment.QueryDelayedWithdrawalResponse")
}

func init() { proto.RegisterFile("greenfield/payment/query.proto", fileDescriptor_f62e6684473ccf4a) }

var fileDescriptor_f62e6684473ccf4a = []byte{
	// 1424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6f, 0x13, 0x47,
	0x14, 0xcf, 0x02, 0x09, 0xe4, 0x05, 0x12, 0x3c, 0x09, 0x28, 0x98, 0xd4, 0x81, 0x2d, 0x4a, 0x02,
	0x21, 0xde, 0xc4, 0x29, 0x04, 0xaa, 0x52, 0x89, 0x14, 0x81, 0x50, 0x55, 0x05, 0x4c, 0x25, 0x24,
	0xaa, 0x6a, 0x3b, 0xde, 0x1d, 0x1c, 0x37, 0xf6, 0xae, 0xd9, 0x1d, 0x93, 0x5a, 0x51, 0x2e, 0x48,
	0xed, 0x19, 0xa9, 0xb7, 0x1e, 0x2b, 0xb5, 0xaa, 0xda, 0x1e, 0x91, 0x7a, 0x68, 0xaf, 0x95, 0x38,
	0xd2, 0xf6, 0x52, 0xf5, 0x80, 0x2a, 0xd2, 0x3f, 0xa4, 0xf2, 0xec, 0x5b, 0x67, 0x3f, 0x66, 0xd7,
	0x6b, 0xea, 0x5e, 0x12, 0xef, 0xce, 0xfb, 0xf8, 0xfd, 0xde, 0x9b, 0x37, 0xf3, 0xde, 0x42, 0xa1,
	0xea, 0x30, 0x66, 0x3d, 0xac, 0xb1, 0xba, 0xa9, 0x35, 0x69, 0xbb, 0xc1, 0x2c, 0xae, 0x3d, 0x6a,
	0x31, 0xa7, 0x5d, 0x6c, 0x3a, 0x36, 0xb7, 0x09, 0xd9, 0x5f, 0x2f, 0xe2, 0x7a, 0xfe, 0x82, 0x61,
	0xbb, 0x0d, 0xdb, 0xd5, 0x2a, 0xd4, 0x65, 0x9e, 0xb0, 0xf6, 0x78, 0xa5, 0xc2, 0x38, 0x5d, 0xd1,
	0x9a, 0xb4, 0x5a, 0xb3, 0x28, 0xaf, 0xd9, 0x96, 0xa7, 0x9f, 0x3f, 0xe5, 0xc9, 0xea, 0xe2, 0x49,
	0xf3, 0x1e, 0x70, 0x69, 0xaa, 0x6a, 0x57, 0x6d, 0xef, 0x7d, 0xe7, 0x17, 0xbe, 0x9d, 0xa9, 0xda,
	0x76, 0xb5, 0xce, 0x34, 0xda, 0xac, 0x69, 0xd4, 0xb2, 0x6c, 0x2e, 0xac, 0xf9, 0x3a, 0x8b, 0x12,
	0xb8, 0xb4, 0xc5, 0x6d, 0xdd, 0x65, 0x9c, 0xd7, 0x99, 0xee, 0x30, 0xc3, 0x76, 0x4c, 0x14, 0x2e,
	0x49, 0x84, 0x4d, 0x56, 0xa7, 0x6d, 0x66, 0xea, 0xdb, 0x35, 0xbe, 0x69, 0x3a, 0x74, 0x9b, 0xd6,
	0xc3, 0x3a, 0x67, 0x25, 0x3a, 0x76, 0x8b, 0xeb, 0x0f, 0xeb, 0xf6, 0x36, 0x8a, 0xcc, 0x4a, 0x44,
	0x9a, 0xd4, 0xa1, 0x0d, 0x1f, 0xe4, 0x82, 0x54, 0x40, 0xfc, 0xd7, 0xa9, 0x61, 0xd8, 0x2d, 0x8b,
	0xa3, 0x64, 0xb1, 0xb7, 0xa4, 0x1e, 0x94, 0x9f, 0x93, 0xc8, 0xbb, 0xdc, 0x61, 0xb4, 0x11, 0x62,
	0xa1, 0x4e, 0x01, 0xb9, 0xdb, 0xc9, 0xcb, 0x1d, 0x01, 0xab, 0xcc, 0x1e, 0xb5, 0x98, 0xcb, 0xd5,
	0x0d, 0x98, 0x0c, 0xbd, 0x75, 0x9b, 0xb6, 0xe5, 0x32, 0x72, 0x05, 0x46, 0x3c, 0xf8, 0xd3, 0xca,
	0x19, 0x65, 0x61, 0xac, 0x14, 0x44, 0xe5, 0xe7, 0xbc, 0xe8, 0xe9, 0xac, 0x1f, 0x7a, 0xfe, 0x72,
	0x76, 0xa8, 0x8c, 0xf2, 0xea, 0x35, 0x78, 0x23, 0x60, 0x70, 0xbd, 0xfd, 0x61, 0xad, 0xc1, 0x5c,
	0x4e, 0x1b, 0x4d, 0xf4, 0x48, 0x66, 0x60, 0x94, 0xfb, 0xef, 0x84, 0xf5, 0x83, 0xe5, 0xfd, 0x17,
	0xea, 0x03, 0x28, 0x24, 0xa9, 0xff, 0x67, 0x68, 0xcb, 0x30, 0x25, 0x6c, 0x6f, 0xb4, 0xf8, 0xcd,
	0xba, 0xbd, 0xed, 0xc7, 0x80, 0x4c, 0xc3, 0x61, 0x0c, 0xac, 0x30, 0x39, 0x5a, 0xf6, 0x1f, 0xd5,
	0xfb, 0x70, 0x22, 0xa2, 0x81, 0x20, 0xde, 0x85, 0x51, 0x7f, 0x07, 0x74, 0x70, 0x1c, 0x5c, 0x18,
	0x2b, 0x9d, 0x96, 0xe1, 0x40, 0x45, 0x04, 0x72, 0xc4, 0x46, 0x3b, 0xea, 0x1a, 0x9c, 0x16, 0x86,
	0x6f, 0x31, 0x7e, 0x4f, 0xe4, 0xaa, 0x2c, 0x52, 0xd5, 0x1b, 0xd1, 0x16, 0xcc, 0xc8, 0x15, 0x11,
	0xd8, 0xfb, 0x70, 0x2c, 0x94, 0x7c, 0x0c, 0xd2, 0x19, 0x19, 0xb8, 0xa0, 0x01, 0x44, 0x78, 0xd4,
	0x0d, 0xbc, 0x53, 0x0d, 0x38, 0x25, 0x9c, 0x05, 0x05, 0xbb, 0x51, 0xbb, 0x09, 0xb0, 0x5f, 0xd9,
	0xe8, 0x66, 0xae, 0x88, 0xd5, 0xdc, 0x39, 0x06, 0x8a, 0xde, 0x99, 0x81, 0xc7, 0x40, 0xf1, 0x0e,
	0xad, 0x32, 0xd4, 0x2d, 0x07, 0x34, 0xd5, 0x67, 0x0a, 0xe4, 0x65, 0x5e, 0x90, 0xd0, 0x07, 0x30,
	0x1e, 0x22, 0xe4, 0x87, 0x3b, 0x2b, 0xa3, 0x63, 0x41, 0x46, 0x2e, 0xb9, 0x15, 0x42, 0x7d, 0x40,
	0xa0, 0x9e, 0xef, 0x89, 0xda, 0xc3, 0x12, 0x82, 0xbd, 0x06, 0xb3, 0xb8, 0x51, 0x85, 0xeb, 0xeb,
	0x5e, 0x7e, 0xde, 0xeb, 0xfc, 0xf1, 0x23, 0x34, 0x05, 0xc3, 0xf6, 0xb6, 0xc5, 0x1c, 0xcc, 0xa1,
	0xf7, 0xa0, 0x7e, 0xae, 0xc0, 0x99, 0x64, 0x4d, 0x64, 0x4d, 0xe1, 0x84, 0xb4, 0xe6, 0x31, 0xce,
	0xf3, 0xf2, 0x3d, 0x1f, 0xb3, 0x87, 0x31, 0x98, 0x6c, 0xc6, 0x97, 0xd4, 0x4f, 0x93, 0x61, 0x0c,
	0x3c, 0xc7, 0xbf, 0x29, 0x70, 0x36, 0xc5, 0x19, 0x92, 0x36, 0xe0, 0xa4, 0x94, 0xb4, 0x9f, 0xf2,
	0x3e, 0x59, 0x4f, 0x49, 0x58, 0x0f, 0x70, 0x03, 0x2c, 0xe3, 0xb6, 0x0d, 0x03, 0xf0, 0x23, 0x47,
	0xe0, 0x10, 0x35, 0x4d, 0x3f, 0xf5, 0xe2, 0xb7, 0xda, 0xc4, 0xa2, 0x8f, 0x6a, 0x20, 0xfd, 0xbb,
	0x30, 0x11, 0xa1, 0x8f, 0x11, 0x57, 0x7b, 0xf3, 0x46, 0xca, 0xe3, 0x61, 0xca, 0x2a, 0x93, 0x7a,
	0x1c, 0x78, 0x7a, 0x7f, 0x51, 0xf0, 0x54, 0x8a, 0xf9, 0x41, 0x6a, 0xf7, 0xe0, 0x78, 0x84, 0x9a,
	0x9f, 0xd3, 0xec, 0xdc, 0x26, 0xc2, 0xdc, 0x06, 0x98, 0xc9, 0xcb, 0x98, 0xc9, 0x1b, 0x6d, 0x8b,
	0x36, 0x6a, 0xc6, 0x3a, 0xad, 0x53, 0xcb, 0x60, 0xbd, 0xcf, 0xe2, 0x2f, 0x86, 0x31, 0xbc, 0x51,
	0x45, 0x64, 0xcd, 0x60, 0xc2, 0xf4, 0x56, 0xf4, 0x8a, 0xb7, 0xe4, 0x59, 0x58, 0x7f, 0xa7, 0x43,
	0xe8, 0xaf, 0x97, 0xb3, 0x73, 0xd5, 0x1a, 0xdf, 0x6c, 0x55, 0x8a, 0x86, 0xdd, 0xc0, 0x36, 0x08,
	0xff, 0x2d, 0xb9, 0xe6, 0x96, 0xc6, 0xdb, 0x4d, 0xe6, 0x16, 0x6f, 0x5b, 0xfc, 0xf7, 0x67, 0x4b,
	0x80, 0xb4, 0x6e, 0x5b, 0xbc, 0x3c, 0x6e, 0x86, 0xdc, 0xc5, 0x8f, 0xfc, 0x03, 0xaf, 0x7f, 0xe4,
	0x93, 0x45, 0xc8, 0x19, 0x2d, 0xc7, 0xe9, 0x64, 0x6a, 0xff, 0x96, 0x3e, 0x28, 0x6e, 0xe9, 0xe3,
	0xb8, 0xd0, 0xbd, 0x92, 0x89, 0x0e, 0x47, 0x2b, 0xd4, 0xda, 0xea, 0xb2, 0x3b, 0x34, 0x00, 0x76,
	0x63, 0x1d, 0x8b, 0x3e, 0xb5, 0x1a, 0xe4, 0xe8, 0x63, 0x5a, 0xab, 0xd3, 0x4a, 0x9d, 0x75, 0xbd,
	0x0c, 0x0f, 0xc0, 0xcb, 0xf1, 0xae, 0x59, 0xdf, 0xd5, 0x47, 0x00, 0x75, 0xdb, 0xd8, 0x62, 0xa6,
	0xfe, 0x90, 0xb1, 0xe9, 0x91, 0x01, 0xf8, 0x18, 0xf5, 0xec, 0xdd, 0x64, 0x8c, 0x7c, 0x0c, 0x63,
	0xc6, 0x26, 0xb5, 0xaa, 0x4c, 0x77, 0x28, 0x67, 0xd3, 0x87, 0x07, 0x60, 0x1d, 0x3c, 0x83, 0x65,
	0xca, 0x99, 0xfa, 0x36, 0xa8, 0xb2, 0xf2, 0x5b, 0x6f, 0x6f, 0x74, 0x6e, 0x9c, 0xf4, 0xeb, 0x68,
	0x03, 0xde, 0x4c, 0xd5, 0xc5, 0xbd, 0xbc, 0x00, 0xd1, 0xfa, 0x13, 0x05, 0x3c, 0x1a, 0x2b, 0x4b,
	0xb5, 0x8a, 0x0d, 0xe0, 0xf5, 0x16, 0xb7, 0xef, 0x89, 0x0e, 0xfc, 0x7f, 0x6a, 0x1c, 0x7e, 0x55,
	0xb0, 0x57, 0x94, 0x78, 0x42, 0xd4, 0x0f, 0x60, 0x32, 0x3e, 0x09, 0xf8, 0x47, 0xcf, 0x39, 0x59,
	0x81, 0x44, 0x6d, 0x61, 0x91, 0xe4, 0x68, 0xd4, 0xc7, 0xe0, 0x8e, 0x9f, 0xab, 0x18, 0xb0, 0x1b,
	0xde, 0x18, 0x72, 0xbf, 0x3b, 0x85, 0xf4, 0x3e, 0x81, 0x9e, 0xf8, 0x21, 0x90, 0xe8, 0x62, 0x08,
	0x3e, 0x01, 0x12, 0x9f, 0x6f, 0x30, 0xea, 0x8b, 0xb2, 0x08, 0x48, 0x4c, 0x05, 0x03, 0x61, 0x46,
	0x97, 0x4b, 0x3f, 0xe6, 0x60, 0x58, 0x80, 0x20, 0xbb, 0x30, 0xe2, 0x35, 0xde, 0x64, 0x4e, 0x66,
	0x39, 0x3e, 0x7e, 0xe4, 0xe7, 0x7b, 0xca, 0x79, 0x34, 0x54, 0xf5, 0xc9, 0x1f, 0xff, 0x7c, 0x79,
	0x60, 0x86, 0xe4, 0xb5, 0xc4, 0x49, 0x8b, 0x7c, 0xaf, 0x40, 0x2e, 0x36, 0x37, 0x90, 0x95, 0x1e,
	0x2e, 0xe2, 0x23, 0x4a, 0xbe, 0xd4, 0x8f, 0x0a, 0x02, 0x2c, 0x0a, 0x80, 0x0b, 0x64, 0x2e, 0x19,
	0xa0, 0xb6, 0xd3, 0x3d, 0x52, 0x77, 0xc9, 0x53, 0x05, 0x8e, 0xf8, 0x63, 0x05, 0x59, 0x48, 0x74,
	0x18, 0x99, 0x55, 0xf2, 0xe7, 0x33, 0x48, 0x22, 0x22, 0x4d, 0x20, 0x3a, 0x4f, 0xe6, 0xb5, 0x94,
	0xf9, 0xd5, 0xd5, 0x76, 0x70, 0x33, 0xed, 0x92, 0x6f, 0x15, 0x38, 0x1a, 0xbc, 0x20, 0x88, 0x96,
	0xe8, 0x4c, 0x3e, 0xb7, 0xe4, 0x97, 0xb3, 0x2b, 0x20, 0xc8, 0x55, 0x01, 0x72, 0x89, 0x2c, 0x6a,
	0xbd, 0xc6, 0xd8, 0x00, 0xd0, 0xaf, 0x14, 0x38, 0x16, 0x9a, 0x16, 0xc8, 0x52, 0xa2, 0x63, 0xd9,
	0xec, 0x92, 0x2f, 0x66, 0x15, 0x47, 0x94, 0x17, 0x04, 0xca, 0x73, 0x44, 0xed, 0x89, 0xd2, 0x25,
	0x3f, 0x2b, 0x30, 0x29, 0x69, 0x4a, 0xc9, 0x6a, 0xca, 0xa6, 0x4a, 0x1a, 0x21, 0xf2, 0x6f, 0xf5,
	0xa7, 0x84, 0x70, 0xaf, 0x0a, 0xb8, 0xab, 0x64, 0x45, 0xcb, 0xfa, 0x2d, 0x41, 0xdb, 0x11, 0xb7,
	0xc1, 0x2e, 0xf9, 0x49, 0x81, 0x29, 0x59, 0x93, 0x4e, 0xfa, 0x42, 0xd2, 0x0d, 0xf4, 0xa5, 0x3e,
	0xb5, 0x90, 0x40, 0x49, 0x10, 0xb8, 0x48, 0x2e, 0x64, 0x26, 0xe0, 0x92, 0x6f, 0x14, 0x18, 0x0f,
	0x1b, 0x25, 0xc5, 0x8c, 0xde, 0x7d, 0xb4, 0x5a, 0x66, 0xf9, 0xd7, 0xc0, 0xa9, 0xed, 0x74, 0x86,
	0x80, 0x5d, 0xf2, 0xb5, 0x02, 0x13, 0x91, 0xcb, 0x96, 0x64, 0x75, 0xec, 0xf6, 0x2e, 0xb4, 0x84,
	0x16, 0x5c, 0xbd, 0x28, 0xa0, 0xce, 0x91, 0x73, 0x19, 0xa0, 0xba, 0xe4, 0x3b, 0x05, 0xc6, 0xc3,
	0x5d, 0x6d, 0x4a, 0x30, 0xa5, 0x7d, 0x73, 0x4a, 0x30, 0xe5, 0xed, 0xb2, 0x7a, 0x49, 0x20, 0xd4,
	0xc8, 0x92, 0x0c, 0x61, 0xa4, 0x91, 0x0e, 0x1c, 0x06, 0xcf, 0x15, 0x38, 0x29, 0x6f, 0x5e, 0xc8,
	0xe5, 0xac, 0x51, 0x0a, 0x77, 0x4a, 0xf9, 0xb5, 0xbe, 0xf5, 0x90, 0xc2, 0x35, 0x41, 0x61, 0x8d,
	0x5c, 0xca, 0x12, 0x64, 0xbd, 0xd2, 0xd6, 0x45, 0xd5, 0x75, 0x8b, 0xef, 0x07, 0x05, 0x72, 0xb1,
	0x66, 0x26, 0xe5, 0x02, 0x4b, 0x6a, 0xb1, 0x52, 0x2e, 0xb0, 0xc4, 0x5e, 0x29, 0xfd, 0xba, 0x90,
	0x74, 0x51, 0xe4, 0x99, 0x02, 0xb9, 0x58, 0xb3, 0x90, 0x82, 0x36, 0xa9, 0xbf, 0x49, 0x41, 0x9b,
	0xd8, 0xd6, 0xa8, 0x57, 0x04, 0xda, 0x12, 0x59, 0xd6, 0x32, 0x7d, 0xd0, 0xdd, 0xdf, 0x2f, 0xeb,
	0xb7, 0x9f, 0xbf, 0x2a, 0x28, 0x2f, 0x5e, 0x15, 0x94, 0xbf, 0x5f, 0x15, 0x94, 0xa7, 0x7b, 0x85,
	0xa1, 0x17, 0x7b, 0x85, 0xa1, 0x3f, 0xf7, 0x0a, 0x43, 0x0f, 0xb4, 0x40, 0x23, 0x5e, 0xb1, 0x2a,
	0x4b, 0xc6, 0x26, 0xad, 0x59, 0x41, 0xfb, 0x9f, 0x75, 0x3d, 0x88, 0xae, 0xbc, 0x32, 0x22, 0xbe,
	0xac, 0xae, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x73, 0x20, 0x3f, 0x0e, 0x31, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ParamsByTimestamp queries the parameter of the module by timestamp.
	ParamsByTimestamp(ctx context.Context, in *QueryParamsByTimestampRequest, opts ...grpc.CallOption) (*QueryParamsByTimestampResponse, error)
	// Queries our flows by account.
	OutFlows(ctx context.Context, in *QueryOutFlowsRequest, opts ...grpc.CallOption) (*QueryOutFlowsResponse, error)
	// Queries a stream record by account.
	StreamRecord(ctx context.Context, in *QueryGetStreamRecordRequest, opts ...grpc.CallOption) (*QueryGetStreamRecordResponse, error)
	// Queries all stream records.
	StreamRecords(ctx context.Context, in *QueryStreamRecordsRequest, opts ...grpc.CallOption) (*QueryStreamRecordsResponse, error)
	// Queries the count of payment account by owner.
	PaymentAccountCount(ctx context.Context, in *QueryPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryPaymentAccountCountResponse, error)
	// Queries all counts of payment account for all owners.
	PaymentAccountCounts(ctx context.Context, in *QueryPaymentAccountCountsRequest, opts ...grpc.CallOption) (*QueryPaymentAccountCountsResponse, error)
	// Queries a payment account by payment account address.
	PaymentAccount(ctx context.Context, in *QueryPaymentAccountRequest, opts ...grpc.CallOption) (*QueryPaymentAccountResponse, error)
	// Queries all payment accounts.
	PaymentAccounts(ctx context.Context, in *QueryPaymentAccountsRequest, opts ...grpc.CallOption) (*QueryPaymentAccountsResponse, error)
	// Queries dynamic balance of a payment account.
	DynamicBalance(ctx context.Context, in *QueryDynamicBalanceRequest, opts ...grpc.CallOption) (*QueryDynamicBalanceResponse, error)
	// Queries all payment accounts by a owner.
	PaymentAccountsByOwner(ctx context.Context, in *QueryPaymentAccountsByOwnerRequest, opts ...grpc.CallOption) (*QueryPaymentAccountsByOwnerResponse, error)
	// Queries all auto settle records.
	AutoSettleRecords(ctx context.Context, in *QueryAutoSettleRecordsRequest, opts ...grpc.CallOption) (*QueryAutoSettleRecordsResponse, error)
	// Queries delayed withdrawal of a account.
	DelayedWithdrawal(ctx context.Context, in *QueryDelayedWithdrawalRequest, opts ...grpc.CallOption) (*QueryDelayedWithdrawalResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParamsByTimestamp(ctx context.Context, in *QueryParamsByTimestampRequest, opts ...grpc.CallOption) (*QueryParamsByTimestampResponse, error) {
	out := new(QueryParamsByTimestampResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/ParamsByTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutFlows(ctx context.Context, in *QueryOutFlowsRequest, opts ...grpc.CallOption) (*QueryOutFlowsResponse, error) {
	out := new(QueryOutFlowsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/OutFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamRecord(ctx context.Context, in *QueryGetStreamRecordRequest, opts ...grpc.CallOption) (*QueryGetStreamRecordResponse, error) {
	out := new(QueryGetStreamRecordResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/StreamRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamRecords(ctx context.Context, in *QueryStreamRecordsRequest, opts ...grpc.CallOption) (*QueryStreamRecordsResponse, error) {
	out := new(QueryStreamRecordsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/StreamRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountCount(ctx context.Context, in *QueryPaymentAccountCountRequest, opts ...grpc.CallOption) (*QueryPaymentAccountCountResponse, error) {
	out := new(QueryPaymentAccountCountResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/PaymentAccountCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountCounts(ctx context.Context, in *QueryPaymentAccountCountsRequest, opts ...grpc.CallOption) (*QueryPaymentAccountCountsResponse, error) {
	out := new(QueryPaymentAccountCountsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/PaymentAccountCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccount(ctx context.Context, in *QueryPaymentAccountRequest, opts ...grpc.CallOption) (*QueryPaymentAccountResponse, error) {
	out := new(QueryPaymentAccountResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/PaymentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccounts(ctx context.Context, in *QueryPaymentAccountsRequest, opts ...grpc.CallOption) (*QueryPaymentAccountsResponse, error) {
	out := new(QueryPaymentAccountsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/PaymentAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DynamicBalance(ctx context.Context, in *QueryDynamicBalanceRequest, opts ...grpc.CallOption) (*QueryDynamicBalanceResponse, error) {
	out := new(QueryDynamicBalanceResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/DynamicBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAccountsByOwner(ctx context.Context, in *QueryPaymentAccountsByOwnerRequest, opts ...grpc.CallOption) (*QueryPaymentAccountsByOwnerResponse, error) {
	out := new(QueryPaymentAccountsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/PaymentAccountsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutoSettleRecords(ctx context.Context, in *QueryAutoSettleRecordsRequest, opts ...grpc.CallOption) (*QueryAutoSettleRecordsResponse, error) {
	out := new(QueryAutoSettleRecordsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/AutoSettleRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelayedWithdrawal(ctx context.Context, in *QueryDelayedWithdrawalRequest, opts ...grpc.CallOption) (*QueryDelayedWithdrawalResponse, error) {
	out := new(QueryDelayedWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/greenfield.payment.Query/DelayedWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ParamsByTimestamp queries the parameter of the module by timestamp.
	ParamsByTimestamp(context.Context, *QueryParamsByTimestampRequest) (*QueryParamsByTimestampResponse, error)
	// Queries our flows by account.
	OutFlows(context.Context, *QueryOutFlowsRequest) (*QueryOutFlowsResponse, error)
	// Queries a stream record by account.
	StreamRecord(context.Context, *QueryGetStreamRecordRequest) (*QueryGetStreamRecordResponse, error)
	// Queries all stream records.
	StreamRecords(context.Context, *QueryStreamRecordsRequest) (*QueryStreamRecordsResponse, error)
	// Queries the count of payment account by owner.
	PaymentAccountCount(context.Context, *QueryPaymentAccountCountRequest) (*QueryPaymentAccountCountResponse, error)
	// Queries all counts of payment account for all owners.
	PaymentAccountCounts(context.Context, *QueryPaymentAccountCountsRequest) (*QueryPaymentAccountCountsResponse, error)
	// Queries a payment account by payment account address.
	PaymentAccount(context.Context, *QueryPaymentAccountRequest) (*QueryPaymentAccountResponse, error)
	// Queries all payment accounts.
	PaymentAccounts(context.Context, *QueryPaymentAccountsRequest) (*QueryPaymentAccountsResponse, error)
	// Queries dynamic balance of a payment account.
	DynamicBalance(context.Context, *QueryDynamicBalanceRequest) (*QueryDynamicBalanceResponse, error)
	// Queries all payment accounts by a owner.
	PaymentAccountsByOwner(context.Context, *QueryPaymentAccountsByOwnerRequest) (*QueryPaymentAccountsByOwnerResponse, error)
	// Queries all auto settle records.
	AutoSettleRecords(context.Context, *QueryAutoSettleRecordsRequest) (*QueryAutoSettleRecordsResponse, error)
	// Queries delayed withdrawal of a account.
	DelayedWithdrawal(context.Context, *QueryDelayedWithdrawalRequest) (*QueryDelayedWithdrawalResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ParamsByTimestamp(ctx context.Context, req *QueryParamsByTimestampRequest) (*QueryParamsByTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParamsByTimestamp not implemented")
}
func (*UnimplementedQueryServer) OutFlows(ctx context.Context, req *QueryOutFlowsRequest) (*QueryOutFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutFlows not implemented")
}
func (*UnimplementedQueryServer) StreamRecord(ctx context.Context, req *QueryGetStreamRecordRequest) (*QueryGetStreamRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamRecord not implemented")
}
func (*UnimplementedQueryServer) StreamRecords(ctx context.Context, req *QueryStreamRecordsRequest) (*QueryStreamRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamRecords not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountCount(ctx context.Context, req *QueryPaymentAccountCountRequest) (*QueryPaymentAccountCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountCount not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountCounts(ctx context.Context, req *QueryPaymentAccountCountsRequest) (*QueryPaymentAccountCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountCounts not implemented")
}
func (*UnimplementedQueryServer) PaymentAccount(ctx context.Context, req *QueryPaymentAccountRequest) (*QueryPaymentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccount not implemented")
}
func (*UnimplementedQueryServer) PaymentAccounts(ctx context.Context, req *QueryPaymentAccountsRequest) (*QueryPaymentAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccounts not implemented")
}
func (*UnimplementedQueryServer) DynamicBalance(ctx context.Context, req *QueryDynamicBalanceRequest) (*QueryDynamicBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicBalance not implemented")
}
func (*UnimplementedQueryServer) PaymentAccountsByOwner(ctx context.Context, req *QueryPaymentAccountsByOwnerRequest) (*QueryPaymentAccountsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAccountsByOwner not implemented")
}
func (*UnimplementedQueryServer) AutoSettleRecords(ctx context.Context, req *QueryAutoSettleRecordsRequest) (*QueryAutoSettleRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSettleRecords not implemented")
}
func (*UnimplementedQueryServer) DelayedWithdrawal(ctx context.Context, req *QueryDelayedWithdrawalRequest) (*QueryDelayedWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelayedWithdrawal not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParamsByTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsByTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParamsByTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/ParamsByTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParamsByTimestamp(ctx, req.(*QueryParamsByTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/OutFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutFlows(ctx, req.(*QueryOutFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStreamRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/StreamRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamRecord(ctx, req.(*QueryGetStreamRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/StreamRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamRecords(ctx, req.(*QueryStreamRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentAccountCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/PaymentAccountCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountCount(ctx, req.(*QueryPaymentAccountCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentAccountCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/PaymentAccountCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountCounts(ctx, req.(*QueryPaymentAccountCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/PaymentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccount(ctx, req.(*QueryPaymentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/PaymentAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccounts(ctx, req.(*QueryPaymentAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DynamicBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDynamicBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DynamicBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/DynamicBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DynamicBalance(ctx, req.(*QueryDynamicBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAccountsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentAccountsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAccountsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/PaymentAccountsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAccountsByOwner(ctx, req.(*QueryPaymentAccountsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutoSettleRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAutoSettleRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutoSettleRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/AutoSettleRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutoSettleRecords(ctx, req.(*QueryAutoSettleRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelayedWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelayedWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelayedWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.payment.Query/DelayedWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelayedWithdrawal(ctx, req.(*QueryDelayedWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greenfield.payment.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ParamsByTimestamp",
			Handler:    _Query_ParamsByTimestamp_Handler,
		},
		{
			MethodName: "OutFlows",
			Handler:    _Query_OutFlows_Handler,
		},
		{
			MethodName: "StreamRecord",
			Handler:    _Query_StreamRecord_Handler,
		},
		{
			MethodName: "StreamRecords",
			Handler:    _Query_StreamRecords_Handler,
		},
		{
			MethodName: "PaymentAccountCount",
			Handler:    _Query_PaymentAccountCount_Handler,
		},
		{
			MethodName: "PaymentAccountCounts",
			Handler:    _Query_PaymentAccountCounts_Handler,
		},
		{
			MethodName: "PaymentAccount",
			Handler:    _Query_PaymentAccount_Handler,
		},
		{
			MethodName: "PaymentAccounts",
			Handler:    _Query_PaymentAccounts_Handler,
		},
		{
			MethodName: "DynamicBalance",
			Handler:    _Query_DynamicBalance_Handler,
		},
		{
			MethodName: "PaymentAccountsByOwner",
			Handler:    _Query_PaymentAccountsByOwner_Handler,
		},
		{
			MethodName: "AutoSettleRecords",
			Handler:    _Query_AutoSettleRecords_Handler,
		},
		{
			MethodName: "DelayedWithdrawal",
			Handler:    _Query_DelayedWithdrawal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greenfield/payment/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsByTimestampRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsByTimestampRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsByTimestampRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsByTimestampResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsByTimestampResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsByTimestampResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOutFlowsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutFlowsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutFlowsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutFlowsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutFlowsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutFlowsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutFlows) > 0 {
		for iNdEx := len(m.OutFlows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutFlows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStreamRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStreamRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStreamRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStreamRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStreamRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStreamRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStreamRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStreamRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamRecords) > 0 {
		for iNdEx := len(m.StreamRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StreamRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentAccountCount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountCountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountCountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountCountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountCountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountCountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountCountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentAccountCounts) > 0 {
		for iNdEx := len(m.PaymentAccountCounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAccountCounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentAccounts) > 0 {
		for iNdEx := len(m.PaymentAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDynamicBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDynamicBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDynamicBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDynamicBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDynamicBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDynamicBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ChangeRate.Size()
		i -= size
		if _, err := m.ChangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.LockedFee.Size()
		i -= size
		if _, err := m.LockedFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AvailableBalance.Size()
		i -= size
		if _, err := m.AvailableBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BankBalance.Size()
		i -= size
		if _, err := m.BankBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.CurrentTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.DynamicBalance.Size()
		i -= size
		if _, err := m.DynamicBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentAccountsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentAccountsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentAccountsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for iNdEx := len(m.PaymentAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PaymentAccounts[iNdEx])
			copy(dAtA[i:], m.PaymentAccounts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PaymentAccounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAutoSettleRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutoSettleRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutoSettleRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAutoSettleRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutoSettleRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutoSettleRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AutoSettleRecords) > 0 {
		for iNdEx := len(m.AutoSettleRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AutoSettleRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelayedWithdrawalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelayedWithdrawalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelayedWithdrawalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelayedWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelayedWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelayedWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelayedWithdrawal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsByTimestampRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryParamsByTimestampResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOutFlowsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutFlowsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutFlows) > 0 {
		for _, e := range m.OutFlows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetStreamRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStreamRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StreamRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStreamRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStreamRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StreamRecords) > 0 {
		for _, e := range m.StreamRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentAccountCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentAccountCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentAccountCount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPaymentAccountCountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentAccountCountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccountCounts) > 0 {
		for _, e := range m.PaymentAccountCounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPaymentAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for _, e := range m.PaymentAccounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDynamicBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDynamicBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DynamicBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.StreamRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CurrentTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.CurrentTimestamp))
	}
	l = m.BankBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AvailableBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LockedFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ChangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPaymentAccountsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentAccountsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for _, s := range m.PaymentAccounts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAutoSettleRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAutoSettleRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AutoSettleRecords) > 0 {
		for _, e := range m.AutoSettleRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelayedWithdrawalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelayedWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DelayedWithdrawal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsByTimestampRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsByTimestampRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsByTimestampRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsByTimestampResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsByTimestampResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsByTimestampResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutFlowsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutFlowsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutFlowsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutFlowsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutFlowsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutFlowsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutFlows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutFlows = append(m.OutFlows, OutFlow{})
			if err := m.OutFlows[len(m.OutFlows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStreamRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStreamRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStreamRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStreamRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStreamRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStreamRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamRecords = append(m.StreamRecords, StreamRecord{})
			if err := m.StreamRecords[len(m.StreamRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccountCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentAccountCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountCountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountCountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountCountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountCountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountCountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountCountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccountCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccountCounts = append(m.PaymentAccountCounts, PaymentAccountCount{})
			if err := m.PaymentAccountCounts[len(m.PaymentAccountCounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccounts = append(m.PaymentAccounts, PaymentAccount{})
			if err := m.PaymentAccounts[len(m.PaymentAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDynamicBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDynamicBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDynamicBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDynamicBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDynamicBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDynamicBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DynamicBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTimestamp", wireType)
			}
			m.CurrentTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BankBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentAccountsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentAccountsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentAccountsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccounts = append(m.PaymentAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutoSettleRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutoSettleRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutoSettleRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutoSettleRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutoSettleRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutoSettleRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSettleRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoSettleRecords = append(m.AutoSettleRecords, AutoSettleRecord{})
			if err := m.AutoSettleRecords[len(m.AutoSettleRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelayedWithdrawalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelayedWithdrawalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelayedWithdrawalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelayedWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelayedWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelayedWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedWithdrawal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelayedWithdrawal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
