// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bfs/payment/bnb_price.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SingleBnbPrice struct {
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// price in USD, cast to uint64 with 8 decimal places, e.g. "276.40000000" => 27640000000
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *SingleBnbPrice) Reset()         { *m = SingleBnbPrice{} }
func (m *SingleBnbPrice) String() string { return proto.CompactTextString(m) }
func (*SingleBnbPrice) ProtoMessage()    {}
func (*SingleBnbPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2977977620b14d1, []int{0}
}
func (m *SingleBnbPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleBnbPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleBnbPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleBnbPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleBnbPrice.Merge(m, src)
}
func (m *SingleBnbPrice) XXX_Size() int {
	return m.Size()
}
func (m *SingleBnbPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleBnbPrice.DiscardUnknown(m)
}

var xxx_messageInfo_SingleBnbPrice proto.InternalMessageInfo

func (m *SingleBnbPrice) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SingleBnbPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type BnbPrice struct {
	Prices []*SingleBnbPrice `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (m *BnbPrice) Reset()         { *m = BnbPrice{} }
func (m *BnbPrice) String() string { return proto.CompactTextString(m) }
func (*BnbPrice) ProtoMessage()    {}
func (*BnbPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2977977620b14d1, []int{1}
}
func (m *BnbPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BnbPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BnbPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BnbPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BnbPrice.Merge(m, src)
}
func (m *BnbPrice) XXX_Size() int {
	return m.Size()
}
func (m *BnbPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_BnbPrice.DiscardUnknown(m)
}

var xxx_messageInfo_BnbPrice proto.InternalMessageInfo

func (m *BnbPrice) GetPrices() []*SingleBnbPrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

func init() {
	proto.RegisterType((*SingleBnbPrice)(nil), "bnbchain.bfs.payment.SingleBnbPrice")
	proto.RegisterType((*BnbPrice)(nil), "bnbchain.bfs.payment.BnbPrice")
}

func init() { proto.RegisterFile("bfs/payment/bnb_price.proto", fileDescriptor_c2977977620b14d1) }

var fileDescriptor_c2977977620b14d1 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x4a, 0x2b, 0xd6,
	0x2f, 0x48, 0xac, 0xcc, 0x4d, 0xcd, 0x2b, 0xd1, 0x4f, 0xca, 0x4b, 0x8a, 0x2f, 0x28, 0xca, 0x4c,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x49, 0xca, 0x4b, 0x4a, 0xce, 0x48, 0xcc,
	0xcc, 0xd3, 0x4b, 0x4a, 0x2b, 0xd6, 0x83, 0xaa, 0x52, 0xb2, 0xe2, 0xe2, 0x0b, 0xce, 0xcc, 0x4b,
	0xcf, 0x49, 0x75, 0xca, 0x4b, 0x0a, 0x00, 0xa9, 0x16, 0x12, 0xe2, 0x62, 0x29, 0xc9, 0xcc, 0x4d,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x02, 0xb3, 0x85, 0x44, 0xb8, 0x58, 0xc1, 0x46, 0x49,
	0x30, 0x29, 0x30, 0x6a, 0xb0, 0x04, 0x41, 0x38, 0x4a, 0x1e, 0x5c, 0x1c, 0x70, 0x5d, 0x36, 0x5c,
	0x6c, 0x60, 0xc1, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x15, 0x3d, 0x6c, 0xd6, 0xe9,
	0xa1, 0xda, 0x15, 0x04, 0xd5, 0xe3, 0xe4, 0x74, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0x1a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0x20, 0x1f, 0xe9,
	0x82, 0x8d, 0xd4, 0x07, 0xf9, 0xb3, 0x02, 0xee, 0xd3, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36,
	0xb0, 0x37, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x16, 0x34, 0xf1, 0x84, 0x05, 0x01, 0x00,
	0x00,
}

func (m *SingleBnbPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleBnbPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleBnbPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintBnbPrice(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintBnbPrice(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BnbPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BnbPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BnbPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBnbPrice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBnbPrice(dAtA []byte, offset int, v uint64) int {
	offset -= sovBnbPrice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SingleBnbPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovBnbPrice(uint64(m.Time))
	}
	if m.Price != 0 {
		n += 1 + sovBnbPrice(uint64(m.Price))
	}
	return n
}

func (m *BnbPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovBnbPrice(uint64(l))
		}
	}
	return n
}

func sovBnbPrice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBnbPrice(x uint64) (n int) {
	return sovBnbPrice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SingleBnbPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBnbPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleBnbPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleBnbPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBnbPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBnbPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBnbPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBnbPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BnbPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBnbPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BnbPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BnbPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBnbPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBnbPrice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBnbPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, &SingleBnbPrice{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBnbPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBnbPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBnbPrice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBnbPrice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBnbPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBnbPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBnbPrice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBnbPrice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBnbPrice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBnbPrice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBnbPrice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBnbPrice = fmt.Errorf("proto: unexpected end of group")
)
