// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bfs/payment/auto_settle_queue.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AutoSettleQueue struct {
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Addr      string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *AutoSettleQueue) Reset()         { *m = AutoSettleQueue{} }
func (m *AutoSettleQueue) String() string { return proto.CompactTextString(m) }
func (*AutoSettleQueue) ProtoMessage()    {}
func (*AutoSettleQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_838dd0c0192eb9ce, []int{0}
}
func (m *AutoSettleQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoSettleQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoSettleQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoSettleQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoSettleQueue.Merge(m, src)
}
func (m *AutoSettleQueue) XXX_Size() int {
	return m.Size()
}
func (m *AutoSettleQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoSettleQueue.DiscardUnknown(m)
}

var xxx_messageInfo_AutoSettleQueue proto.InternalMessageInfo

func (m *AutoSettleQueue) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AutoSettleQueue) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*AutoSettleQueue)(nil), "bnbchain.bfs.payment.AutoSettleQueue")
}

func init() {
	proto.RegisterFile("bfs/payment/auto_settle_queue.proto", fileDescriptor_838dd0c0192eb9ce)
}

var fileDescriptor_838dd0c0192eb9ce = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x4a, 0x2b, 0xd6,
	0x2f, 0x48, 0xac, 0xcc, 0x4d, 0xcd, 0x2b, 0xd1, 0x4f, 0x2c, 0x2d, 0xc9, 0x8f, 0x2f, 0x4e, 0x2d,
	0x29, 0xc9, 0x49, 0x8d, 0x2f, 0x2c, 0x4d, 0x2d, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x49, 0xca, 0x4b, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4b, 0x4a, 0x2b, 0xd6, 0x83, 0xaa,
	0x56, 0x72, 0xe6, 0xe2, 0x77, 0x2c, 0x2d, 0xc9, 0x0f, 0x06, 0xab, 0x0f, 0x04, 0x29, 0x17, 0x92,
	0xe1, 0xe2, 0x2c, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0x90, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x0e, 0x42, 0x08, 0x08, 0x09, 0x71, 0xb1, 0x24, 0xa6, 0xa4, 0x14, 0x49, 0x30, 0x29, 0x30,
	0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4e, 0x4e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8,
	0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7,
	0x10, 0xa5, 0x91, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x94, 0x97,
	0xa4, 0x0b, 0x76, 0x80, 0x3e, 0xc8, 0xb9, 0x15, 0x70, 0x07, 0x97, 0x54, 0x16, 0xa4, 0x16, 0x27,
	0xb1, 0x81, 0x5d, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x71, 0x1a, 0x5a, 0x1b, 0xcc, 0x00,
	0x00, 0x00,
}

func (m *AutoSettleQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoSettleQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoSettleQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintAutoSettleQueue(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintAutoSettleQueue(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAutoSettleQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovAutoSettleQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AutoSettleQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovAutoSettleQueue(uint64(m.Timestamp))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovAutoSettleQueue(uint64(l))
	}
	return n
}

func sovAutoSettleQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAutoSettleQueue(x uint64) (n int) {
	return sovAutoSettleQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoSettleQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoSettleQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoSettleQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoSettleQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoSettleQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoSettleQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoSettleQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoSettleQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoSettleQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutoSettleQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAutoSettleQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAutoSettleQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoSettleQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoSettleQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAutoSettleQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAutoSettleQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAutoSettleQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAutoSettleQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAutoSettleQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAutoSettleQueue = fmt.Errorf("proto: unexpected end of group")
)
