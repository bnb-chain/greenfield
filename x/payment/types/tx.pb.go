// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/payment/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreatePaymentAccount struct {
	// creator is the address of the stream account that created the payment account
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgCreatePaymentAccount) Reset()         { *m = MsgCreatePaymentAccount{} }
func (m *MsgCreatePaymentAccount) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePaymentAccount) ProtoMessage()    {}
func (*MsgCreatePaymentAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{0}
}
func (m *MsgCreatePaymentAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePaymentAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePaymentAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePaymentAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePaymentAccount.Merge(m, src)
}
func (m *MsgCreatePaymentAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePaymentAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePaymentAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePaymentAccount proto.InternalMessageInfo

func (m *MsgCreatePaymentAccount) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgCreatePaymentAccountResponse struct {
}

func (m *MsgCreatePaymentAccountResponse) Reset()         { *m = MsgCreatePaymentAccountResponse{} }
func (m *MsgCreatePaymentAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePaymentAccountResponse) ProtoMessage()    {}
func (*MsgCreatePaymentAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{1}
}
func (m *MsgCreatePaymentAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePaymentAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePaymentAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePaymentAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePaymentAccountResponse.Merge(m, src)
}
func (m *MsgCreatePaymentAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePaymentAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePaymentAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePaymentAccountResponse proto.InternalMessageInfo

type MsgDeposit struct {
	// creator is the message signer for MsgDeposit and the address of the account to deposit from
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// to is the address of the account to deposit to
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// amount is the amount to deposit
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *MsgDeposit) Reset()         { *m = MsgDeposit{} }
func (m *MsgDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgDeposit) ProtoMessage()    {}
func (*MsgDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{2}
}
func (m *MsgDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeposit.Merge(m, src)
}
func (m *MsgDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeposit proto.InternalMessageInfo

func (m *MsgDeposit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeposit) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type MsgDepositResponse struct {
}

func (m *MsgDepositResponse) Reset()         { *m = MsgDepositResponse{} }
func (m *MsgDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositResponse) ProtoMessage()    {}
func (*MsgDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{3}
}
func (m *MsgDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositResponse.Merge(m, src)
}
func (m *MsgDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositResponse proto.InternalMessageInfo

type MsgWithdraw struct {
	// creator is the message signer for MsgWithdraw and the address of the receive account
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// from is the address of the account to withdraw from
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// amount is the amount to withdraw
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *MsgWithdraw) Reset()         { *m = MsgWithdraw{} }
func (m *MsgWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgWithdraw) ProtoMessage()    {}
func (*MsgWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{4}
}
func (m *MsgWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdraw.Merge(m, src)
}
func (m *MsgWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdraw proto.InternalMessageInfo

func (m *MsgWithdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdraw) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type MsgWithdrawResponse struct {
}

func (m *MsgWithdrawResponse) Reset()         { *m = MsgWithdrawResponse{} }
func (m *MsgWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawResponse) ProtoMessage()    {}
func (*MsgWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{5}
}
func (m *MsgWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawResponse.Merge(m, src)
}
func (m *MsgWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawResponse proto.InternalMessageInfo

type MsgDisableRefund struct {
	// owner is the message signer for MsgDisableRefund and the address of the payment account owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// addr is the address of the payment account to disable refund
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *MsgDisableRefund) Reset()         { *m = MsgDisableRefund{} }
func (m *MsgDisableRefund) String() string { return proto.CompactTextString(m) }
func (*MsgDisableRefund) ProtoMessage()    {}
func (*MsgDisableRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{6}
}
func (m *MsgDisableRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableRefund.Merge(m, src)
}
func (m *MsgDisableRefund) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableRefund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableRefund proto.InternalMessageInfo

func (m *MsgDisableRefund) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgDisableRefund) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type MsgDisableRefundResponse struct {
}

func (m *MsgDisableRefundResponse) Reset()         { *m = MsgDisableRefundResponse{} }
func (m *MsgDisableRefundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisableRefundResponse) ProtoMessage()    {}
func (*MsgDisableRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{7}
}
func (m *MsgDisableRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableRefundResponse.Merge(m, src)
}
func (m *MsgDisableRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableRefundResponse proto.InternalMessageInfo

type MsgMockCreateBucket struct {
	Operator            string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	BucketName          string `protobuf:"bytes,2,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ReadPaymentAccount  string `protobuf:"bytes,3,opt,name=readPaymentAccount,proto3" json:"readPaymentAccount,omitempty"`
	StorePaymentAccount string `protobuf:"bytes,4,opt,name=storePaymentAccount,proto3" json:"storePaymentAccount,omitempty"`
	SpAddress           string `protobuf:"bytes,5,opt,name=spAddress,proto3" json:"spAddress,omitempty"`
	ReadPacket          string `protobuf:"bytes,6,opt,name=readPacket,proto3" json:"readPacket,omitempty"`
}

func (m *MsgMockCreateBucket) Reset()         { *m = MsgMockCreateBucket{} }
func (m *MsgMockCreateBucket) String() string { return proto.CompactTextString(m) }
func (*MsgMockCreateBucket) ProtoMessage()    {}
func (*MsgMockCreateBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{8}
}
func (m *MsgMockCreateBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockCreateBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockCreateBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockCreateBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockCreateBucket.Merge(m, src)
}
func (m *MsgMockCreateBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockCreateBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockCreateBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockCreateBucket proto.InternalMessageInfo

func (m *MsgMockCreateBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMockCreateBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMockCreateBucket) GetReadPaymentAccount() string {
	if m != nil {
		return m.ReadPaymentAccount
	}
	return ""
}

func (m *MsgMockCreateBucket) GetStorePaymentAccount() string {
	if m != nil {
		return m.StorePaymentAccount
	}
	return ""
}

func (m *MsgMockCreateBucket) GetSpAddress() string {
	if m != nil {
		return m.SpAddress
	}
	return ""
}

func (m *MsgMockCreateBucket) GetReadPacket() string {
	if m != nil {
		return m.ReadPacket
	}
	return ""
}

type MsgMockCreateBucketResponse struct {
}

func (m *MsgMockCreateBucketResponse) Reset()         { *m = MsgMockCreateBucketResponse{} }
func (m *MsgMockCreateBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMockCreateBucketResponse) ProtoMessage()    {}
func (*MsgMockCreateBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{9}
}
func (m *MsgMockCreateBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockCreateBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockCreateBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockCreateBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockCreateBucketResponse.Merge(m, src)
}
func (m *MsgMockCreateBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockCreateBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockCreateBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockCreateBucketResponse proto.InternalMessageInfo

type MsgMockPutObject struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	BucketName string `protobuf:"bytes,2,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ObjectName string `protobuf:"bytes,3,opt,name=objectName,proto3" json:"objectName,omitempty"`
	Size_      uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *MsgMockPutObject) Reset()         { *m = MsgMockPutObject{} }
func (m *MsgMockPutObject) String() string { return proto.CompactTextString(m) }
func (*MsgMockPutObject) ProtoMessage()    {}
func (*MsgMockPutObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{10}
}
func (m *MsgMockPutObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockPutObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockPutObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockPutObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockPutObject.Merge(m, src)
}
func (m *MsgMockPutObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockPutObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockPutObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockPutObject proto.InternalMessageInfo

func (m *MsgMockPutObject) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgMockPutObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMockPutObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *MsgMockPutObject) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type MsgMockPutObjectResponse struct {
}

func (m *MsgMockPutObjectResponse) Reset()         { *m = MsgMockPutObjectResponse{} }
func (m *MsgMockPutObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMockPutObjectResponse) ProtoMessage()    {}
func (*MsgMockPutObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{11}
}
func (m *MsgMockPutObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockPutObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockPutObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockPutObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockPutObjectResponse.Merge(m, src)
}
func (m *MsgMockPutObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockPutObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockPutObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockPutObjectResponse proto.InternalMessageInfo

type MsgMockSealObject struct {
	Operator     string   `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	BucketName   string   `protobuf:"bytes,2,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ObjectName   string   `protobuf:"bytes,3,opt,name=objectName,proto3" json:"objectName,omitempty"`
	SecondarySPs []string `protobuf:"bytes,4,rep,name=secondarySPs,proto3" json:"secondarySPs,omitempty"`
}

func (m *MsgMockSealObject) Reset()         { *m = MsgMockSealObject{} }
func (m *MsgMockSealObject) String() string { return proto.CompactTextString(m) }
func (*MsgMockSealObject) ProtoMessage()    {}
func (*MsgMockSealObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{12}
}
func (m *MsgMockSealObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockSealObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockSealObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockSealObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockSealObject.Merge(m, src)
}
func (m *MsgMockSealObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockSealObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockSealObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockSealObject proto.InternalMessageInfo

func (m *MsgMockSealObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMockSealObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMockSealObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *MsgMockSealObject) GetSecondarySPs() []string {
	if m != nil {
		return m.SecondarySPs
	}
	return nil
}

type MsgMockSealObjectResponse struct {
}

func (m *MsgMockSealObjectResponse) Reset()         { *m = MsgMockSealObjectResponse{} }
func (m *MsgMockSealObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMockSealObjectResponse) ProtoMessage()    {}
func (*MsgMockSealObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{13}
}
func (m *MsgMockSealObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockSealObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockSealObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockSealObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockSealObjectResponse.Merge(m, src)
}
func (m *MsgMockSealObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockSealObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockSealObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockSealObjectResponse proto.InternalMessageInfo

type MsgMockDeleteObject struct {
	Operator   string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	BucketName string `protobuf:"bytes,2,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ObjectName string `protobuf:"bytes,3,opt,name=objectName,proto3" json:"objectName,omitempty"`
}

func (m *MsgMockDeleteObject) Reset()         { *m = MsgMockDeleteObject{} }
func (m *MsgMockDeleteObject) String() string { return proto.CompactTextString(m) }
func (*MsgMockDeleteObject) ProtoMessage()    {}
func (*MsgMockDeleteObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{14}
}
func (m *MsgMockDeleteObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockDeleteObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockDeleteObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockDeleteObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockDeleteObject.Merge(m, src)
}
func (m *MsgMockDeleteObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockDeleteObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockDeleteObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockDeleteObject proto.InternalMessageInfo

func (m *MsgMockDeleteObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMockDeleteObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMockDeleteObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

type MsgMockDeleteObjectResponse struct {
}

func (m *MsgMockDeleteObjectResponse) Reset()         { *m = MsgMockDeleteObjectResponse{} }
func (m *MsgMockDeleteObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMockDeleteObjectResponse) ProtoMessage()    {}
func (*MsgMockDeleteObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{15}
}
func (m *MsgMockDeleteObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockDeleteObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockDeleteObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockDeleteObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockDeleteObjectResponse.Merge(m, src)
}
func (m *MsgMockDeleteObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockDeleteObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockDeleteObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockDeleteObjectResponse proto.InternalMessageInfo

type MsgMockSetBucketPaymentAccount struct {
	Operator            string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	BucketName          string `protobuf:"bytes,2,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ReadPaymentAccount  string `protobuf:"bytes,3,opt,name=readPaymentAccount,proto3" json:"readPaymentAccount,omitempty"`
	StorePaymentAccount string `protobuf:"bytes,4,opt,name=storePaymentAccount,proto3" json:"storePaymentAccount,omitempty"`
}

func (m *MsgMockSetBucketPaymentAccount) Reset()         { *m = MsgMockSetBucketPaymentAccount{} }
func (m *MsgMockSetBucketPaymentAccount) String() string { return proto.CompactTextString(m) }
func (*MsgMockSetBucketPaymentAccount) ProtoMessage()    {}
func (*MsgMockSetBucketPaymentAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{16}
}
func (m *MsgMockSetBucketPaymentAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockSetBucketPaymentAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockSetBucketPaymentAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockSetBucketPaymentAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockSetBucketPaymentAccount.Merge(m, src)
}
func (m *MsgMockSetBucketPaymentAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockSetBucketPaymentAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockSetBucketPaymentAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockSetBucketPaymentAccount proto.InternalMessageInfo

func (m *MsgMockSetBucketPaymentAccount) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMockSetBucketPaymentAccount) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMockSetBucketPaymentAccount) GetReadPaymentAccount() string {
	if m != nil {
		return m.ReadPaymentAccount
	}
	return ""
}

func (m *MsgMockSetBucketPaymentAccount) GetStorePaymentAccount() string {
	if m != nil {
		return m.StorePaymentAccount
	}
	return ""
}

type MsgMockSetBucketPaymentAccountResponse struct {
}

func (m *MsgMockSetBucketPaymentAccountResponse) Reset() {
	*m = MsgMockSetBucketPaymentAccountResponse{}
}
func (m *MsgMockSetBucketPaymentAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMockSetBucketPaymentAccountResponse) ProtoMessage()    {}
func (*MsgMockSetBucketPaymentAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{17}
}
func (m *MsgMockSetBucketPaymentAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockSetBucketPaymentAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockSetBucketPaymentAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockSetBucketPaymentAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockSetBucketPaymentAccountResponse.Merge(m, src)
}
func (m *MsgMockSetBucketPaymentAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockSetBucketPaymentAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockSetBucketPaymentAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockSetBucketPaymentAccountResponse proto.InternalMessageInfo

type MsgMockUpdateBucketReadPacket struct {
	Operator   string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	BucketName string `protobuf:"bytes,2,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ReadPacket string `protobuf:"bytes,3,opt,name=readPacket,proto3" json:"readPacket,omitempty"`
}

func (m *MsgMockUpdateBucketReadPacket) Reset()         { *m = MsgMockUpdateBucketReadPacket{} }
func (m *MsgMockUpdateBucketReadPacket) String() string { return proto.CompactTextString(m) }
func (*MsgMockUpdateBucketReadPacket) ProtoMessage()    {}
func (*MsgMockUpdateBucketReadPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{18}
}
func (m *MsgMockUpdateBucketReadPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockUpdateBucketReadPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockUpdateBucketReadPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockUpdateBucketReadPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockUpdateBucketReadPacket.Merge(m, src)
}
func (m *MsgMockUpdateBucketReadPacket) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockUpdateBucketReadPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockUpdateBucketReadPacket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockUpdateBucketReadPacket proto.InternalMessageInfo

func (m *MsgMockUpdateBucketReadPacket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMockUpdateBucketReadPacket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMockUpdateBucketReadPacket) GetReadPacket() string {
	if m != nil {
		return m.ReadPacket
	}
	return ""
}

type MsgMockUpdateBucketReadPacketResponse struct {
}

func (m *MsgMockUpdateBucketReadPacketResponse) Reset()         { *m = MsgMockUpdateBucketReadPacketResponse{} }
func (m *MsgMockUpdateBucketReadPacketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMockUpdateBucketReadPacketResponse) ProtoMessage()    {}
func (*MsgMockUpdateBucketReadPacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b4041b20abde0a, []int{19}
}
func (m *MsgMockUpdateBucketReadPacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMockUpdateBucketReadPacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMockUpdateBucketReadPacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMockUpdateBucketReadPacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMockUpdateBucketReadPacketResponse.Merge(m, src)
}
func (m *MsgMockUpdateBucketReadPacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMockUpdateBucketReadPacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMockUpdateBucketReadPacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMockUpdateBucketReadPacketResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreatePaymentAccount)(nil), "bnbchain.greenfield.payment.MsgCreatePaymentAccount")
	proto.RegisterType((*MsgCreatePaymentAccountResponse)(nil), "bnbchain.greenfield.payment.MsgCreatePaymentAccountResponse")
	proto.RegisterType((*MsgDeposit)(nil), "bnbchain.greenfield.payment.MsgDeposit")
	proto.RegisterType((*MsgDepositResponse)(nil), "bnbchain.greenfield.payment.MsgDepositResponse")
	proto.RegisterType((*MsgWithdraw)(nil), "bnbchain.greenfield.payment.MsgWithdraw")
	proto.RegisterType((*MsgWithdrawResponse)(nil), "bnbchain.greenfield.payment.MsgWithdrawResponse")
	proto.RegisterType((*MsgDisableRefund)(nil), "bnbchain.greenfield.payment.MsgDisableRefund")
	proto.RegisterType((*MsgDisableRefundResponse)(nil), "bnbchain.greenfield.payment.MsgDisableRefundResponse")
	proto.RegisterType((*MsgMockCreateBucket)(nil), "bnbchain.greenfield.payment.MsgMockCreateBucket")
	proto.RegisterType((*MsgMockCreateBucketResponse)(nil), "bnbchain.greenfield.payment.MsgMockCreateBucketResponse")
	proto.RegisterType((*MsgMockPutObject)(nil), "bnbchain.greenfield.payment.MsgMockPutObject")
	proto.RegisterType((*MsgMockPutObjectResponse)(nil), "bnbchain.greenfield.payment.MsgMockPutObjectResponse")
	proto.RegisterType((*MsgMockSealObject)(nil), "bnbchain.greenfield.payment.MsgMockSealObject")
	proto.RegisterType((*MsgMockSealObjectResponse)(nil), "bnbchain.greenfield.payment.MsgMockSealObjectResponse")
	proto.RegisterType((*MsgMockDeleteObject)(nil), "bnbchain.greenfield.payment.MsgMockDeleteObject")
	proto.RegisterType((*MsgMockDeleteObjectResponse)(nil), "bnbchain.greenfield.payment.MsgMockDeleteObjectResponse")
	proto.RegisterType((*MsgMockSetBucketPaymentAccount)(nil), "bnbchain.greenfield.payment.MsgMockSetBucketPaymentAccount")
	proto.RegisterType((*MsgMockSetBucketPaymentAccountResponse)(nil), "bnbchain.greenfield.payment.MsgMockSetBucketPaymentAccountResponse")
	proto.RegisterType((*MsgMockUpdateBucketReadPacket)(nil), "bnbchain.greenfield.payment.MsgMockUpdateBucketReadPacket")
	proto.RegisterType((*MsgMockUpdateBucketReadPacketResponse)(nil), "bnbchain.greenfield.payment.MsgMockUpdateBucketReadPacketResponse")
}

func init() { proto.RegisterFile("greenfield/payment/tx.proto", fileDescriptor_a2b4041b20abde0a) }

var fileDescriptor_a2b4041b20abde0a = []byte{
	// 909 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0xdc, 0x44,
	0x14, 0x8f, 0xb3, 0xdb, 0xb4, 0x79, 0x14, 0x54, 0xa6, 0x8b, 0xea, 0x7a, 0x89, 0x53, 0x2c, 0xd1,
	0x2e, 0x88, 0xb5, 0x4b, 0xf9, 0x10, 0x0a, 0xbd, 0x74, 0xdb, 0x4b, 0x0e, 0x0b, 0x91, 0x03, 0x42,
	0x82, 0x43, 0xe4, 0x8f, 0x59, 0xc7, 0xec, 0xda, 0x63, 0x3c, 0xb3, 0x34, 0x01, 0xc4, 0x81, 0x13,
	0xe2, 0x84, 0xc4, 0x15, 0x89, 0x7f, 0x81, 0x43, 0xcf, 0x9c, 0x7b, 0x42, 0x55, 0xb9, 0x20, 0x0e,
	0x15, 0x4a, 0x0e, 0x9c, 0xf9, 0x0f, 0x90, 0x3d, 0xf6, 0xac, 0xd7, 0x71, 0xd7, 0xce, 0x46, 0x20,
	0x4e, 0xf6, 0xbc, 0xf7, 0x7b, 0xf3, 0x7e, 0xbf, 0xf7, 0xe6, 0xc3, 0x86, 0xae, 0x17, 0x63, 0x1c,
	0x8e, 0x7c, 0x3c, 0x71, 0x8d, 0xc8, 0x3a, 0x0c, 0x70, 0xc8, 0x0c, 0x76, 0xa0, 0x47, 0x31, 0x61,
	0x04, 0x75, 0xed, 0xd0, 0x76, 0xf6, 0x2d, 0x3f, 0xd4, 0x67, 0x28, 0x3d, 0x43, 0x29, 0x57, 0x1c,
	0x42, 0x03, 0x42, 0x8d, 0x80, 0x7a, 0xc6, 0xe7, 0xaf, 0x27, 0x0f, 0x1e, 0xa5, 0x5c, 0xe5, 0x8e,
	0xbd, 0x74, 0x64, 0xf0, 0x41, 0xe6, 0xea, 0x78, 0xc4, 0x23, 0xdc, 0x9e, 0xbc, 0x65, 0xd6, 0x8d,
	0x0a, 0x0e, 0xb6, 0x45, 0x71, 0xe6, 0x7e, 0xa5, 0xc2, 0x1d, 0x10, 0x67, 0xbc, 0x67, 0x4f, 0x9d,
	0x31, 0x66, 0x7b, 0x01, 0x66, 0x16, 0x87, 0x6a, 0x9f, 0xc0, 0x95, 0x21, 0xf5, 0xee, 0xc6, 0xd8,
	0x62, 0x78, 0x87, 0x43, 0xef, 0x38, 0x0e, 0x99, 0x86, 0x0c, 0xdd, 0x82, 0xf3, 0x4e, 0x62, 0x27,
	0xb1, 0x2c, 0x5d, 0x93, 0x7a, 0xeb, 0x03, 0xf9, 0xf1, 0x83, 0x7e, 0x27, 0x63, 0x77, 0xc7, 0x75,
	0x63, 0x4c, 0xe9, 0x2e, 0x8b, 0xfd, 0xd0, 0x33, 0x73, 0xe0, 0xd6, 0xc5, 0x6f, 0xfe, 0xfa, 0xf9,
	0xd5, 0x7c, 0xa4, 0xbd, 0x04, 0x9b, 0x4f, 0x99, 0xdc, 0xc4, 0x34, 0x22, 0x21, 0xc5, 0xda, 0xaf,
	0x12, 0xc0, 0x90, 0x7a, 0xf7, 0x70, 0x44, 0xa8, 0xbf, 0x54, 0x4e, 0xd4, 0x83, 0x55, 0x46, 0xe4,
	0xd5, 0x1a, 0xf8, 0x2a, 0x23, 0xe8, 0x03, 0x58, 0xb3, 0x82, 0x24, 0xbd, 0xdc, 0x4a, 0xd1, 0xb7,
	0x1f, 0x3e, 0xd9, 0x5c, 0xf9, 0xe3, 0xc9, 0xe6, 0x75, 0xcf, 0x67, 0xfb, 0x53, 0x5b, 0x77, 0x48,
	0x90, 0x55, 0x3f, 0x7b, 0xf4, 0xa9, 0x3b, 0x36, 0xd8, 0x61, 0x84, 0xa9, 0xbe, 0x1d, 0xb2, 0xc7,
	0x0f, 0xfa, 0x90, 0xcd, 0xbd, 0x1d, 0x32, 0x33, 0x9b, 0xab, 0xa4, 0xb9, 0x03, 0x68, 0xa6, 0x47,
	0xc8, 0xfc, 0x4d, 0x82, 0x67, 0x86, 0xd4, 0xfb, 0xc8, 0x67, 0xfb, 0x6e, 0x6c, 0xdd, 0x5f, 0x4a,
	0xe7, 0x6b, 0xd0, 0x1e, 0xc5, 0x24, 0xa8, 0x55, 0x9a, 0xa2, 0xfe, 0x13, 0xad, 0x2f, 0xc0, 0xe5,
	0x82, 0x28, 0x21, 0xf6, 0x2b, 0xb8, 0x94, 0x94, 0xc0, 0xa7, 0x96, 0x3d, 0xc1, 0x26, 0x1e, 0x4d,
	0x43, 0x17, 0xe9, 0x70, 0x8e, 0xdc, 0x0f, 0x71, 0xbd, 0x5c, 0x0e, 0x4b, 0xc4, 0x5a, 0xae, 0x1b,
	0xd7, 0x8b, 0x4d, 0x50, 0x5b, 0x90, 0xd0, 0xe2, 0x91, 0x9a, 0x02, 0x72, 0x39, 0xbb, 0x60, 0xf6,
	0xb7, 0x94, 0x32, 0x1e, 0x12, 0x67, 0xcc, 0x57, 0xe5, 0x20, 0xdd, 0x10, 0x48, 0x81, 0x0b, 0x24,
	0xc2, 0xf1, 0xac, 0x1f, 0xa6, 0x18, 0x23, 0x15, 0x80, 0x6f, 0x9b, 0xf7, 0xac, 0x00, 0x73, 0x3e,
	0x66, 0xc1, 0x82, 0x74, 0x40, 0x31, 0xb6, 0xdc, 0xf9, 0xf5, 0xcd, 0x8b, 0x6e, 0x56, 0x78, 0xd0,
	0x4d, 0xb8, 0x4c, 0x19, 0x89, 0x4b, 0x1b, 0x42, 0x6e, 0xa7, 0x01, 0x55, 0x2e, 0xf4, 0x22, 0xac,
	0xd3, 0x28, 0x93, 0x2d, 0x9f, 0x4b, 0x71, 0x33, 0x43, 0xc2, 0x8f, 0x67, 0x49, 0x18, 0xc9, 0x6b,
	0x9c, 0xdf, 0xcc, 0xa2, 0x6d, 0x40, 0xb7, 0x42, 0x72, 0xa9, 0x59, 0x89, 0x7b, 0x67, 0xca, 0xde,
	0xb7, 0x3f, 0xc5, 0x0e, 0x43, 0x9d, 0xb9, 0x66, 0xe5, 0x2d, 0xa9, 0x2b, 0x84, 0x0a, 0x40, 0xd2,
	0xf8, 0xd4, 0xcf, 0x0b, 0x50, 0xb0, 0x20, 0x04, 0x6d, 0xea, 0x7f, 0x81, 0x53, 0xa5, 0x6d, 0x33,
	0x7d, 0xcf, 0x9a, 0x35, 0x97, 0x5d, 0x30, 0xfb, 0x41, 0x82, 0xe7, 0x33, 0xe7, 0x2e, 0xb6, 0x26,
	0x19, 0xb7, 0xb3, 0xb4, 0xaa, 0x8e, 0xa1, 0x06, 0x17, 0x29, 0x76, 0x48, 0xe8, 0x5a, 0xf1, 0xe1,
	0xee, 0x0e, 0x95, 0xdb, 0xd7, 0x5a, 0xbd, 0x75, 0x73, 0xce, 0xa6, 0x75, 0xe1, 0xea, 0x09, 0x52,
	0x82, 0xf2, 0x67, 0x62, 0x79, 0xdd, 0xc3, 0x13, 0xcc, 0xf0, 0xbf, 0xcf, 0xb9, 0xd0, 0xde, 0x62,
	0x4a, 0xc1, 0xe8, 0x17, 0x09, 0x54, 0xc1, 0x97, 0xf1, 0xde, 0x97, 0x96, 0xd7, 0xff, 0x7a, 0xf1,
	0x6b, 0x3d, 0xb8, 0xbe, 0x98, 0xbf, 0x90, 0xfa, 0x25, 0x6c, 0x64, 0xc8, 0x0f, 0x23, 0xb7, 0xb0,
	0xd0, 0xf3, 0x9d, 0x70, 0xd6, 0x36, 0x14, 0x76, 0x59, 0xeb, 0xc4, 0x2e, 0xbb, 0x01, 0x2f, 0x2f,
	0x4c, 0x9e, 0xb3, 0xbc, 0xf5, 0x2d, 0x40, 0x6b, 0x48, 0x3d, 0xf4, 0x9d, 0x04, 0x9d, 0xca, 0x6b,
	0xf7, 0x4d, 0x7d, 0xc1, 0x37, 0x84, 0xfe, 0x94, 0xfb, 0x54, 0xb9, 0xbd, 0x4c, 0x54, 0x4e, 0x0a,
	0x39, 0x70, 0x3e, 0xbf, 0x81, 0x6f, 0xd4, 0x4d, 0x94, 0x01, 0x15, 0xa3, 0x21, 0x50, 0x24, 0x19,
	0xc1, 0x05, 0x71, 0xff, 0xf5, 0xea, 0x82, 0x73, 0xa4, 0x72, 0xb3, 0x29, 0x52, 0xe4, 0x99, 0xc2,
	0xb3, 0xf3, 0x77, 0x4f, 0xbf, 0x96, 0x69, 0x11, 0xae, 0xbc, 0x75, 0x2a, 0xb8, 0x48, 0xfb, 0x35,
	0x5c, 0x3a, 0x71, 0xaf, 0xd4, 0x92, 0x2f, 0x47, 0x28, 0xef, 0x9c, 0x36, 0xa2, 0x28, 0x7b, 0xfe,
	0x14, 0xef, 0x37, 0x99, 0x4a, 0xc0, 0xeb, 0x65, 0x57, 0x9e, 0xd2, 0xe8, 0x00, 0x9e, 0x2b, 0x9d,
	0xd0, 0x7a, 0x93, 0x89, 0x66, 0x78, 0xe5, 0xed, 0xd3, 0xe1, 0xcb, 0x05, 0x9f, 0x3b, 0x69, 0x1b,
	0x15, 0xbc, 0x18, 0xd1, 0xac, 0xe0, 0x55, 0x47, 0x2b, 0xfa, 0x49, 0x82, 0xee, 0xa2, 0x73, 0xf5,
	0xdd, 0x66, 0xba, 0x2a, 0x83, 0x95, 0xbb, 0x67, 0x08, 0x16, 0x0c, 0x7f, 0x94, 0x40, 0x59, 0x70,
	0x1e, 0x6e, 0x35, 0xc9, 0x51, 0x1d, 0xab, 0x0c, 0x96, 0x8f, 0xcd, 0xe9, 0x0d, 0xb6, 0x1f, 0x1e,
	0xa9, 0xd2, 0xa3, 0x23, 0x55, 0xfa, 0xf3, 0x48, 0x95, 0xbe, 0x3f, 0x56, 0x57, 0x1e, 0x1d, 0xab,
	0x2b, 0xbf, 0x1f, 0xab, 0x2b, 0x1f, 0x1b, 0x85, 0x8f, 0x54, 0x3b, 0xb4, 0xfb, 0x69, 0x22, 0xa3,
	0xf0, 0x57, 0x73, 0x30, 0xfb, 0xf5, 0x4a, 0xbe, 0x58, 0xed, 0xb5, 0xf4, 0x6f, 0xe6, 0x8d, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x03, 0x89, 0xc2, 0xcd, 0x9d, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreatePaymentAccount(ctx context.Context, in *MsgCreatePaymentAccount, opts ...grpc.CallOption) (*MsgCreatePaymentAccountResponse, error)
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	DisableRefund(ctx context.Context, in *MsgDisableRefund, opts ...grpc.CallOption) (*MsgDisableRefundResponse, error)
	MockCreateBucket(ctx context.Context, in *MsgMockCreateBucket, opts ...grpc.CallOption) (*MsgMockCreateBucketResponse, error)
	MockPutObject(ctx context.Context, in *MsgMockPutObject, opts ...grpc.CallOption) (*MsgMockPutObjectResponse, error)
	MockSealObject(ctx context.Context, in *MsgMockSealObject, opts ...grpc.CallOption) (*MsgMockSealObjectResponse, error)
	MockDeleteObject(ctx context.Context, in *MsgMockDeleteObject, opts ...grpc.CallOption) (*MsgMockDeleteObjectResponse, error)
	MockSetBucketPaymentAccount(ctx context.Context, in *MsgMockSetBucketPaymentAccount, opts ...grpc.CallOption) (*MsgMockSetBucketPaymentAccountResponse, error)
	MockUpdateBucketReadPacket(ctx context.Context, in *MsgMockUpdateBucketReadPacket, opts ...grpc.CallOption) (*MsgMockUpdateBucketReadPacketResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreatePaymentAccount(ctx context.Context, in *MsgCreatePaymentAccount, opts ...grpc.CallOption) (*MsgCreatePaymentAccountResponse, error) {
	out := new(MsgCreatePaymentAccountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/CreatePaymentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableRefund(ctx context.Context, in *MsgDisableRefund, opts ...grpc.CallOption) (*MsgDisableRefundResponse, error) {
	out := new(MsgDisableRefundResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/DisableRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MockCreateBucket(ctx context.Context, in *MsgMockCreateBucket, opts ...grpc.CallOption) (*MsgMockCreateBucketResponse, error) {
	out := new(MsgMockCreateBucketResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/MockCreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MockPutObject(ctx context.Context, in *MsgMockPutObject, opts ...grpc.CallOption) (*MsgMockPutObjectResponse, error) {
	out := new(MsgMockPutObjectResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/MockPutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MockSealObject(ctx context.Context, in *MsgMockSealObject, opts ...grpc.CallOption) (*MsgMockSealObjectResponse, error) {
	out := new(MsgMockSealObjectResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/MockSealObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MockDeleteObject(ctx context.Context, in *MsgMockDeleteObject, opts ...grpc.CallOption) (*MsgMockDeleteObjectResponse, error) {
	out := new(MsgMockDeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/MockDeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MockSetBucketPaymentAccount(ctx context.Context, in *MsgMockSetBucketPaymentAccount, opts ...grpc.CallOption) (*MsgMockSetBucketPaymentAccountResponse, error) {
	out := new(MsgMockSetBucketPaymentAccountResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/MockSetBucketPaymentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MockUpdateBucketReadPacket(ctx context.Context, in *MsgMockUpdateBucketReadPacket, opts ...grpc.CallOption) (*MsgMockUpdateBucketReadPacketResponse, error) {
	out := new(MsgMockUpdateBucketReadPacketResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.payment.Msg/MockUpdateBucketReadPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreatePaymentAccount(context.Context, *MsgCreatePaymentAccount) (*MsgCreatePaymentAccountResponse, error)
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	DisableRefund(context.Context, *MsgDisableRefund) (*MsgDisableRefundResponse, error)
	MockCreateBucket(context.Context, *MsgMockCreateBucket) (*MsgMockCreateBucketResponse, error)
	MockPutObject(context.Context, *MsgMockPutObject) (*MsgMockPutObjectResponse, error)
	MockSealObject(context.Context, *MsgMockSealObject) (*MsgMockSealObjectResponse, error)
	MockDeleteObject(context.Context, *MsgMockDeleteObject) (*MsgMockDeleteObjectResponse, error)
	MockSetBucketPaymentAccount(context.Context, *MsgMockSetBucketPaymentAccount) (*MsgMockSetBucketPaymentAccountResponse, error)
	MockUpdateBucketReadPacket(context.Context, *MsgMockUpdateBucketReadPacket) (*MsgMockUpdateBucketReadPacketResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreatePaymentAccount(ctx context.Context, req *MsgCreatePaymentAccount) (*MsgCreatePaymentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentAccount not implemented")
}
func (*UnimplementedMsgServer) Deposit(ctx context.Context, req *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedMsgServer) Withdraw(ctx context.Context, req *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedMsgServer) DisableRefund(ctx context.Context, req *MsgDisableRefund) (*MsgDisableRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRefund not implemented")
}
func (*UnimplementedMsgServer) MockCreateBucket(ctx context.Context, req *MsgMockCreateBucket) (*MsgMockCreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockCreateBucket not implemented")
}
func (*UnimplementedMsgServer) MockPutObject(ctx context.Context, req *MsgMockPutObject) (*MsgMockPutObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockPutObject not implemented")
}
func (*UnimplementedMsgServer) MockSealObject(ctx context.Context, req *MsgMockSealObject) (*MsgMockSealObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockSealObject not implemented")
}
func (*UnimplementedMsgServer) MockDeleteObject(ctx context.Context, req *MsgMockDeleteObject) (*MsgMockDeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockDeleteObject not implemented")
}
func (*UnimplementedMsgServer) MockSetBucketPaymentAccount(ctx context.Context, req *MsgMockSetBucketPaymentAccount) (*MsgMockSetBucketPaymentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockSetBucketPaymentAccount not implemented")
}
func (*UnimplementedMsgServer) MockUpdateBucketReadPacket(ctx context.Context, req *MsgMockUpdateBucketReadPacket) (*MsgMockUpdateBucketReadPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockUpdateBucketReadPacket not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreatePaymentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePaymentAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePaymentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/CreatePaymentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePaymentAccount(ctx, req.(*MsgCreatePaymentAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableRefund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/DisableRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableRefund(ctx, req.(*MsgDisableRefund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MockCreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMockCreateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MockCreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/MockCreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MockCreateBucket(ctx, req.(*MsgMockCreateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MockPutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMockPutObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MockPutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/MockPutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MockPutObject(ctx, req.(*MsgMockPutObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MockSealObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMockSealObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MockSealObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/MockSealObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MockSealObject(ctx, req.(*MsgMockSealObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MockDeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMockDeleteObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MockDeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/MockDeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MockDeleteObject(ctx, req.(*MsgMockDeleteObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MockSetBucketPaymentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMockSetBucketPaymentAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MockSetBucketPaymentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/MockSetBucketPaymentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MockSetBucketPaymentAccount(ctx, req.(*MsgMockSetBucketPaymentAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MockUpdateBucketReadPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMockUpdateBucketReadPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MockUpdateBucketReadPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.payment.Msg/MockUpdateBucketReadPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MockUpdateBucketReadPacket(ctx, req.(*MsgMockUpdateBucketReadPacket))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bnbchain.greenfield.payment.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaymentAccount",
			Handler:    _Msg_CreatePaymentAccount_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "DisableRefund",
			Handler:    _Msg_DisableRefund_Handler,
		},
		{
			MethodName: "MockCreateBucket",
			Handler:    _Msg_MockCreateBucket_Handler,
		},
		{
			MethodName: "MockPutObject",
			Handler:    _Msg_MockPutObject_Handler,
		},
		{
			MethodName: "MockSealObject",
			Handler:    _Msg_MockSealObject_Handler,
		},
		{
			MethodName: "MockDeleteObject",
			Handler:    _Msg_MockDeleteObject_Handler,
		},
		{
			MethodName: "MockSetBucketPaymentAccount",
			Handler:    _Msg_MockSetBucketPaymentAccount_Handler,
		},
		{
			MethodName: "MockUpdateBucketReadPacket",
			Handler:    _Msg_MockUpdateBucketReadPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greenfield/payment/tx.proto",
}

func (m *MsgCreatePaymentAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePaymentAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePaymentAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePaymentAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePaymentAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePaymentAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisableRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDisableRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMockCreateBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockCreateBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockCreateBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReadPacket) > 0 {
		i -= len(m.ReadPacket)
		copy(dAtA[i:], m.ReadPacket)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReadPacket)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SpAddress) > 0 {
		i -= len(m.SpAddress)
		copy(dAtA[i:], m.SpAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SpAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StorePaymentAccount) > 0 {
		i -= len(m.StorePaymentAccount)
		copy(dAtA[i:], m.StorePaymentAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StorePaymentAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReadPaymentAccount) > 0 {
		i -= len(m.ReadPaymentAccount)
		copy(dAtA[i:], m.ReadPaymentAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReadPaymentAccount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMockCreateBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockCreateBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockCreateBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMockPutObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockPutObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockPutObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMockPutObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockPutObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockPutObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMockSealObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockSealObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockSealObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecondarySPs) > 0 {
		for iNdEx := len(m.SecondarySPs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecondarySPs[iNdEx])
			copy(dAtA[i:], m.SecondarySPs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.SecondarySPs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMockSealObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockSealObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockSealObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMockDeleteObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockDeleteObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockDeleteObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMockDeleteObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockDeleteObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockDeleteObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMockSetBucketPaymentAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockSetBucketPaymentAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockSetBucketPaymentAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorePaymentAccount) > 0 {
		i -= len(m.StorePaymentAccount)
		copy(dAtA[i:], m.StorePaymentAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StorePaymentAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReadPaymentAccount) > 0 {
		i -= len(m.ReadPaymentAccount)
		copy(dAtA[i:], m.ReadPaymentAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReadPaymentAccount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMockSetBucketPaymentAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockSetBucketPaymentAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockSetBucketPaymentAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMockUpdateBucketReadPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockUpdateBucketReadPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockUpdateBucketReadPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReadPacket) > 0 {
		i -= len(m.ReadPacket)
		copy(dAtA[i:], m.ReadPacket)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReadPacket)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMockUpdateBucketReadPacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMockUpdateBucketReadPacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMockUpdateBucketReadPacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreatePaymentAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreatePaymentAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisableRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDisableRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMockCreateBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReadPaymentAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StorePaymentAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SpAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReadPacket)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMockCreateBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMockPutObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovTx(uint64(m.Size_))
	}
	return n
}

func (m *MsgMockPutObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMockSealObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SecondarySPs) > 0 {
		for _, s := range m.SecondarySPs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMockSealObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMockDeleteObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMockDeleteObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMockSetBucketPaymentAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReadPaymentAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StorePaymentAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMockSetBucketPaymentAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMockUpdateBucketReadPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReadPacket)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMockUpdateBucketReadPacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreatePaymentAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePaymentAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePaymentAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePaymentAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePaymentAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePaymentAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockCreateBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockCreateBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockCreateBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPaymentAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadPaymentAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorePaymentAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorePaymentAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPacket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadPacket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockCreateBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockCreateBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockCreateBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockPutObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockPutObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockPutObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockPutObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockPutObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockPutObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockSealObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockSealObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockSealObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondarySPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondarySPs = append(m.SecondarySPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockSealObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockSealObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockSealObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockDeleteObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockDeleteObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockDeleteObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockDeleteObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockDeleteObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockDeleteObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockSetBucketPaymentAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockSetBucketPaymentAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockSetBucketPaymentAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPaymentAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadPaymentAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorePaymentAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorePaymentAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockSetBucketPaymentAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockSetBucketPaymentAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockSetBucketPaymentAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockUpdateBucketReadPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockUpdateBucketReadPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockUpdateBucketReadPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPacket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadPacket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMockUpdateBucketReadPacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMockUpdateBucketReadPacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMockUpdateBucketReadPacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
