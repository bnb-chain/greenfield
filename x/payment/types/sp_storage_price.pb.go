// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/payment/sp_storage_price.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// storage price of a specific sp
type SpStoragePrice struct {
	// sp address
	SpAddress string `protobuf:"bytes,1,opt,name=sp_address,json=spAddress,proto3" json:"sp_address,omitempty"`
	// update time, in unix timestamp
	UpdateTime int64 `protobuf:"varint,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// read quota price, in 10 ^ -8 bnb per byte
	ReadQuotaPrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=read_quota_price,json=readQuotaPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"read_quota_price"`
	// store price, in 10 ^ -8 bnb per charge byte
	StorePrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=store_price,json=storePrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"store_price"`
}

func (m *SpStoragePrice) Reset()         { *m = SpStoragePrice{} }
func (m *SpStoragePrice) String() string { return proto.CompactTextString(m) }
func (*SpStoragePrice) ProtoMessage()    {}
func (*SpStoragePrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_3657d0fbf93cd5a6, []int{0}
}
func (m *SpStoragePrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpStoragePrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpStoragePrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpStoragePrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpStoragePrice.Merge(m, src)
}
func (m *SpStoragePrice) XXX_Size() int {
	return m.Size()
}
func (m *SpStoragePrice) XXX_DiscardUnknown() {
	xxx_messageInfo_SpStoragePrice.DiscardUnknown(m)
}

var xxx_messageInfo_SpStoragePrice proto.InternalMessageInfo

func (m *SpStoragePrice) GetSpAddress() string {
	if m != nil {
		return m.SpAddress
	}
	return ""
}

func (m *SpStoragePrice) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*SpStoragePrice)(nil), "bnbchain.greenfield.payment.SpStoragePrice")
}

func init() {
	proto.RegisterFile("greenfield/payment/sp_storage_price.proto", fileDescriptor_3657d0fbf93cd5a6)
}

var fileDescriptor_3657d0fbf93cd5a6 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x93, 0x16, 0x21, 0xd5, 0x95, 0x2a, 0x14, 0x75, 0x08, 0x45, 0x4a, 0x2b, 0x06, 0x54,
	0x86, 0x24, 0x03, 0x03, 0x0b, 0x0b, 0xdd, 0xba, 0x41, 0xcb, 0x84, 0x84, 0x22, 0x27, 0x79, 0x4d,
	0x2d, 0x88, 0x6d, 0x6c, 0x57, 0xa2, 0xb7, 0xe0, 0x2a, 0x48, 0x3d, 0x44, 0xc7, 0xaa, 0x13, 0x62,
	0xa8, 0x50, 0x73, 0x11, 0x14, 0xdb, 0x82, 0x1e, 0x80, 0x29, 0xf1, 0x6f, 0xbf, 0xef, 0x7f, 0xef,
	0xfd, 0xe8, 0xb2, 0x10, 0x00, 0x74, 0x46, 0xe0, 0x25, 0x8f, 0x39, 0x5e, 0x96, 0x40, 0x55, 0x2c,
	0x79, 0x22, 0x15, 0x13, 0xb8, 0x80, 0x84, 0x0b, 0x92, 0x41, 0xc4, 0x05, 0x53, 0xcc, 0x3b, 0x4b,
	0x69, 0x9a, 0xcd, 0x31, 0xa1, 0xd1, 0x5f, 0x4d, 0x64, 0x6b, 0x7a, 0xa7, 0x19, 0x93, 0x25, 0x93,
	0x89, 0x7e, 0x1a, 0x9b, 0x83, 0xa9, 0xeb, 0x75, 0x0b, 0x56, 0x30, 0xa3, 0xd7, 0x7f, 0x46, 0x3d,
	0xff, 0x68, 0xa0, 0xce, 0x94, 0x4f, 0x8d, 0xcf, 0x5d, 0x6d, 0xe3, 0x5d, 0x23, 0x24, 0x79, 0x82,
	0xf3, 0x5c, 0x80, 0x94, 0xbe, 0x3b, 0x70, 0x87, 0xad, 0x91, 0xbf, 0x5d, 0x85, 0x5d, 0x8b, 0xbb,
	0x35, 0x37, 0x53, 0x25, 0x08, 0x2d, 0x26, 0x2d, 0xc9, 0xad, 0xe0, 0xf5, 0x51, 0x7b, 0xc1, 0x73,
	0xac, 0x20, 0x51, 0xa4, 0x04, 0xbf, 0x31, 0x70, 0x87, 0xcd, 0x09, 0x32, 0xd2, 0x03, 0x29, 0xc1,
	0x9b, 0xa1, 0x13, 0x01, 0x38, 0x4f, 0x5e, 0x17, 0x4c, 0x61, 0x33, 0x94, 0xdf, 0xd4, 0xfc, 0x9b,
	0xf5, 0xae, 0xef, 0x7c, 0xed, 0xfa, 0x17, 0x05, 0x51, 0xf3, 0x45, 0x1a, 0x65, 0xac, 0xb4, 0xdd,
	0xdb, 0x4f, 0x28, 0xf3, 0xe7, 0x58, 0x2d, 0x39, 0xc8, 0x68, 0x4c, 0xd5, 0x76, 0x15, 0x22, 0xdb,
	0xcd, 0x98, 0xaa, 0x49, 0xa7, 0xa6, 0xde, 0xd7, 0x50, 0x33, 0xc1, 0x13, 0x6a, 0xd7, 0x9b, 0xb3,
	0x7b, 0xf3, 0x8f, 0xfe, 0xc1, 0x02, 0x69, 0xa0, 0xc6, 0x8f, 0xc6, 0xeb, 0x7d, 0xe0, 0x6e, 0xf6,
	0x81, 0xfb, 0xbd, 0x0f, 0xdc, 0xf7, 0x2a, 0x70, 0x36, 0x55, 0xe0, 0x7c, 0x56, 0x81, 0xf3, 0x18,
	0x1f, 0xb0, 0x53, 0x9a, 0x86, 0x3a, 0xa7, 0xf8, 0x20, 0xdb, 0xb7, 0xdf, 0x74, 0xb5, 0x51, 0x7a,
	0xac, 0x53, 0xb8, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xb9, 0x00, 0xbc, 0x00, 0x02, 0x00,
	0x00,
}

func (m *SpStoragePrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpStoragePrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpStoragePrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.StorePrice.Size()
		i -= size
		if _, err := m.StorePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSpStoragePrice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ReadQuotaPrice.Size()
		i -= size
		if _, err := m.ReadQuotaPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSpStoragePrice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.UpdateTime != 0 {
		i = encodeVarintSpStoragePrice(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SpAddress) > 0 {
		i -= len(m.SpAddress)
		copy(dAtA[i:], m.SpAddress)
		i = encodeVarintSpStoragePrice(dAtA, i, uint64(len(m.SpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpStoragePrice(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpStoragePrice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpStoragePrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpAddress)
	if l > 0 {
		n += 1 + l + sovSpStoragePrice(uint64(l))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovSpStoragePrice(uint64(m.UpdateTime))
	}
	l = m.ReadQuotaPrice.Size()
	n += 1 + l + sovSpStoragePrice(uint64(l))
	l = m.StorePrice.Size()
	n += 1 + l + sovSpStoragePrice(uint64(l))
	return n
}

func sovSpStoragePrice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpStoragePrice(x uint64) (n int) {
	return sovSpStoragePrice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpStoragePrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpStoragePrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpStoragePrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpStoragePrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpStoragePrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpStoragePrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpStoragePrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpStoragePrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadQuotaPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpStoragePrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpStoragePrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpStoragePrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReadQuotaPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpStoragePrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpStoragePrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpStoragePrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StorePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpStoragePrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpStoragePrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpStoragePrice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpStoragePrice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpStoragePrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpStoragePrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpStoragePrice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpStoragePrice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpStoragePrice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpStoragePrice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpStoragePrice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpStoragePrice = fmt.Errorf("proto: unexpected end of group")
)
