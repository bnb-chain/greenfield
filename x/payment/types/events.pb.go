// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bfs/payment/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCreatePaymentAccount struct {
	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *EventCreatePaymentAccount) Reset()         { *m = EventCreatePaymentAccount{} }
func (m *EventCreatePaymentAccount) String() string { return proto.CompactTextString(m) }
func (*EventCreatePaymentAccount) ProtoMessage()    {}
func (*EventCreatePaymentAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_855771216aaea45c, []int{0}
}
func (m *EventCreatePaymentAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreatePaymentAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreatePaymentAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreatePaymentAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreatePaymentAccount.Merge(m, src)
}
func (m *EventCreatePaymentAccount) XXX_Size() int {
	return m.Size()
}
func (m *EventCreatePaymentAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreatePaymentAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreatePaymentAccount proto.InternalMessageInfo

func (m *EventCreatePaymentAccount) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *EventCreatePaymentAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventCreatePaymentAccount) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type EventForceSettle struct {
	Addr           string                                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	SettledBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=settledBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"settledBalance"`
}

func (m *EventForceSettle) Reset()         { *m = EventForceSettle{} }
func (m *EventForceSettle) String() string { return proto.CompactTextString(m) }
func (*EventForceSettle) ProtoMessage()    {}
func (*EventForceSettle) Descriptor() ([]byte, []int) {
	return fileDescriptor_855771216aaea45c, []int{1}
}
func (m *EventForceSettle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventForceSettle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventForceSettle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventForceSettle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventForceSettle.Merge(m, src)
}
func (m *EventForceSettle) XXX_Size() int {
	return m.Size()
}
func (m *EventForceSettle) XXX_DiscardUnknown() {
	xxx_messageInfo_EventForceSettle.DiscardUnknown(m)
}

var xxx_messageInfo_EventForceSettle proto.InternalMessageInfo

func (m *EventForceSettle) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreatePaymentAccount)(nil), "bnbchain.bfs.payment.EventCreatePaymentAccount")
	proto.RegisterType((*EventForceSettle)(nil), "bnbchain.bfs.payment.EventForceSettle")
}

func init() { proto.RegisterFile("bfs/payment/events.proto", fileDescriptor_855771216aaea45c) }

var fileDescriptor_855771216aaea45c = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0x28, 0x48, 0x78, 0x40, 0x28, 0xea, 0x90, 0x76, 0x70, 0xab, 0x0e, 0xa8, 0x4b,
	0x93, 0x81, 0x95, 0x85, 0x20, 0x90, 0xba, 0xa1, 0xb0, 0xc1, 0x80, 0xfc, 0x73, 0x9b, 0x46, 0x34,
	0x76, 0x14, 0xbb, 0xd0, 0xbe, 0x03, 0x03, 0x0f, 0xc3, 0x43, 0x74, 0xac, 0x98, 0x10, 0x43, 0x85,
	0x92, 0x17, 0x41, 0xb1, 0x23, 0x84, 0x10, 0x93, 0xef, 0x39, 0xbe, 0xfe, 0xac, 0x73, 0x70, 0xc0,
	0x66, 0x3a, 0x2a, 0xe8, 0x3a, 0x07, 0x69, 0x22, 0x78, 0x02, 0x69, 0x74, 0x58, 0x94, 0xca, 0x28,
	0xbf, 0xcb, 0x24, 0xe3, 0x73, 0x9a, 0xc9, 0x90, 0xcd, 0x74, 0xd8, 0xae, 0xf4, 0x7b, 0x5c, 0xe9,
	0x5c, 0xe9, 0x07, 0xbb, 0x13, 0x39, 0xe1, 0x1e, 0xf4, 0xbb, 0xa9, 0x4a, 0x95, 0xf3, 0x9b, 0xc9,
	0xb9, 0xa3, 0x7b, 0xdc, 0xbb, 0x6a, 0xb0, 0x97, 0x25, 0x50, 0x03, 0x37, 0x0e, 0x73, 0xc1, 0xb9,
	0x5a, 0x4a, 0xe3, 0xfb, 0xb8, 0x43, 0x85, 0x28, 0x03, 0x34, 0x44, 0xe3, 0xa3, 0xc4, 0xce, 0x7e,
	0x17, 0x1f, 0xa8, 0x67, 0x09, 0x65, 0xb0, 0x67, 0x4d, 0x27, 0x1a, 0x37, 0x93, 0x02, 0x56, 0xc1,
	0xfe, 0x10, 0x8d, 0x3b, 0x89, 0x13, 0xa3, 0x17, 0x84, 0x4f, 0x2c, 0xfd, 0x5a, 0x95, 0x1c, 0x6e,
	0xc1, 0x98, 0x05, 0xfc, 0x0b, 0x15, 0xf8, 0x58, 0xdb, 0x5b, 0x11, 0xd3, 0x05, 0x95, 0x1c, 0x1c,
	0x3d, 0x3e, 0xdf, 0xec, 0x06, 0xde, 0xe7, 0x6e, 0x70, 0x9a, 0x66, 0x66, 0xbe, 0x64, 0x21, 0x57,
	0x79, 0x1b, 0xaa, 0x3d, 0x26, 0x5a, 0x3c, 0x46, 0x66, 0x5d, 0x80, 0x0e, 0xa7, 0xd2, 0xbc, 0xbf,
	0x4d, 0x70, 0x9b, 0x79, 0x2a, 0x4d, 0xf2, 0x87, 0x19, 0xc7, 0x9b, 0x8a, 0xa0, 0x6d, 0x45, 0xd0,
	0x57, 0x45, 0xd0, 0x6b, 0x4d, 0xbc, 0x6d, 0x4d, 0xbc, 0x8f, 0x9a, 0x78, 0x77, 0xe3, 0x5f, 0x7c,
	0x26, 0xd9, 0xc4, 0x16, 0x1b, 0x35, 0xdd, 0xaf, 0x7e, 0xda, 0xb7, 0xbf, 0xb0, 0x43, 0x5b, 0xdb,
	0xd9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x89, 0xc6, 0xb7, 0x99, 0x01, 0x00, 0x00,
}

func (m *EventCreatePaymentAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreatePaymentAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreatePaymentAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventForceSettle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventForceSettle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventForceSettle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SettledBalance.Size()
		i -= size
		if _, err := m.SettledBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreatePaymentAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovEvents(uint64(m.Index))
	}
	return n
}

func (m *EventForceSettle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.SettledBalance.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreatePaymentAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreatePaymentAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreatePaymentAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventForceSettle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventForceSettle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventForceSettle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettledBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
