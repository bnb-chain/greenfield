// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/payment/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeePreviewType int32

const (
	FEE_PREVIEW_TYPE_PRELOCKED_FEE FeePreviewType = 0
	FEE_PREVIEW_TYPE_UNLOCKED_FEE  FeePreviewType = 1
)

var FeePreviewType_name = map[int32]string{
	0: "FEE_PREVIEW_TYPE_PRELOCKED_FEE",
	1: "FEE_PREVIEW_TYPE_UNLOCKED_FEE",
}

var FeePreviewType_value = map[string]int32{
	"FEE_PREVIEW_TYPE_PRELOCKED_FEE": 0,
	"FEE_PREVIEW_TYPE_UNLOCKED_FEE":  1,
}

func (x FeePreviewType) String() string {
	return proto.EnumName(FeePreviewType_name, int32(x))
}

func (FeePreviewType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_befcc80e27bc8df9, []int{0}
}

type EventPaymentAccountUpdate struct {
	// address of the payment account
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// owner address of the payment account
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// whether the payment account is refundable
	Refundable bool `protobuf:"varint,3,opt,name=refundable,proto3" json:"refundable,omitempty"`
}

func (m *EventPaymentAccountUpdate) Reset()         { *m = EventPaymentAccountUpdate{} }
func (m *EventPaymentAccountUpdate) String() string { return proto.CompactTextString(m) }
func (*EventPaymentAccountUpdate) ProtoMessage()    {}
func (*EventPaymentAccountUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_befcc80e27bc8df9, []int{0}
}
func (m *EventPaymentAccountUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPaymentAccountUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPaymentAccountUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPaymentAccountUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPaymentAccountUpdate.Merge(m, src)
}
func (m *EventPaymentAccountUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventPaymentAccountUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPaymentAccountUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventPaymentAccountUpdate proto.InternalMessageInfo

func (m *EventPaymentAccountUpdate) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *EventPaymentAccountUpdate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventPaymentAccountUpdate) GetRefundable() bool {
	if m != nil {
		return m.Refundable
	}
	return false
}

// Stream Payment Record of a stream account
type EventStreamRecordUpdate struct {
	// account address
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// latest update timestamp of the stream record
	CrudTimestamp int64 `protobuf:"varint,2,opt,name=crud_timestamp,json=crudTimestamp,proto3" json:"crud_timestamp,omitempty"`
	// The per-second rate that an account's balance is changing.
	// It is the sum of the account's inbound and outbound flow rates.
	NetflowRate github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=netflow_rate,json=netflowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"netflow_rate"`
	// The balance of the stream account at the latest CRUD timestamp.
	StaticBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=static_balance,json=staticBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"static_balance"`
	// reserved balance of the stream account
	// If the netflow rate is negative, the reserved balance is `netflow_rate * reserve_time`
	BufferBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=buffer_balance,json=bufferBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"buffer_balance"`
	// the locked balance of the stream account after it puts a new object and before the object is sealed
	LockBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=lock_balance,json=lockBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lock_balance"`
	// the status of the stream account
	Status StreamAccountStatus `protobuf:"varint,7,opt,name=status,proto3,enum=greenfield.payment.StreamAccountStatus" json:"status,omitempty"`
	// the unix timestamp when the stream account will be settled
	SettleTimestamp int64 `protobuf:"varint,8,opt,name=settle_timestamp,json=settleTimestamp,proto3" json:"settle_timestamp,omitempty"`
	// the accumulated outflow rates of the stream account
	OutFlows []OutFlow `protobuf:"bytes,9,rep,name=out_flows,json=outFlows,proto3" json:"out_flows"`
}

func (m *EventStreamRecordUpdate) Reset()         { *m = EventStreamRecordUpdate{} }
func (m *EventStreamRecordUpdate) String() string { return proto.CompactTextString(m) }
func (*EventStreamRecordUpdate) ProtoMessage()    {}
func (*EventStreamRecordUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_befcc80e27bc8df9, []int{1}
}
func (m *EventStreamRecordUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStreamRecordUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStreamRecordUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStreamRecordUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStreamRecordUpdate.Merge(m, src)
}
func (m *EventStreamRecordUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventStreamRecordUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStreamRecordUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventStreamRecordUpdate proto.InternalMessageInfo

func (m *EventStreamRecordUpdate) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EventStreamRecordUpdate) GetCrudTimestamp() int64 {
	if m != nil {
		return m.CrudTimestamp
	}
	return 0
}

func (m *EventStreamRecordUpdate) GetStatus() StreamAccountStatus {
	if m != nil {
		return m.Status
	}
	return STREAM_ACCOUNT_STATUS_ACTIVE
}

func (m *EventStreamRecordUpdate) GetSettleTimestamp() int64 {
	if m != nil {
		return m.SettleTimestamp
	}
	return 0
}

func (m *EventStreamRecordUpdate) GetOutFlows() []OutFlow {
	if m != nil {
		return m.OutFlows
	}
	return nil
}

// EventForceSettle may be emitted on all Msgs and EndBlocker when a payment account's
// balance or net outflow rate is changed
type EventForceSettle struct {
	// address of the payment account
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// left balance of the payment account after force settlement
	// if the balance is positive, it will go to the governance stream account
	// if the balance is negative, it's the debt of the system, which will be paid by the governance stream account
	SettledBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=settled_balance,json=settledBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"settled_balance"`
}

func (m *EventForceSettle) Reset()         { *m = EventForceSettle{} }
func (m *EventForceSettle) String() string { return proto.CompactTextString(m) }
func (*EventForceSettle) ProtoMessage()    {}
func (*EventForceSettle) Descriptor() ([]byte, []int) {
	return fileDescriptor_befcc80e27bc8df9, []int{2}
}
func (m *EventForceSettle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventForceSettle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventForceSettle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventForceSettle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventForceSettle.Merge(m, src)
}
func (m *EventForceSettle) XXX_Size() int {
	return m.Size()
}
func (m *EventForceSettle) XXX_DiscardUnknown() {
	xxx_messageInfo_EventForceSettle.DiscardUnknown(m)
}

var xxx_messageInfo_EventForceSettle proto.InternalMessageInfo

func (m *EventForceSettle) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type EventDeposit struct {
	// from is the the address of the account to deposit from
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the stream account to deposit to
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// amount is the amount to deposit
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *EventDeposit) Reset()         { *m = EventDeposit{} }
func (m *EventDeposit) String() string { return proto.CompactTextString(m) }
func (*EventDeposit) ProtoMessage()    {}
func (*EventDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_befcc80e27bc8df9, []int{3}
}
func (m *EventDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeposit.Merge(m, src)
}
func (m *EventDeposit) XXX_Size() int {
	return m.Size()
}
func (m *EventDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeposit proto.InternalMessageInfo

func (m *EventDeposit) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *EventDeposit) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type EventWithdraw struct {
	// to the address of the receive account
	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// from is the address of the stream account to withdraw from
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// amount is the amount to withdraw
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *EventWithdraw) Reset()         { *m = EventWithdraw{} }
func (m *EventWithdraw) String() string { return proto.CompactTextString(m) }
func (*EventWithdraw) ProtoMessage()    {}
func (*EventWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_befcc80e27bc8df9, []int{4}
}
func (m *EventWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdraw.Merge(m, src)
}
func (m *EventWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdraw proto.InternalMessageInfo

func (m *EventWithdraw) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *EventWithdraw) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

// emit when upload/cancel/delete object, used for frontend to preview the fee changed
// only emit in tx simulation
type EventFeePreview struct {
	Account        string                                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	FeePreviewType FeePreviewType                         `protobuf:"varint,2,opt,name=fee_preview_type,json=feePreviewType,proto3,enum=greenfield.payment.FeePreviewType" json:"fee_preview_type,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *EventFeePreview) Reset()         { *m = EventFeePreview{} }
func (m *EventFeePreview) String() string { return proto.CompactTextString(m) }
func (*EventFeePreview) ProtoMessage()    {}
func (*EventFeePreview) Descriptor() ([]byte, []int) {
	return fileDescriptor_befcc80e27bc8df9, []int{5}
}
func (m *EventFeePreview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFeePreview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFeePreview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFeePreview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFeePreview.Merge(m, src)
}
func (m *EventFeePreview) XXX_Size() int {
	return m.Size()
}
func (m *EventFeePreview) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFeePreview.DiscardUnknown(m)
}

var xxx_messageInfo_EventFeePreview proto.InternalMessageInfo

func (m *EventFeePreview) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EventFeePreview) GetFeePreviewType() FeePreviewType {
	if m != nil {
		return m.FeePreviewType
	}
	return FEE_PREVIEW_TYPE_PRELOCKED_FEE
}

func init() {
	proto.RegisterEnum("greenfield.payment.FeePreviewType", FeePreviewType_name, FeePreviewType_value)
	proto.RegisterType((*EventPaymentAccountUpdate)(nil), "greenfield.payment.EventPaymentAccountUpdate")
	proto.RegisterType((*EventStreamRecordUpdate)(nil), "greenfield.payment.EventStreamRecordUpdate")
	proto.RegisterType((*EventForceSettle)(nil), "greenfield.payment.EventForceSettle")
	proto.RegisterType((*EventDeposit)(nil), "greenfield.payment.EventDeposit")
	proto.RegisterType((*EventWithdraw)(nil), "greenfield.payment.EventWithdraw")
	proto.RegisterType((*EventFeePreview)(nil), "greenfield.payment.EventFeePreview")
}

func init() { proto.RegisterFile("greenfield/payment/events.proto", fileDescriptor_befcc80e27bc8df9) }

var fileDescriptor_befcc80e27bc8df9 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0xe3, 0x10, 0x02, 0x19, 0x20, 0x44, 0x16, 0x52, 0x03, 0x15, 0x26, 0x8d, 0x54, 0x9a,
	0x56, 0x4d, 0x22, 0xa5, 0xd7, 0xaa, 0x15, 0x29, 0x8e, 0x14, 0x15, 0x95, 0xc8, 0x09, 0x45, 0xad,
	0x54, 0x59, 0xfe, 0xf1, 0x1c, 0x2c, 0x62, 0x8f, 0x35, 0x33, 0x26, 0xe5, 0x3f, 0xe8, 0xb1, 0xd7,
	0x3d, 0xef, 0x61, 0x2f, 0x7b, 0xe4, 0xb8, 0x7b, 0xe7, 0x88, 0x38, 0xad, 0xf6, 0x80, 0x56, 0x70,
	0xda, 0xff, 0x62, 0xe5, 0x99, 0x49, 0x08, 0x22, 0x52, 0xd8, 0x55, 0x38, 0x25, 0xf3, 0xfc, 0xcd,
	0xfb, 0x7e, 0xde, 0xbc, 0xf7, 0x62, 0xb4, 0xd3, 0x27, 0x00, 0xa1, 0xe7, 0xc3, 0xc0, 0xad, 0x47,
	0xd6, 0x79, 0x00, 0x21, 0xab, 0xc3, 0x19, 0x84, 0x8c, 0xd6, 0x22, 0x82, 0x19, 0x56, 0xd5, 0x7b,
	0x41, 0x4d, 0x0a, 0xb6, 0x36, 0x1d, 0x4c, 0x03, 0x4c, 0x4d, 0xae, 0xa8, 0x8b, 0x83, 0x90, 0x6f,
	0x6d, 0xf4, 0x71, 0x1f, 0x8b, 0x78, 0xf2, 0x4d, 0x46, 0xb7, 0xa7, 0xb8, 0xd8, 0x16, 0x05, 0xf9,
	0x78, 0x77, 0xca, 0x63, 0xca, 0x08, 0x58, 0x81, 0x49, 0xc0, 0xc1, 0xc4, 0x15, 0xba, 0xf2, 0x0b,
	0x05, 0x6d, 0xea, 0x09, 0x5c, 0x47, 0x88, 0xf6, 0x1c, 0x07, 0xc7, 0x21, 0x3b, 0x8a, 0x5c, 0x8b,
	0x81, 0xfa, 0x23, 0xca, 0x58, 0xae, 0x4b, 0x8a, 0x4a, 0x49, 0xa9, 0xe4, 0x9a, 0xc5, 0xeb, 0x8b,
	0xea, 0x86, 0x44, 0xdb, 0x73, 0x5d, 0x02, 0x94, 0x76, 0x19, 0xf1, 0xc3, 0xbe, 0xc1, 0x55, 0x6a,
	0x0d, 0x2d, 0xe2, 0x61, 0x08, 0xa4, 0x98, 0x9e, 0x21, 0x17, 0x32, 0x55, 0x43, 0x88, 0x80, 0x17,
	0x87, 0xae, 0x65, 0x0f, 0xa0, 0xb8, 0x50, 0x52, 0x2a, 0xcb, 0xc6, 0x44, 0xa4, 0xfc, 0x7a, 0x11,
	0x7d, 0xc5, 0xd9, 0xba, 0x1c, 0xdc, 0xe0, 0xdc, 0x92, 0xac, 0x81, 0x96, 0x2c, 0x81, 0x3a, 0x13,
	0x6e, 0x24, 0x54, 0xbf, 0x45, 0x79, 0x87, 0xc4, 0xae, 0xc9, 0xfc, 0x00, 0x28, 0xb3, 0x82, 0x88,
	0x83, 0x2e, 0x18, 0x6b, 0x49, 0xb4, 0x37, 0x0a, 0xaa, 0x26, 0x5a, 0x0d, 0x81, 0x79, 0x03, 0x3c,
	0x34, 0x89, 0xc5, 0x04, 0x58, 0xae, 0xf9, 0xf3, 0xe5, 0xcd, 0x4e, 0xea, 0xfd, 0xcd, 0xce, 0x6e,
	0xdf, 0x67, 0x27, 0xb1, 0x5d, 0x73, 0x70, 0x20, 0xdb, 0x24, 0x3f, 0xaa, 0xd4, 0x3d, 0xad, 0xb3,
	0xf3, 0x08, 0x68, 0xad, 0x1d, 0xb2, 0xeb, 0x8b, 0x2a, 0x92, 0x34, 0xed, 0x90, 0x19, 0x2b, 0x32,
	0xa3, 0x91, 0xb0, 0x3b, 0x28, 0x4f, 0x99, 0xc5, 0x7c, 0xc7, 0xb4, 0xad, 0x81, 0x15, 0x3a, 0x50,
	0xcc, 0xcc, 0xc1, 0x62, 0x4d, 0xe4, 0x6c, 0x8a, 0x94, 0x89, 0x89, 0x1d, 0x7b, 0x1e, 0x90, 0xb1,
	0xc9, 0xe2, 0x3c, 0x4c, 0x44, 0xce, 0x91, 0x89, 0x89, 0x56, 0x07, 0xd8, 0x39, 0x1d, 0x5b, 0x64,
	0xe7, 0x71, 0x55, 0x49, 0xc6, 0x91, 0xc1, 0xaf, 0x28, 0x9b, 0x94, 0x15, 0xd3, 0xe2, 0x52, 0x49,
	0xa9, 0xe4, 0x1b, 0xdf, 0xd5, 0x1e, 0xef, 0x4e, 0x4d, 0x8c, 0x87, 0x9c, 0xdc, 0x2e, 0x97, 0x1b,
	0xf2, 0x67, 0xea, 0xf7, 0xa8, 0x40, 0x81, 0xb1, 0x01, 0x4c, 0x74, 0x7d, 0x99, 0x77, 0x7d, 0x5d,
	0xc4, 0xef, 0xfb, 0xfe, 0x0b, 0xca, 0xe1, 0x98, 0x99, 0x49, 0x9b, 0x68, 0x31, 0x57, 0x5a, 0xa8,
	0xac, 0x34, 0xbe, 0x9e, 0x66, 0x77, 0x18, 0xb3, 0xd6, 0x00, 0x0f, 0x9b, 0x99, 0xa4, 0x4c, 0x63,
	0x19, 0x8b, 0x23, 0x2d, 0xbf, 0x52, 0x50, 0x81, 0x8f, 0x6b, 0x0b, 0x13, 0x07, 0xba, 0x3c, 0xfb,
	0x67, 0x6e, 0x10, 0x20, 0x49, 0xe5, 0x8e, 0xaf, 0x34, 0x3d, 0x87, 0x2b, 0xcd, 0xcb, 0xa4, 0xf2,
	0x56, 0xcb, 0x6f, 0x14, 0xb4, 0xca, 0x49, 0xf7, 0x21, 0xc2, 0xd4, 0x67, 0x09, 0xa5, 0x47, 0x70,
	0x30, 0x9b, 0x32, 0x51, 0xa9, 0x15, 0x94, 0x66, 0x78, 0xe6, 0x92, 0xa7, 0x19, 0x56, 0x7b, 0x28,
	0x6b, 0x05, 0x7c, 0x49, 0xe7, 0xb1, 0x44, 0x32, 0x57, 0xf9, 0xad, 0x82, 0xd6, 0x38, 0xfe, 0xb1,
	0xcf, 0x4e, 0x5c, 0x62, 0x0d, 0x25, 0x91, 0xf2, 0x04, 0xa2, 0x51, 0xa5, 0xe9, 0x27, 0x55, 0xfa,
	0x3c, 0xfc, 0x1f, 0x15, 0xb4, 0x2e, 0x06, 0x05, 0xa0, 0x43, 0xe0, 0xcc, 0x87, 0xe1, 0x17, 0xfd,
	0x9f, 0x1d, 0xa0, 0x82, 0x07, 0x60, 0x46, 0x22, 0x85, 0x99, 0xd8, 0xf2, 0xba, 0xf2, 0x8d, 0xf2,
	0xb4, 0xb9, 0xbd, 0x77, 0xeb, 0x9d, 0x47, 0x60, 0xe4, 0xbd, 0x07, 0xe7, 0xe7, 0xa9, 0xf5, 0x87,
	0x7f, 0x50, 0xfe, 0xa1, 0xaf, 0x5a, 0x46, 0x5a, 0x4b, 0xd7, 0xcd, 0x8e, 0xa1, 0xff, 0xd9, 0xd6,
	0x8f, 0xcd, 0xde, 0x5f, 0x1d, 0x7e, 0x38, 0x38, 0xfc, 0xed, 0x77, 0x7d, 0xdf, 0x6c, 0xe9, 0x7a,
	0x21, 0xa5, 0x7e, 0x83, 0xb6, 0x1f, 0x69, 0x8e, 0xfe, 0x98, 0x90, 0x28, 0x5b, 0x99, 0xff, 0x5e,
	0x6a, 0xa9, 0x66, 0xfb, 0xf2, 0x56, 0x53, 0xae, 0x6e, 0x35, 0xe5, 0xc3, 0xad, 0xa6, 0xfc, 0x7f,
	0xa7, 0xa5, 0xae, 0xee, 0xb4, 0xd4, 0xbb, 0x3b, 0x2d, 0xf5, 0x77, 0x7d, 0x02, 0xdb, 0x0e, 0xed,
	0xaa, 0x73, 0x62, 0xf9, 0x61, 0x7d, 0xe2, 0xad, 0xf8, 0xef, 0xf8, 0xbd, 0xc8, 0x6b, 0xb0, 0xb3,
	0xfc, 0x85, 0xf8, 0xd3, 0xa7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xb7, 0x1e, 0xdc, 0xbf, 0x07,
	0x00, 0x00,
}

func (m *EventPaymentAccountUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPaymentAccountUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPaymentAccountUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Refundable {
		i--
		if m.Refundable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStreamRecordUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStreamRecordUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStreamRecordUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutFlows) > 0 {
		for iNdEx := len(m.OutFlows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutFlows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.SettleTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SettleTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.LockBalance.Size()
		i -= size
		if _, err := m.LockBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BufferBalance.Size()
		i -= size
		if _, err := m.BufferBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.StaticBalance.Size()
		i -= size
		if _, err := m.StaticBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NetflowRate.Size()
		i -= size
		if _, err := m.NetflowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CrudTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CrudTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventForceSettle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventForceSettle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventForceSettle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SettledBalance.Size()
		i -= size
		if _, err := m.SettledBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFeePreview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFeePreview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFeePreview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.FeePreviewType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FeePreviewType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventPaymentAccountUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Refundable {
		n += 2
	}
	return n
}

func (m *EventStreamRecordUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CrudTimestamp != 0 {
		n += 1 + sovEvents(uint64(m.CrudTimestamp))
	}
	l = m.NetflowRate.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.StaticBalance.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.BufferBalance.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.LockBalance.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	if m.SettleTimestamp != 0 {
		n += 1 + sovEvents(uint64(m.SettleTimestamp))
	}
	if len(m.OutFlows) > 0 {
		for _, e := range m.OutFlows {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventForceSettle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.SettledBalance.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventFeePreview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.FeePreviewType != 0 {
		n += 1 + sovEvents(uint64(m.FeePreviewType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventPaymentAccountUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPaymentAccountUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPaymentAccountUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refundable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refundable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStreamRecordUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStreamRecordUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStreamRecordUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrudTimestamp", wireType)
			}
			m.CrudTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrudTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetflowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetflowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StaticBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BufferBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StreamAccountStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleTimestamp", wireType)
			}
			m.SettleTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettleTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutFlows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutFlows = append(m.OutFlows, OutFlow{})
			if err := m.OutFlows[len(m.OutFlows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventForceSettle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventForceSettle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventForceSettle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettledBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFeePreview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFeePreview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFeePreview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePreviewType", wireType)
			}
			m.FeePreviewType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeePreviewType |= FeePreviewType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
