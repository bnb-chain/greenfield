// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bfs/payment/mock_object_info.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RedundancyType int32

const (
	REDUNDANCY_REPLICA_TYPE RedundancyType = 0
	REDUNDANCY_EC_TYPE      RedundancyType = 1
	REDUNDANCY_INLINE_TYPE  RedundancyType = 2
)

var RedundancyType_name = map[int32]string{
	0: "REDUNDANCY_REPLICA_TYPE",
	1: "REDUNDANCY_EC_TYPE",
	2: "REDUNDANCY_INLINE_TYPE",
}

var RedundancyType_value = map[string]int32{
	"REDUNDANCY_REPLICA_TYPE": 0,
	"REDUNDANCY_EC_TYPE":      1,
	"REDUNDANCY_INLINE_TYPE":  2,
}

func (x RedundancyType) String() string {
	return proto.EnumName(RedundancyType_name, int32(x))
}

func (RedundancyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9d48407eec48c81, []int{0}
}

type ObjectState int32

const (
	OBJECT_STATE_INIT        ObjectState = 0
	OBJECT_STATE_IN_SERVICE  ObjectState = 1
	OBJECT_STATE_IN_SHIFTING ObjectState = 2
)

var ObjectState_name = map[int32]string{
	0: "OBJECT_STATE_INIT",
	1: "OBJECT_STATE_IN_SERVICE",
	2: "OBJECT_STATE_IN_SHIFTING",
}

var ObjectState_value = map[string]int32{
	"OBJECT_STATE_INIT":        0,
	"OBJECT_STATE_IN_SERVICE":  1,
	"OBJECT_STATE_IN_SHIFTING": 2,
}

func (x ObjectState) String() string {
	return proto.EnumName(ObjectState_name, int32(x))
}

func (ObjectState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9d48407eec48c81, []int{1}
}

type MockObjectInfo struct {
	BucketName        string                 `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ObjectName        string                 `protobuf:"bytes,2,opt,name=objectName,proto3" json:"objectName,omitempty"`
	Owner             string                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	ObjectId          uint64                 `protobuf:"varint,4,opt,name=objectId,proto3" json:"objectId,omitempty"`
	Size_             uint64                 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	IsPrivate         bool                   `protobuf:"varint,6,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
	ContentType       string                 `protobuf:"bytes,7,opt,name=contentType,proto3" json:"contentType,omitempty"`
	CreateAt          uint64                 `protobuf:"varint,8,opt,name=createAt,proto3" json:"createAt,omitempty"`
	ObjectState       ObjectState            `protobuf:"varint,9,opt,name=objectState,proto3,enum=bnbchain.bfs.payment.ObjectState" json:"objectState,omitempty"`
	RedundancyType    RedundancyType         `protobuf:"varint,10,opt,name=redundancyType,proto3,enum=bnbchain.bfs.payment.RedundancyType" json:"redundancyType,omitempty"`
	Hash              string                 `protobuf:"bytes,12,opt,name=hash,proto3" json:"hash,omitempty"`
	PrimarySpChecksum string                 `protobuf:"bytes,13,opt,name=primary_sp_checksum,json=primarySpChecksum,proto3" json:"primary_sp_checksum,omitempty"`
	SecondarySPs      []*StorageProviderInfo `protobuf:"bytes,20,rep,name=secondarySPs,proto3" json:"secondarySPs,omitempty"`
}

func (m *MockObjectInfo) Reset()         { *m = MockObjectInfo{} }
func (m *MockObjectInfo) String() string { return proto.CompactTextString(m) }
func (*MockObjectInfo) ProtoMessage()    {}
func (*MockObjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d48407eec48c81, []int{0}
}
func (m *MockObjectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MockObjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MockObjectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MockObjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockObjectInfo.Merge(m, src)
}
func (m *MockObjectInfo) XXX_Size() int {
	return m.Size()
}
func (m *MockObjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MockObjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MockObjectInfo proto.InternalMessageInfo

func (m *MockObjectInfo) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MockObjectInfo) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *MockObjectInfo) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MockObjectInfo) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *MockObjectInfo) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *MockObjectInfo) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *MockObjectInfo) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *MockObjectInfo) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *MockObjectInfo) GetObjectState() ObjectState {
	if m != nil {
		return m.ObjectState
	}
	return OBJECT_STATE_INIT
}

func (m *MockObjectInfo) GetRedundancyType() RedundancyType {
	if m != nil {
		return m.RedundancyType
	}
	return REDUNDANCY_REPLICA_TYPE
}

func (m *MockObjectInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MockObjectInfo) GetPrimarySpChecksum() string {
	if m != nil {
		return m.PrimarySpChecksum
	}
	return ""
}

func (m *MockObjectInfo) GetSecondarySPs() []*StorageProviderInfo {
	if m != nil {
		return m.SecondarySPs
	}
	return nil
}

type StorageProviderInfo struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Checksum []byte `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *StorageProviderInfo) Reset()         { *m = StorageProviderInfo{} }
func (m *StorageProviderInfo) String() string { return proto.CompactTextString(m) }
func (*StorageProviderInfo) ProtoMessage()    {}
func (*StorageProviderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d48407eec48c81, []int{1}
}
func (m *StorageProviderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageProviderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageProviderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageProviderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageProviderInfo.Merge(m, src)
}
func (m *StorageProviderInfo) XXX_Size() int {
	return m.Size()
}
func (m *StorageProviderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageProviderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StorageProviderInfo proto.InternalMessageInfo

func (m *StorageProviderInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StorageProviderInfo) GetChecksum() []byte {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func init() {
	proto.RegisterEnum("bnbchain.bfs.payment.RedundancyType", RedundancyType_name, RedundancyType_value)
	proto.RegisterEnum("bnbchain.bfs.payment.ObjectState", ObjectState_name, ObjectState_value)
	proto.RegisterType((*MockObjectInfo)(nil), "bnbchain.bfs.payment.MockObjectInfo")
	proto.RegisterType((*StorageProviderInfo)(nil), "bnbchain.bfs.payment.StorageProviderInfo")
}

func init() {
	proto.RegisterFile("bfs/payment/mock_object_info.proto", fileDescriptor_a9d48407eec48c81)
}

var fileDescriptor_a9d48407eec48c81 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0x6e, 0xba, 0x6e, 0xff, 0xe6, 0xee, 0xaf, 0x36, 0xaf, 0x8c, 0x50, 0xa6, 0xa8, 0x4c, 0x5c,
	0x84, 0x49, 0x4b, 0xa5, 0xf1, 0x04, 0x6d, 0x16, 0x20, 0x68, 0xcb, 0xaa, 0x34, 0x20, 0x0d, 0x2e,
	0xa2, 0xc4, 0x71, 0xdb, 0x50, 0xc5, 0x8e, 0x6c, 0x77, 0x50, 0x9e, 0x80, 0x4b, 0x2e, 0xb9, 0xe7,
	0x15, 0x78, 0x08, 0x2e, 0x27, 0xae, 0xb8, 0x44, 0xdb, 0x8b, 0xa0, 0xd8, 0xdd, 0x96, 0x8e, 0xde,
	0xf9, 0x7c, 0xdf, 0x77, 0xfc, 0x1d, 0xfb, 0x9c, 0x03, 0xf6, 0xe3, 0x21, 0xef, 0xe4, 0xd1, 0x2c,
	0xc3, 0x44, 0x74, 0x32, 0x8a, 0x26, 0x21, 0x8d, 0x3f, 0x60, 0x24, 0xc2, 0x94, 0x0c, 0xa9, 0x95,
	0x33, 0x2a, 0x28, 0x6c, 0xc6, 0x24, 0x46, 0xe3, 0x28, 0x25, 0x56, 0x3c, 0xe4, 0xd6, 0x5c, 0xdc,
	0x7a, 0x84, 0x28, 0xcf, 0x28, 0x0f, 0xa5, 0xa6, 0xa3, 0x02, 0x95, 0xd0, 0x6a, 0x8e, 0xe8, 0x88,
	0x2a, 0xbc, 0x38, 0x29, 0x74, 0xff, 0x5b, 0x0d, 0x34, 0x4e, 0x29, 0x9a, 0x9c, 0x49, 0x03, 0x97,
	0x0c, 0x29, 0x34, 0x00, 0x88, 0xa7, 0x68, 0x82, 0x85, 0x17, 0x65, 0x58, 0xd7, 0xda, 0x9a, 0xb9,
	0xe1, 0x97, 0x90, 0x82, 0x57, 0xe5, 0x48, 0xbe, 0xaa, 0xf8, 0x3b, 0x04, 0x36, 0xc1, 0x2a, 0xfd,
	0x48, 0x30, 0xd3, 0x57, 0x24, 0xa5, 0x02, 0xd8, 0x02, 0xeb, 0x4a, 0xe3, 0x26, 0x7a, 0xad, 0xad,
	0x99, 0x35, 0xff, 0x36, 0x86, 0x10, 0xd4, 0x78, 0xfa, 0x19, 0xeb, 0xab, 0x12, 0x97, 0x67, 0xb8,
	0x07, 0x36, 0x52, 0xde, 0x67, 0xe9, 0x45, 0x24, 0xb0, 0xbe, 0xd6, 0xd6, 0xcc, 0x75, 0xff, 0x0e,
	0x80, 0x6d, 0x50, 0x47, 0x94, 0x08, 0x4c, 0x44, 0x30, 0xcb, 0xb1, 0xfe, 0x9f, 0x74, 0x2a, 0x43,
	0x85, 0x1f, 0x62, 0x38, 0x12, 0xb8, 0x2b, 0xf4, 0x75, 0xe5, 0x77, 0x13, 0x43, 0x1b, 0xd4, 0x95,
	0xf7, 0x40, 0x14, 0xb7, 0x6f, 0xb4, 0x35, 0xb3, 0x71, 0xf4, 0xc4, 0x5a, 0xf6, 0xa3, 0xd6, 0xd9,
	0x9d, 0xd0, 0x2f, 0x67, 0xc1, 0x13, 0xd0, 0x60, 0x38, 0x99, 0x92, 0x24, 0x22, 0x68, 0x26, 0xab,
	0x00, 0xf2, 0x9e, 0xa7, 0xcb, 0xef, 0xf1, 0x17, 0xb4, 0xfe, 0xbd, 0xdc, 0xe2, 0x0b, 0xc6, 0x11,
	0x1f, 0xeb, 0x9b, 0xf2, 0x25, 0xf2, 0x0c, 0x2d, 0xb0, 0x93, 0xb3, 0x34, 0x8b, 0xd8, 0x2c, 0xe4,
	0x79, 0x88, 0xc6, 0x18, 0x4d, 0xf8, 0x34, 0xd3, 0xff, 0x97, 0x92, 0xed, 0x39, 0x35, 0xc8, 0xed,
	0x39, 0x01, 0x4f, 0xc1, 0x26, 0xc7, 0x88, 0x92, 0xa4, 0x80, 0xfb, 0x5c, 0x6f, 0xb6, 0x57, 0xcc,
	0xfa, 0xd1, 0xb3, 0xe5, 0xf5, 0x0c, 0x04, 0x65, 0xd1, 0x08, 0xf7, 0x19, 0xbd, 0x48, 0x13, 0xcc,
	0x8a, 0xce, 0xfb, 0x0b, 0xe9, 0xfb, 0xef, 0xc1, 0xce, 0x12, 0x11, 0x34, 0x41, 0x35, 0x4d, 0xd4,
	0x58, 0xf4, 0xf4, 0x5f, 0x3f, 0x0e, 0x9b, 0xf3, 0x29, 0xeb, 0x26, 0x09, 0xc3, 0x9c, 0x0f, 0x04,
	0x4b, 0xc9, 0xc8, 0xaf, 0xa6, 0x89, 0x6c, 0xc1, 0x4d, 0xd1, 0xc5, 0x98, 0x6c, 0xfa, 0xb7, 0xf1,
	0xc1, 0x08, 0x34, 0x16, 0x7f, 0x04, 0x3e, 0x06, 0x0f, 0x7d, 0xe7, 0xf8, 0x8d, 0x77, 0xdc, 0xf5,
	0xec, 0xf3, 0xd0, 0x77, 0xfa, 0x27, 0xae, 0xdd, 0x0d, 0x83, 0xf3, 0xbe, 0xb3, 0x55, 0x81, 0xbb,
	0x00, 0x96, 0x48, 0xc7, 0x56, 0xb8, 0x06, 0x5b, 0x60, 0xb7, 0x84, 0xbb, 0xde, 0x89, 0xeb, 0x39,
	0x8a, 0xab, 0xb6, 0x6a, 0x5f, 0xbe, 0x1b, 0x95, 0x03, 0x0c, 0xea, 0xa5, 0x16, 0xc2, 0x07, 0x60,
	0xfb, 0xac, 0xf7, 0xda, 0xb1, 0x83, 0x70, 0x10, 0x74, 0x03, 0x27, 0x74, 0x3d, 0x37, 0xd8, 0xaa,
	0x14, 0xe6, 0xf7, 0xe0, 0x70, 0xe0, 0xf8, 0x6f, 0x5d, 0xbb, 0x30, 0xd9, 0x03, 0xfa, 0x3f, 0xe4,
	0x2b, 0xf7, 0x45, 0xe0, 0x7a, 0x2f, 0x6f, 0x6c, 0x7a, 0xbd, 0x9f, 0x57, 0x86, 0x76, 0x79, 0x65,
	0x68, 0x7f, 0xae, 0x0c, 0xed, 0xeb, 0xb5, 0x51, 0xb9, 0xbc, 0x36, 0x2a, 0xbf, 0xaf, 0x8d, 0xca,
	0x3b, 0x73, 0x94, 0x8a, 0xf1, 0x34, 0xb6, 0x10, 0xcd, 0x3a, 0x31, 0x89, 0x0f, 0x65, 0x2b, 0x3a,
	0xc5, 0x86, 0x7f, 0xba, 0xdd, 0x71, 0x31, 0xcb, 0x31, 0x8f, 0xd7, 0xe4, 0x4a, 0x3e, 0xff, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x93, 0x79, 0x46, 0x19, 0xff, 0x03, 0x00, 0x00,
}

func (m *MockObjectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MockObjectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MockObjectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecondarySPs) > 0 {
		for iNdEx := len(m.SecondarySPs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecondarySPs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMockObjectInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.PrimarySpChecksum) > 0 {
		i -= len(m.PrimarySpChecksum)
		copy(dAtA[i:], m.PrimarySpChecksum)
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(len(m.PrimarySpChecksum)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x62
	}
	if m.RedundancyType != 0 {
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(m.RedundancyType))
		i--
		dAtA[i] = 0x50
	}
	if m.ObjectState != 0 {
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(m.ObjectState))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateAt != 0 {
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsPrivate {
		i--
		if m.IsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Size_ != 0 {
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if m.ObjectId != 0 {
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageProviderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageProviderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageProviderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMockObjectInfo(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMockObjectInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovMockObjectInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MockObjectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMockObjectInfo(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovMockObjectInfo(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMockObjectInfo(uint64(l))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMockObjectInfo(uint64(m.ObjectId))
	}
	if m.Size_ != 0 {
		n += 1 + sovMockObjectInfo(uint64(m.Size_))
	}
	if m.IsPrivate {
		n += 2
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovMockObjectInfo(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMockObjectInfo(uint64(m.CreateAt))
	}
	if m.ObjectState != 0 {
		n += 1 + sovMockObjectInfo(uint64(m.ObjectState))
	}
	if m.RedundancyType != 0 {
		n += 1 + sovMockObjectInfo(uint64(m.RedundancyType))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMockObjectInfo(uint64(l))
	}
	l = len(m.PrimarySpChecksum)
	if l > 0 {
		n += 1 + l + sovMockObjectInfo(uint64(l))
	}
	if len(m.SecondarySPs) > 0 {
		for _, e := range m.SecondarySPs {
			l = e.Size()
			n += 2 + l + sovMockObjectInfo(uint64(l))
		}
	}
	return n
}

func (m *StorageProviderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMockObjectInfo(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovMockObjectInfo(uint64(l))
	}
	return n
}

func sovMockObjectInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMockObjectInfo(x uint64) (n int) {
	return sovMockObjectInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MockObjectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockObjectInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MockObjectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MockObjectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrivate = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectState", wireType)
			}
			m.ObjectState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectState |= ObjectState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedundancyType", wireType)
			}
			m.RedundancyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedundancyType |= RedundancyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimarySpChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondarySPs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondarySPs = append(m.SecondarySPs, &StorageProviderInfo{})
			if err := m.SecondarySPs[len(m.SecondarySPs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockObjectInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageProviderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockObjectInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageProviderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageProviderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], dAtA[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockObjectInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockObjectInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMockObjectInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMockObjectInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockObjectInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMockObjectInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMockObjectInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMockObjectInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMockObjectInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMockObjectInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMockObjectInfo = fmt.Errorf("proto: unexpected end of group")
)
