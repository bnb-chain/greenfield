// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/payment/mock_bucket_meta.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MockBucketMeta struct {
	BucketName          string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	Owner               string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ReadPaymentAccount  string `protobuf:"bytes,3,opt,name=readPaymentAccount,proto3" json:"readPaymentAccount,omitempty"`
	StorePaymentAccount string `protobuf:"bytes,4,opt,name=storePaymentAccount,proto3" json:"storePaymentAccount,omitempty"`
	SpAddress           string `protobuf:"bytes,5,opt,name=spAddress,proto3" json:"spAddress,omitempty"`
	// mock id with string instead of uint64 to avoid distribute id
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// for payment
	ReadPacket    ReadPacket     `protobuf:"varint,7,opt,name=readPacket,proto3,enum=bnbchain.greenfield.payment.ReadPacket" json:"readPacket,omitempty"`
	PriceTime     int64          `protobuf:"varint,8,opt,name=priceTime,proto3" json:"priceTime,omitempty"`
	OutFlowsInUSD []OutFlowInUSD `protobuf:"bytes,9,rep,name=outFlowsInUSD,proto3" json:"outFlowsInUSD"`
}

func (m *MockBucketMeta) Reset()         { *m = MockBucketMeta{} }
func (m *MockBucketMeta) String() string { return proto.CompactTextString(m) }
func (*MockBucketMeta) ProtoMessage()    {}
func (*MockBucketMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_83398b9730808f33, []int{0}
}
func (m *MockBucketMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MockBucketMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MockBucketMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MockBucketMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockBucketMeta.Merge(m, src)
}
func (m *MockBucketMeta) XXX_Size() int {
	return m.Size()
}
func (m *MockBucketMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_MockBucketMeta.DiscardUnknown(m)
}

var xxx_messageInfo_MockBucketMeta proto.InternalMessageInfo

func (m *MockBucketMeta) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MockBucketMeta) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MockBucketMeta) GetReadPaymentAccount() string {
	if m != nil {
		return m.ReadPaymentAccount
	}
	return ""
}

func (m *MockBucketMeta) GetStorePaymentAccount() string {
	if m != nil {
		return m.StorePaymentAccount
	}
	return ""
}

func (m *MockBucketMeta) GetSpAddress() string {
	if m != nil {
		return m.SpAddress
	}
	return ""
}

func (m *MockBucketMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MockBucketMeta) GetReadPacket() ReadPacket {
	if m != nil {
		return m.ReadPacket
	}
	return READ_PACKET_FREE
}

func (m *MockBucketMeta) GetPriceTime() int64 {
	if m != nil {
		return m.PriceTime
	}
	return 0
}

func (m *MockBucketMeta) GetOutFlowsInUSD() []OutFlowInUSD {
	if m != nil {
		return m.OutFlowsInUSD
	}
	return nil
}

func init() {
	proto.RegisterType((*MockBucketMeta)(nil), "bnbchain.greenfield.payment.MockBucketMeta")
}

func init() {
	proto.RegisterFile("greenfield/payment/mock_bucket_meta.proto", fileDescriptor_83398b9730808f33)
}

var fileDescriptor_83398b9730808f33 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0x86, 0x5b, 0x0a, 0x28, 0x63, 0x64, 0x31, 0xb2, 0x18, 0x51, 0x6b, 0xe3, 0xc6, 0xb2, 0xb0,
	0x35, 0xf8, 0x04, 0x10, 0xa3, 0x61, 0x81, 0x9a, 0x2a, 0x1b, 0x37, 0xa4, 0x33, 0x3d, 0x96, 0x06,
	0x3a, 0xd3, 0x74, 0xa6, 0x41, 0xde, 0xc2, 0x85, 0x0f, 0xc5, 0x92, 0xe5, 0x5d, 0xdd, 0xdc, 0xc0,
	0x8b, 0xdc, 0x30, 0x43, 0x80, 0x7b, 0x43, 0xd8, 0xf5, 0xfc, 0xff, 0xff, 0xf5, 0x3f, 0x99, 0x83,
	0x7a, 0x69, 0x09, 0xc0, 0xff, 0x64, 0xb0, 0x48, 0xc2, 0x22, 0x5e, 0xe5, 0xc0, 0x55, 0x98, 0x0b,
	0x36, 0x9f, 0xd2, 0x8a, 0xcd, 0x41, 0x4d, 0x73, 0x50, 0x71, 0x50, 0x94, 0x42, 0x09, 0xfc, 0x8a,
	0x72, 0xca, 0x66, 0x71, 0xc6, 0x83, 0x13, 0x13, 0x1c, 0x98, 0xee, 0x4b, 0x26, 0x64, 0x2e, 0xe4,
	0x54, 0x47, 0x43, 0x33, 0x18, 0xae, 0xdb, 0x49, 0x45, 0x2a, 0x8c, 0xbe, 0xff, 0x3a, 0xa8, 0x6f,
	0x2e, 0x14, 0xd3, 0x58, 0x82, 0xb1, 0xdf, 0xfd, 0x77, 0x50, 0x7b, 0x2c, 0xd8, 0x7c, 0xa8, 0xd7,
	0x18, 0x83, 0x8a, 0xb1, 0x8b, 0x90, 0x59, 0xea, 0x5b, 0x9c, 0x03, 0xb1, 0x3d, 0xdb, 0x6f, 0x45,
	0x67, 0x0a, 0xee, 0xa0, 0x86, 0x58, 0x72, 0x28, 0x49, 0x4d, 0x5b, 0x66, 0xc0, 0x01, 0xc2, 0x25,
	0xc4, 0xc9, 0x0f, 0x53, 0x31, 0x60, 0x4c, 0x54, 0x5c, 0x11, 0x47, 0x47, 0x2e, 0x38, 0xf8, 0x23,
	0x7a, 0x21, 0x95, 0x28, 0xe1, 0x11, 0x50, 0xd7, 0xc0, 0x25, 0x0b, 0xbf, 0x46, 0x2d, 0x59, 0x0c,
	0x92, 0xa4, 0x04, 0x29, 0x49, 0x43, 0xe7, 0x4e, 0x02, 0x6e, 0xa3, 0x5a, 0x96, 0x90, 0xa6, 0x96,
	0x6b, 0x59, 0x82, 0xbf, 0x22, 0x64, 0x5a, 0xf7, 0x7b, 0x93, 0x27, 0x9e, 0xed, 0xb7, 0xfb, 0xef,
	0x83, 0x2b, 0x4f, 0x1b, 0x44, 0xc7, 0x78, 0x74, 0x86, 0xee, 0x6b, 0x8b, 0x32, 0x63, 0xf0, 0x2b,
	0xcb, 0x81, 0x3c, 0xf5, 0x6c, 0xdf, 0x89, 0x4e, 0x02, 0x9e, 0xa0, 0xe7, 0xa2, 0x52, 0x5f, 0x16,
	0x62, 0x29, 0x47, 0x7c, 0xf2, 0xf3, 0x33, 0x69, 0x79, 0x8e, 0xff, 0xac, 0xdf, 0xbb, 0xda, 0xf4,
	0xdd, 0x10, 0x1a, 0x18, 0xd6, 0xd7, 0xb7, 0x6f, 0xad, 0xe8, 0xe1, 0x5f, 0x86, 0xa3, 0xf5, 0xd6,
	0xb5, 0x37, 0x5b, 0xd7, 0xbe, 0xdb, 0xba, 0xf6, 0xbf, 0x9d, 0x6b, 0x6d, 0x76, 0xae, 0x75, 0xb3,
	0x73, 0xad, 0xdf, 0x61, 0x9a, 0xa9, 0x59, 0x45, 0x03, 0x26, 0xf2, 0x90, 0x72, 0xfa, 0x41, 0x97,
	0x84, 0x67, 0x47, 0xfe, 0x7b, 0x3c, 0xb3, 0x5a, 0x15, 0x20, 0x69, 0x53, 0x1f, 0xfa, 0xd3, 0x7d,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xc6, 0x74, 0x74, 0x82, 0x02, 0x00, 0x00,
}

func (m *MockBucketMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MockBucketMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MockBucketMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutFlowsInUSD) > 0 {
		for iNdEx := len(m.OutFlowsInUSD) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutFlowsInUSD[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMockBucketMeta(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.PriceTime != 0 {
		i = encodeVarintMockBucketMeta(dAtA, i, uint64(m.PriceTime))
		i--
		dAtA[i] = 0x40
	}
	if m.ReadPacket != 0 {
		i = encodeVarintMockBucketMeta(dAtA, i, uint64(m.ReadPacket))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMockBucketMeta(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SpAddress) > 0 {
		i -= len(m.SpAddress)
		copy(dAtA[i:], m.SpAddress)
		i = encodeVarintMockBucketMeta(dAtA, i, uint64(len(m.SpAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StorePaymentAccount) > 0 {
		i -= len(m.StorePaymentAccount)
		copy(dAtA[i:], m.StorePaymentAccount)
		i = encodeVarintMockBucketMeta(dAtA, i, uint64(len(m.StorePaymentAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReadPaymentAccount) > 0 {
		i -= len(m.ReadPaymentAccount)
		copy(dAtA[i:], m.ReadPaymentAccount)
		i = encodeVarintMockBucketMeta(dAtA, i, uint64(len(m.ReadPaymentAccount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMockBucketMeta(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMockBucketMeta(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMockBucketMeta(dAtA []byte, offset int, v uint64) int {
	offset -= sovMockBucketMeta(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MockBucketMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMockBucketMeta(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMockBucketMeta(uint64(l))
	}
	l = len(m.ReadPaymentAccount)
	if l > 0 {
		n += 1 + l + sovMockBucketMeta(uint64(l))
	}
	l = len(m.StorePaymentAccount)
	if l > 0 {
		n += 1 + l + sovMockBucketMeta(uint64(l))
	}
	l = len(m.SpAddress)
	if l > 0 {
		n += 1 + l + sovMockBucketMeta(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMockBucketMeta(uint64(l))
	}
	if m.ReadPacket != 0 {
		n += 1 + sovMockBucketMeta(uint64(m.ReadPacket))
	}
	if m.PriceTime != 0 {
		n += 1 + sovMockBucketMeta(uint64(m.PriceTime))
	}
	if len(m.OutFlowsInUSD) > 0 {
		for _, e := range m.OutFlowsInUSD {
			l = e.Size()
			n += 1 + l + sovMockBucketMeta(uint64(l))
		}
	}
	return n
}

func sovMockBucketMeta(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMockBucketMeta(x uint64) (n int) {
	return sovMockBucketMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MockBucketMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockBucketMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MockBucketMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MockBucketMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPaymentAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadPaymentAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorePaymentAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorePaymentAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPacket", wireType)
			}
			m.ReadPacket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadPacket |= ReadPacket(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTime", wireType)
			}
			m.PriceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutFlowsInUSD", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutFlowsInUSD = append(m.OutFlowsInUSD, OutFlowInUSD{})
			if err := m.OutFlowsInUSD[len(m.OutFlowsInUSD)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockBucketMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockBucketMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMockBucketMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMockBucketMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockBucketMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMockBucketMeta
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMockBucketMeta
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMockBucketMeta
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMockBucketMeta        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMockBucketMeta          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMockBucketMeta = fmt.Errorf("proto: unexpected end of group")
)
