// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/virtualgroup/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCreateGlobalVirtualGroup struct {
	// The unique id of global virtual group, which is generated by blockchain
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the global virtual group family where the gvg belongs
	FamilyId uint32 `protobuf:"varint,2,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	// The id of the primary sp who create this global virtual group
	PrimarySpId uint32 `protobuf:"varint,3,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
	// The ids of the secondary sps which belongs to this global virtual group
	SecondarySpIds []uint32 `protobuf:"varint,4,rep,packed,name=secondary_sp_ids,json=secondarySpIds,proto3" json:"secondary_sp_ids,omitempty"`
	// The store size of all the objects stores in this global virtual group
	StoredSize uint64 `protobuf:"varint,5,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
	// The virtual payment address of this global virtual group, which is auto generated by blockchain
	// And, all users' payment flows will flow to this account
	VirtualPaymentAddress string `protobuf:"bytes,6,opt,name=virtual_payment_address,json=virtualPaymentAddress,proto3" json:"virtual_payment_address,omitempty"`
	// The total amount of the staking for this global virtual group
	TotalDeposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=total_deposit,json=totalDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_deposit"`
}

func (m *EventCreateGlobalVirtualGroup) Reset()         { *m = EventCreateGlobalVirtualGroup{} }
func (m *EventCreateGlobalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventCreateGlobalVirtualGroup) ProtoMessage()    {}
func (*EventCreateGlobalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{0}
}
func (m *EventCreateGlobalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateGlobalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateGlobalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateGlobalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateGlobalVirtualGroup.Merge(m, src)
}
func (m *EventCreateGlobalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateGlobalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateGlobalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateGlobalVirtualGroup proto.InternalMessageInfo

func (m *EventCreateGlobalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroup) GetFamilyId() uint32 {
	if m != nil {
		return m.FamilyId
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroup) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroup) GetSecondarySpIds() []uint32 {
	if m != nil {
		return m.SecondarySpIds
	}
	return nil
}

func (m *EventCreateGlobalVirtualGroup) GetStoredSize() uint64 {
	if m != nil {
		return m.StoredSize
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroup) GetVirtualPaymentAddress() string {
	if m != nil {
		return m.VirtualPaymentAddress
	}
	return ""
}

type EventUpdateGlobalVirtualGroup struct {
	// The id of global virtual group, which has been updated
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The store size of all the objects stores in this global virtual group
	StoreSize uint64 `protobuf:"varint,2,opt,name=store_size,json=storeSize,proto3" json:"store_size,omitempty"`
	// The total amount of the staking for this global virtual group
	TotalDeposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_deposit,json=totalDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_deposit"`
	// Primary SP ID represents the unique id of the primary storage provider in the group.
	PrimarySpId uint32 `protobuf:"varint,4,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
	// Secondary SP IDs represents the list of unique identifiers of the secondary storage providers in the group.
	SecondarySpIds []uint32 `protobuf:"varint,5,rep,packed,name=secondary_sp_ids,json=secondarySpIds,proto3" json:"secondary_sp_ids,omitempty"`
}

func (m *EventUpdateGlobalVirtualGroup) Reset()         { *m = EventUpdateGlobalVirtualGroup{} }
func (m *EventUpdateGlobalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventUpdateGlobalVirtualGroup) ProtoMessage()    {}
func (*EventUpdateGlobalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{1}
}
func (m *EventUpdateGlobalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateGlobalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateGlobalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateGlobalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateGlobalVirtualGroup.Merge(m, src)
}
func (m *EventUpdateGlobalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateGlobalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateGlobalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateGlobalVirtualGroup proto.InternalMessageInfo

func (m *EventUpdateGlobalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventUpdateGlobalVirtualGroup) GetStoreSize() uint64 {
	if m != nil {
		return m.StoreSize
	}
	return 0
}

func (m *EventUpdateGlobalVirtualGroup) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

func (m *EventUpdateGlobalVirtualGroup) GetSecondarySpIds() []uint32 {
	if m != nil {
		return m.SecondarySpIds
	}
	return nil
}

type EventDeleteGlobalVirtualGroup struct {
	// The id of global virtual group, which has been deleted
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the primary sp who create this global virtual group family
	PrimarySpId uint32 `protobuf:"varint,2,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
}

func (m *EventDeleteGlobalVirtualGroup) Reset()         { *m = EventDeleteGlobalVirtualGroup{} }
func (m *EventDeleteGlobalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventDeleteGlobalVirtualGroup) ProtoMessage()    {}
func (*EventDeleteGlobalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{2}
}
func (m *EventDeleteGlobalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteGlobalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteGlobalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteGlobalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteGlobalVirtualGroup.Merge(m, src)
}
func (m *EventDeleteGlobalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteGlobalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteGlobalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteGlobalVirtualGroup proto.InternalMessageInfo

func (m *EventDeleteGlobalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventDeleteGlobalVirtualGroup) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

type EventCreateGlobalVirtualGroupFamily struct {
	// The id of global virtual group family, which is auto generated by blockchain
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the primary sp who create this global virtual group family
	PrimarySpId uint32 `protobuf:"varint,2,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
	// The virtual payment address of this global virtual group family, which is auto generated by blockcahin
	// all users' read quota payment flows will flow to this account.
	VirtualPaymentAddress string `protobuf:"bytes,3,opt,name=virtual_payment_address,json=virtualPaymentAddress,proto3" json:"virtual_payment_address,omitempty"`
	// global_virtual_group_ids are the ids of gvgs in this family
	GlobalVirtualGroupIds []uint32 `protobuf:"varint,4,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
}

func (m *EventCreateGlobalVirtualGroupFamily) Reset()         { *m = EventCreateGlobalVirtualGroupFamily{} }
func (m *EventCreateGlobalVirtualGroupFamily) String() string { return proto.CompactTextString(m) }
func (*EventCreateGlobalVirtualGroupFamily) ProtoMessage()    {}
func (*EventCreateGlobalVirtualGroupFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{3}
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateGlobalVirtualGroupFamily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateGlobalVirtualGroupFamily.Merge(m, src)
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateGlobalVirtualGroupFamily.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateGlobalVirtualGroupFamily proto.InternalMessageInfo

func (m *EventCreateGlobalVirtualGroupFamily) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroupFamily) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroupFamily) GetVirtualPaymentAddress() string {
	if m != nil {
		return m.VirtualPaymentAddress
	}
	return ""
}

func (m *EventCreateGlobalVirtualGroupFamily) GetGlobalVirtualGroupIds() []uint32 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

type EventUpdateGlobalVirtualGroupFamily struct {
	// The id of global virtual group family, which is auto generated by blockchain
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the primary sp who create this global virtual group family
	PrimarySpId uint32 `protobuf:"varint,2,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
	// global_virtual_group_ids are the ids of gvgs in this family
	GlobalVirtualGroupIds []uint32 `protobuf:"varint,3,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
}

func (m *EventUpdateGlobalVirtualGroupFamily) Reset()         { *m = EventUpdateGlobalVirtualGroupFamily{} }
func (m *EventUpdateGlobalVirtualGroupFamily) String() string { return proto.CompactTextString(m) }
func (*EventUpdateGlobalVirtualGroupFamily) ProtoMessage()    {}
func (*EventUpdateGlobalVirtualGroupFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{4}
}
func (m *EventUpdateGlobalVirtualGroupFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateGlobalVirtualGroupFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateGlobalVirtualGroupFamily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateGlobalVirtualGroupFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateGlobalVirtualGroupFamily.Merge(m, src)
}
func (m *EventUpdateGlobalVirtualGroupFamily) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateGlobalVirtualGroupFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateGlobalVirtualGroupFamily.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateGlobalVirtualGroupFamily proto.InternalMessageInfo

func (m *EventUpdateGlobalVirtualGroupFamily) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventUpdateGlobalVirtualGroupFamily) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

func (m *EventUpdateGlobalVirtualGroupFamily) GetGlobalVirtualGroupIds() []uint32 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

type EventDeleteGlobalVirtualGroupFamily struct {
	// The id of global virtual group family, which is auto generated by blockchain
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the primary sp who create this global virtual group family
	PrimarySpId uint32 `protobuf:"varint,2,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
}

func (m *EventDeleteGlobalVirtualGroupFamily) Reset()         { *m = EventDeleteGlobalVirtualGroupFamily{} }
func (m *EventDeleteGlobalVirtualGroupFamily) String() string { return proto.CompactTextString(m) }
func (*EventDeleteGlobalVirtualGroupFamily) ProtoMessage()    {}
func (*EventDeleteGlobalVirtualGroupFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{5}
}
func (m *EventDeleteGlobalVirtualGroupFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteGlobalVirtualGroupFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteGlobalVirtualGroupFamily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteGlobalVirtualGroupFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteGlobalVirtualGroupFamily.Merge(m, src)
}
func (m *EventDeleteGlobalVirtualGroupFamily) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteGlobalVirtualGroupFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteGlobalVirtualGroupFamily.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteGlobalVirtualGroupFamily proto.InternalMessageInfo

func (m *EventDeleteGlobalVirtualGroupFamily) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventDeleteGlobalVirtualGroupFamily) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

type EventCreateLocalVirtualGroup struct {
	// The id of the local virtual group and this ID is unique within the bucket
	// and different buckets will have the same ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the bucket
	BucketId Uint `protobuf:"bytes,2,opt,name=bucket_id,json=bucketId,proto3,customtype=Uint" json:"bucket_id"`
	// The id of the global virtual group
	GlobalVirtualGroupId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
	// The stored size of all the objects stores in this lvg
	StoredSize uint64 `protobuf:"varint,4,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
}

func (m *EventCreateLocalVirtualGroup) Reset()         { *m = EventCreateLocalVirtualGroup{} }
func (m *EventCreateLocalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventCreateLocalVirtualGroup) ProtoMessage()    {}
func (*EventCreateLocalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{6}
}
func (m *EventCreateLocalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateLocalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateLocalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateLocalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateLocalVirtualGroup.Merge(m, src)
}
func (m *EventCreateLocalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateLocalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateLocalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateLocalVirtualGroup proto.InternalMessageInfo

func (m *EventCreateLocalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateLocalVirtualGroup) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

func (m *EventCreateLocalVirtualGroup) GetStoredSize() uint64 {
	if m != nil {
		return m.StoredSize
	}
	return 0
}

type EventUpdateLocalVirtualGroup struct {
	// The id of the local virtual group
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the bucket
	BucketId Uint `protobuf:"bytes,2,opt,name=bucket_id,json=bucketId,proto3,customtype=Uint" json:"bucket_id"`
	// The global_virtual_group_id is gvgid of lvg after migrate
	GlobalVirtualGroupId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
	// The stored size of all the objects stores in this lvg
	StoredSize uint64 `protobuf:"varint,4,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
}

func (m *EventUpdateLocalVirtualGroup) Reset()         { *m = EventUpdateLocalVirtualGroup{} }
func (m *EventUpdateLocalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventUpdateLocalVirtualGroup) ProtoMessage()    {}
func (*EventUpdateLocalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{7}
}
func (m *EventUpdateLocalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateLocalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateLocalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateLocalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateLocalVirtualGroup.Merge(m, src)
}
func (m *EventUpdateLocalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateLocalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateLocalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateLocalVirtualGroup proto.InternalMessageInfo

func (m *EventUpdateLocalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventUpdateLocalVirtualGroup) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

func (m *EventUpdateLocalVirtualGroup) GetStoredSize() uint64 {
	if m != nil {
		return m.StoredSize
	}
	return 0
}

type EventDeleteLocalVirtualGroup struct {
	// The id of the local virtual group
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the bucket
	BucketId Uint `protobuf:"bytes,2,opt,name=bucket_id,json=bucketId,proto3,customtype=Uint" json:"bucket_id"`
}

func (m *EventDeleteLocalVirtualGroup) Reset()         { *m = EventDeleteLocalVirtualGroup{} }
func (m *EventDeleteLocalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventDeleteLocalVirtualGroup) ProtoMessage()    {}
func (*EventDeleteLocalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{8}
}
func (m *EventDeleteLocalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteLocalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteLocalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteLocalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteLocalVirtualGroup.Merge(m, src)
}
func (m *EventDeleteLocalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteLocalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteLocalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteLocalVirtualGroup proto.InternalMessageInfo

func (m *EventDeleteLocalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EventSwapOut struct {
	// The id of the storage provider who wants to swap out
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the gvg family which the storage provider wants to swap out as primary sp
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,2,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The ids of the gvgs which the storage provider wants to swap out as secondary sp
	GlobalVirtualGroupIds []uint32 `protobuf:"varint,3,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
	// The id of the successor sp who take over this family or these gvgs
	SuccessorSpId uint32 `protobuf:"varint,4,opt,name=successor_sp_id,json=successorSpId,proto3" json:"successor_sp_id,omitempty"`
}

func (m *EventSwapOut) Reset()         { *m = EventSwapOut{} }
func (m *EventSwapOut) String() string { return proto.CompactTextString(m) }
func (*EventSwapOut) ProtoMessage()    {}
func (*EventSwapOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{9}
}
func (m *EventSwapOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSwapOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSwapOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSwapOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSwapOut.Merge(m, src)
}
func (m *EventSwapOut) XXX_Size() int {
	return m.Size()
}
func (m *EventSwapOut) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSwapOut.DiscardUnknown(m)
}

var xxx_messageInfo_EventSwapOut proto.InternalMessageInfo

func (m *EventSwapOut) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventSwapOut) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventSwapOut) GetGlobalVirtualGroupIds() []uint32 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

func (m *EventSwapOut) GetSuccessorSpId() uint32 {
	if m != nil {
		return m.SuccessorSpId
	}
	return 0
}

type EventCompleteSwapOut struct {
	// The id of the storage provider who complete swap out.
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the storage provider who swap out the family or gvgs
	SrcStorageProviderId uint32 `protobuf:"varint,2,opt,name=src_storage_provider_id,json=srcStorageProviderId,proto3" json:"src_storage_provider_id,omitempty"`
	// The id of the gvg family
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The ids of the gvgs
	GlobalVirtualGroupIds []uint32 `protobuf:"varint,4,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
}

func (m *EventCompleteSwapOut) Reset()         { *m = EventCompleteSwapOut{} }
func (m *EventCompleteSwapOut) String() string { return proto.CompactTextString(m) }
func (*EventCompleteSwapOut) ProtoMessage()    {}
func (*EventCompleteSwapOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{10}
}
func (m *EventCompleteSwapOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCompleteSwapOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCompleteSwapOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCompleteSwapOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCompleteSwapOut.Merge(m, src)
}
func (m *EventCompleteSwapOut) XXX_Size() int {
	return m.Size()
}
func (m *EventCompleteSwapOut) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCompleteSwapOut.DiscardUnknown(m)
}

var xxx_messageInfo_EventCompleteSwapOut proto.InternalMessageInfo

func (m *EventCompleteSwapOut) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventCompleteSwapOut) GetSrcStorageProviderId() uint32 {
	if m != nil {
		return m.SrcStorageProviderId
	}
	return 0
}

func (m *EventCompleteSwapOut) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventCompleteSwapOut) GetGlobalVirtualGroupIds() []uint32 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

type EventCancelSwapOut struct {
	// The id of the storage provider who cancel swap out.
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the gvg family
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,2,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The ids of the gvgs
	GlobalVirtualGroupIds []uint32 `protobuf:"varint,3,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
	// The id of the successor sp who take over this family or these gvgs
	SuccessorSpId uint32 `protobuf:"varint,4,opt,name=successor_sp_id,json=successorSpId,proto3" json:"successor_sp_id,omitempty"`
}

func (m *EventCancelSwapOut) Reset()         { *m = EventCancelSwapOut{} }
func (m *EventCancelSwapOut) String() string { return proto.CompactTextString(m) }
func (*EventCancelSwapOut) ProtoMessage()    {}
func (*EventCancelSwapOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{11}
}
func (m *EventCancelSwapOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelSwapOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelSwapOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelSwapOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelSwapOut.Merge(m, src)
}
func (m *EventCancelSwapOut) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelSwapOut) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelSwapOut.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelSwapOut proto.InternalMessageInfo

func (m *EventCancelSwapOut) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventCancelSwapOut) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventCancelSwapOut) GetGlobalVirtualGroupIds() []uint32 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

func (m *EventCancelSwapOut) GetSuccessorSpId() uint32 {
	if m != nil {
		return m.SuccessorSpId
	}
	return 0
}

type EventStorageProviderExit struct {
	// The id of the storage provider who wants to exit
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The operator address of the storage provider who wants to exit
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *EventStorageProviderExit) Reset()         { *m = EventStorageProviderExit{} }
func (m *EventStorageProviderExit) String() string { return proto.CompactTextString(m) }
func (*EventStorageProviderExit) ProtoMessage()    {}
func (*EventStorageProviderExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{12}
}
func (m *EventStorageProviderExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStorageProviderExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStorageProviderExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStorageProviderExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStorageProviderExit.Merge(m, src)
}
func (m *EventStorageProviderExit) XXX_Size() int {
	return m.Size()
}
func (m *EventStorageProviderExit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStorageProviderExit.DiscardUnknown(m)
}

var xxx_messageInfo_EventStorageProviderExit proto.InternalMessageInfo

func (m *EventStorageProviderExit) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventStorageProviderExit) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

type EventCompleteStorageProviderExit struct {
	// The id of the storage provider who complete exit
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The operator address which initials the complete exit transaction.
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// The storage provider address which completes the exit
	StorageProviderAddress string `protobuf:"bytes,3,opt,name=storage_provider_address,json=storageProviderAddress,proto3" json:"storage_provider_address,omitempty"`
	// total_deposit defines the number of tokens deposited by this storage provider for staking.
	TotalDeposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_deposit,json=totalDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_deposit"`
	// forced_exit whether the exit is a forced exit
	ForcedExit bool `protobuf:"varint,5,opt,name=forced_exit,json=forcedExit,proto3" json:"forced_exit,omitempty"`
}

func (m *EventCompleteStorageProviderExit) Reset()         { *m = EventCompleteStorageProviderExit{} }
func (m *EventCompleteStorageProviderExit) String() string { return proto.CompactTextString(m) }
func (*EventCompleteStorageProviderExit) ProtoMessage()    {}
func (*EventCompleteStorageProviderExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{13}
}
func (m *EventCompleteStorageProviderExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCompleteStorageProviderExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCompleteStorageProviderExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCompleteStorageProviderExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCompleteStorageProviderExit.Merge(m, src)
}
func (m *EventCompleteStorageProviderExit) XXX_Size() int {
	return m.Size()
}
func (m *EventCompleteStorageProviderExit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCompleteStorageProviderExit.DiscardUnknown(m)
}

var xxx_messageInfo_EventCompleteStorageProviderExit proto.InternalMessageInfo

func (m *EventCompleteStorageProviderExit) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventCompleteStorageProviderExit) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *EventCompleteStorageProviderExit) GetStorageProviderAddress() string {
	if m != nil {
		return m.StorageProviderAddress
	}
	return ""
}

func (m *EventCompleteStorageProviderExit) GetForcedExit() bool {
	if m != nil {
		return m.ForcedExit
	}
	return false
}

type EventReserveSwapIn struct {
	// The id of the storage provider who wants to swap in
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the gvg family which the storage provider wants to swap in as primary sp
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,2,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The id of the gvg which the storage provider wants to swap in as secondary sp
	GlobalVirtualGroupId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
	// The id of the target sp who will be swapped
	TargetSpId uint32 `protobuf:"varint,4,opt,name=target_sp_id,json=targetSpId,proto3" json:"target_sp_id,omitempty"`
	// the expiration time of this reserved swapIn
	ExpirationTime uint64 `protobuf:"varint,5,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
}

func (m *EventReserveSwapIn) Reset()         { *m = EventReserveSwapIn{} }
func (m *EventReserveSwapIn) String() string { return proto.CompactTextString(m) }
func (*EventReserveSwapIn) ProtoMessage()    {}
func (*EventReserveSwapIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{14}
}
func (m *EventReserveSwapIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReserveSwapIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReserveSwapIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReserveSwapIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReserveSwapIn.Merge(m, src)
}
func (m *EventReserveSwapIn) XXX_Size() int {
	return m.Size()
}
func (m *EventReserveSwapIn) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReserveSwapIn.DiscardUnknown(m)
}

var xxx_messageInfo_EventReserveSwapIn proto.InternalMessageInfo

func (m *EventReserveSwapIn) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventReserveSwapIn) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventReserveSwapIn) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

func (m *EventReserveSwapIn) GetTargetSpId() uint32 {
	if m != nil {
		return m.TargetSpId
	}
	return 0
}

func (m *EventReserveSwapIn) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

type EventCompleteSwapIn struct {
	// The id of the storage provider who complete swap in.
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the storage provider who swap in the family or gvgs
	TargetStorageProviderId uint32 `protobuf:"varint,2,opt,name=target_storage_provider_id,json=targetStorageProviderId,proto3" json:"target_storage_provider_id,omitempty"`
	// The id of the gvg family
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The id of the gvg
	GlobalVirtualGroupId uint32 `protobuf:"varint,4,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
}

func (m *EventCompleteSwapIn) Reset()         { *m = EventCompleteSwapIn{} }
func (m *EventCompleteSwapIn) String() string { return proto.CompactTextString(m) }
func (*EventCompleteSwapIn) ProtoMessage()    {}
func (*EventCompleteSwapIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{15}
}
func (m *EventCompleteSwapIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCompleteSwapIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCompleteSwapIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCompleteSwapIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCompleteSwapIn.Merge(m, src)
}
func (m *EventCompleteSwapIn) XXX_Size() int {
	return m.Size()
}
func (m *EventCompleteSwapIn) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCompleteSwapIn.DiscardUnknown(m)
}

var xxx_messageInfo_EventCompleteSwapIn proto.InternalMessageInfo

func (m *EventCompleteSwapIn) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventCompleteSwapIn) GetTargetStorageProviderId() uint32 {
	if m != nil {
		return m.TargetStorageProviderId
	}
	return 0
}

func (m *EventCompleteSwapIn) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventCompleteSwapIn) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

type EventCancelSwapIn struct {
	// The id of the storage provider who cancel swap in.
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the gvg family
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,2,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The id of the gvg
	GlobalVirtualGroupId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
	// The id of the target sp who was swapped from family or gvgs
	TargetSpId uint32 `protobuf:"varint,4,opt,name=target_sp_id,json=targetSpId,proto3" json:"target_sp_id,omitempty"`
}

func (m *EventCancelSwapIn) Reset()         { *m = EventCancelSwapIn{} }
func (m *EventCancelSwapIn) String() string { return proto.CompactTextString(m) }
func (*EventCancelSwapIn) ProtoMessage()    {}
func (*EventCancelSwapIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{16}
}
func (m *EventCancelSwapIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelSwapIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelSwapIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelSwapIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelSwapIn.Merge(m, src)
}
func (m *EventCancelSwapIn) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelSwapIn) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelSwapIn.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelSwapIn proto.InternalMessageInfo

func (m *EventCancelSwapIn) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventCancelSwapIn) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventCancelSwapIn) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

func (m *EventCancelSwapIn) GetTargetSpId() uint32 {
	if m != nil {
		return m.TargetSpId
	}
	return 0
}

type EventStorageProviderForcedExit struct {
	// The id of the storage provider who wants to exit
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
}

func (m *EventStorageProviderForcedExit) Reset()         { *m = EventStorageProviderForcedExit{} }
func (m *EventStorageProviderForcedExit) String() string { return proto.CompactTextString(m) }
func (*EventStorageProviderForcedExit) ProtoMessage()    {}
func (*EventStorageProviderForcedExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{17}
}
func (m *EventStorageProviderForcedExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStorageProviderForcedExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStorageProviderForcedExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStorageProviderForcedExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStorageProviderForcedExit.Merge(m, src)
}
func (m *EventStorageProviderForcedExit) XXX_Size() int {
	return m.Size()
}
func (m *EventStorageProviderForcedExit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStorageProviderForcedExit.DiscardUnknown(m)
}

var xxx_messageInfo_EventStorageProviderForcedExit proto.InternalMessageInfo

func (m *EventStorageProviderForcedExit) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

type EventSettleGlobalVirtualGroupFamily struct {
	// The id of global virtual group family, which is auto generated by blockchain
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the primary sp who will receive the fund
	SpId uint32 `protobuf:"varint,2,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
	// The funding address of the sp
	SpFundingAddress string `protobuf:"bytes,3,opt,name=sp_funding_address,json=spFundingAddress,proto3" json:"sp_funding_address,omitempty"`
	// The amount the fund to send to sp
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *EventSettleGlobalVirtualGroupFamily) Reset()         { *m = EventSettleGlobalVirtualGroupFamily{} }
func (m *EventSettleGlobalVirtualGroupFamily) String() string { return proto.CompactTextString(m) }
func (*EventSettleGlobalVirtualGroupFamily) ProtoMessage()    {}
func (*EventSettleGlobalVirtualGroupFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{18}
}
func (m *EventSettleGlobalVirtualGroupFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSettleGlobalVirtualGroupFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSettleGlobalVirtualGroupFamily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSettleGlobalVirtualGroupFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSettleGlobalVirtualGroupFamily.Merge(m, src)
}
func (m *EventSettleGlobalVirtualGroupFamily) XXX_Size() int {
	return m.Size()
}
func (m *EventSettleGlobalVirtualGroupFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSettleGlobalVirtualGroupFamily.DiscardUnknown(m)
}

var xxx_messageInfo_EventSettleGlobalVirtualGroupFamily proto.InternalMessageInfo

func (m *EventSettleGlobalVirtualGroupFamily) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventSettleGlobalVirtualGroupFamily) GetSpId() uint32 {
	if m != nil {
		return m.SpId
	}
	return 0
}

func (m *EventSettleGlobalVirtualGroupFamily) GetSpFundingAddress() string {
	if m != nil {
		return m.SpFundingAddress
	}
	return ""
}

type EventSettleGlobalVirtualGroup struct {
	// The id of global virtual group, which is auto generated by blockchain
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ids of the secondary sps who will receive the fund
	SpIds []uint32 `protobuf:"varint,2,rep,packed,name=sp_ids,json=spIds,proto3" json:"sp_ids,omitempty"`
	// The funding address of the sps
	SpFundingAddresses []string `protobuf:"bytes,3,rep,name=sp_funding_addresses,json=spFundingAddresses,proto3" json:"sp_funding_addresses,omitempty"`
	// The amount the fund to send to each sp
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *EventSettleGlobalVirtualGroup) Reset()         { *m = EventSettleGlobalVirtualGroup{} }
func (m *EventSettleGlobalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventSettleGlobalVirtualGroup) ProtoMessage()    {}
func (*EventSettleGlobalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{19}
}
func (m *EventSettleGlobalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSettleGlobalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSettleGlobalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSettleGlobalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSettleGlobalVirtualGroup.Merge(m, src)
}
func (m *EventSettleGlobalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventSettleGlobalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSettleGlobalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventSettleGlobalVirtualGroup proto.InternalMessageInfo

func (m *EventSettleGlobalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventSettleGlobalVirtualGroup) GetSpIds() []uint32 {
	if m != nil {
		return m.SpIds
	}
	return nil
}

func (m *EventSettleGlobalVirtualGroup) GetSpFundingAddresses() []string {
	if m != nil {
		return m.SpFundingAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*EventCreateGlobalVirtualGroup)(nil), "greenfield.virtualgroup.EventCreateGlobalVirtualGroup")
	proto.RegisterType((*EventUpdateGlobalVirtualGroup)(nil), "greenfield.virtualgroup.EventUpdateGlobalVirtualGroup")
	proto.RegisterType((*EventDeleteGlobalVirtualGroup)(nil), "greenfield.virtualgroup.EventDeleteGlobalVirtualGroup")
	proto.RegisterType((*EventCreateGlobalVirtualGroupFamily)(nil), "greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily")
	proto.RegisterType((*EventUpdateGlobalVirtualGroupFamily)(nil), "greenfield.virtualgroup.EventUpdateGlobalVirtualGroupFamily")
	proto.RegisterType((*EventDeleteGlobalVirtualGroupFamily)(nil), "greenfield.virtualgroup.EventDeleteGlobalVirtualGroupFamily")
	proto.RegisterType((*EventCreateLocalVirtualGroup)(nil), "greenfield.virtualgroup.EventCreateLocalVirtualGroup")
	proto.RegisterType((*EventUpdateLocalVirtualGroup)(nil), "greenfield.virtualgroup.EventUpdateLocalVirtualGroup")
	proto.RegisterType((*EventDeleteLocalVirtualGroup)(nil), "greenfield.virtualgroup.EventDeleteLocalVirtualGroup")
	proto.RegisterType((*EventSwapOut)(nil), "greenfield.virtualgroup.EventSwapOut")
	proto.RegisterType((*EventCompleteSwapOut)(nil), "greenfield.virtualgroup.EventCompleteSwapOut")
	proto.RegisterType((*EventCancelSwapOut)(nil), "greenfield.virtualgroup.EventCancelSwapOut")
	proto.RegisterType((*EventStorageProviderExit)(nil), "greenfield.virtualgroup.EventStorageProviderExit")
	proto.RegisterType((*EventCompleteStorageProviderExit)(nil), "greenfield.virtualgroup.EventCompleteStorageProviderExit")
	proto.RegisterType((*EventReserveSwapIn)(nil), "greenfield.virtualgroup.EventReserveSwapIn")
	proto.RegisterType((*EventCompleteSwapIn)(nil), "greenfield.virtualgroup.EventCompleteSwapIn")
	proto.RegisterType((*EventCancelSwapIn)(nil), "greenfield.virtualgroup.EventCancelSwapIn")
	proto.RegisterType((*EventStorageProviderForcedExit)(nil), "greenfield.virtualgroup.EventStorageProviderForcedExit")
	proto.RegisterType((*EventSettleGlobalVirtualGroupFamily)(nil), "greenfield.virtualgroup.EventSettleGlobalVirtualGroupFamily")
	proto.RegisterType((*EventSettleGlobalVirtualGroup)(nil), "greenfield.virtualgroup.EventSettleGlobalVirtualGroup")
}

func init() {
	proto.RegisterFile("greenfield/virtualgroup/events.proto", fileDescriptor_ece39ea12016bd5b)
}

var fileDescriptor_ece39ea12016bd5b = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xae, 0x9d, 0x10, 0xbf, 0xc4, 0x49, 0xba, 0x71, 0xf0, 0x92, 0x12, 0xc7, 0x5a, 0x50,
	0xf1, 0x25, 0xf6, 0x01, 0x2a, 0x90, 0xe0, 0x42, 0xda, 0xa6, 0x32, 0x42, 0x10, 0xd9, 0x2d, 0x12,
	0x5c, 0x56, 0xeb, 0x9d, 0xc9, 0x66, 0x54, 0xef, 0xce, 0x6a, 0x66, 0x1c, 0x92, 0xfe, 0x04, 0x2e,
	0x20, 0x7e, 0x4b, 0x7f, 0x00, 0xc7, 0x1e, 0xab, 0x9e, 0x10, 0x87, 0xaa, 0x4a, 0x38, 0xc0, 0x09,
	0xce, 0x48, 0x08, 0xb4, 0x33, 0x63, 0xc7, 0xf6, 0xda, 0xae, 0xeb, 0x24, 0x82, 0xf6, 0x94, 0xec,
	0xdb, 0x99, 0x37, 0xef, 0xfb, 0xde, 0x37, 0xef, 0x3d, 0x2f, 0xbc, 0x1b, 0x30, 0x8c, 0xa3, 0x03,
	0x82, 0xdb, 0xa8, 0x76, 0x44, 0x98, 0xe8, 0x78, 0xed, 0x80, 0xd1, 0x4e, 0x5c, 0xc3, 0x47, 0x38,
	0x12, 0xbc, 0x1a, 0x33, 0x2a, 0xa8, 0x55, 0x3c, 0x5f, 0x55, 0xed, 0x5f, 0xb5, 0xf9, 0x96, 0x4f,
	0x79, 0x48, 0xb9, 0x2b, 0x97, 0xd5, 0xd4, 0x83, 0xda, 0xb3, 0x59, 0x08, 0x68, 0x40, 0x95, 0x3d,
	0xf9, 0x4f, 0x59, 0x9d, 0x3f, 0x4d, 0xd8, 0xba, 0x93, 0xb8, 0xbe, 0xc5, 0xb0, 0x27, 0xf0, 0xdd,
	0x36, 0x6d, 0x79, 0xed, 0xaf, 0x94, 0xcb, 0xbb, 0x89, 0x4b, 0x6b, 0x05, 0x4c, 0x82, 0x6c, 0xa3,
	0x6c, 0x54, 0xf2, 0x0d, 0x93, 0x20, 0xeb, 0x3a, 0xe4, 0x0e, 0xbc, 0x90, 0xb4, 0x4f, 0x5c, 0x82,
	0x6c, 0x53, 0x9a, 0x17, 0x95, 0xa1, 0x8e, 0x2c, 0x07, 0xf2, 0x31, 0x23, 0xa1, 0xc7, 0x4e, 0x5c,
	0x1e, 0x27, 0x0b, 0x32, 0x72, 0xc1, 0x92, 0x36, 0x36, 0xe3, 0x3a, 0xb2, 0x2a, 0xb0, 0xc6, 0xb1,
	0x4f, 0x23, 0xd4, 0x5b, 0xc5, 0xed, 0x6c, 0x39, 0x53, 0xc9, 0x37, 0x56, 0x7a, 0xf6, 0x64, 0x21,
	0xb7, 0xb6, 0x61, 0x89, 0x0b, 0xca, 0x30, 0x72, 0x39, 0x79, 0x88, 0xed, 0xf9, 0xb2, 0x51, 0xc9,
	0x36, 0x40, 0x99, 0x9a, 0xe4, 0x21, 0xb6, 0xf6, 0xa1, 0xa8, 0xe1, 0xbb, 0xb1, 0x77, 0x12, 0xe2,
	0x48, 0xb8, 0x1e, 0x42, 0x0c, 0x73, 0x6e, 0x2f, 0x94, 0x8d, 0x4a, 0x6e, 0xd7, 0x7e, 0xfa, 0x68,
	0xa7, 0xa0, 0x69, 0xf8, 0x54, 0xbd, 0x69, 0x0a, 0x46, 0xa2, 0xa0, 0xb1, 0xa1, 0x37, 0xee, 0xab,
	0x7d, 0xfa, 0xa5, 0xe5, 0x41, 0x5e, 0x50, 0xe1, 0xb5, 0x5d, 0x84, 0x63, 0xca, 0x89, 0xb0, 0xdf,
	0x90, 0x7e, 0x3e, 0x79, 0xfc, 0x6c, 0x7b, 0xee, 0x97, 0x67, 0xdb, 0x37, 0x02, 0x22, 0x0e, 0x3b,
	0xad, 0xaa, 0x4f, 0x43, 0xcd, 0xae, 0xfe, 0xb3, 0xc3, 0xd1, 0x83, 0x9a, 0x38, 0x89, 0x31, 0xaf,
	0xd6, 0x23, 0xf1, 0xf4, 0xd1, 0x0e, 0xe8, 0x53, 0xeb, 0x91, 0x68, 0x2c, 0x4b, 0x97, 0xb7, 0x95,
	0x47, 0xe7, 0x1f, 0x43, 0x53, 0x7e, 0x3f, 0x46, 0xd3, 0x51, 0xbe, 0x05, 0x0a, 0xb4, 0xa2, 0xc1,
	0x94, 0x34, 0xe4, 0xa4, 0x45, 0xb2, 0x90, 0x8a, 0x39, 0x73, 0xd9, 0x31, 0xa7, 0xf3, 0x9a, 0x9d,
	0x2e, 0xaf, 0xf3, 0xa3, 0xf2, 0xea, 0x34, 0x35, 0x01, 0xb7, 0x71, 0x1b, 0x4f, 0x45, 0x40, 0xea,
	0x78, 0x33, 0x75, 0xbc, 0xf3, 0xab, 0x01, 0xef, 0x4c, 0x54, 0xf2, 0x9e, 0x14, 0xe9, 0x2c, 0xbe,
	0x27, 0xe9, 0x2c, 0x33, 0x9b, 0xce, 0x3e, 0x04, 0x3b, 0x90, 0x11, 0xba, 0x5d, 0xc7, 0xf2, 0x02,
	0xf7, 0x5d, 0x86, 0x8d, 0x20, 0x85, 0x20, 0xe1, 0xee, 0xc7, 0x2e, 0xcc, 0x71, 0xea, 0xb9, 0x00,
	0xcc, 0x49, 0x41, 0x65, 0x26, 0x05, 0xf5, 0xb5, 0x8e, 0x69, 0x5c, 0x42, 0x67, 0x8f, 0xc9, 0xf9,
	0xc9, 0x80, 0xb7, 0xfb, 0xd2, 0xfa, 0x39, 0xf5, 0x5f, 0xa0, 0x95, 0x8f, 0x20, 0xd7, 0xea, 0xf8,
	0x0f, 0xb0, 0xe8, 0x3a, 0xcc, 0xed, 0x5e, 0xd7, 0x37, 0x21, 0x7b, 0x9f, 0x48, 0x9d, 0x2f, 0xe9,
	0x4c, 0x25, 0x8f, 0x8d, 0x45, 0xb5, 0xba, 0x8e, 0xac, 0x9b, 0x50, 0x1c, 0x03, 0x5f, 0x97, 0xb1,
	0xc2, 0x28, 0xf4, 0xc3, 0x55, 0x2a, 0x3b, 0x5c, 0xa5, 0xce, 0x21, 0xa8, 0x94, 0xbd, 0x8a, 0x10,
	0x0e, 0x35, 0x02, 0x95, 0xe0, 0x2b, 0x44, 0xe0, 0x9c, 0x19, 0xb0, 0x2c, 0x8f, 0x6a, 0x7e, 0xeb,
	0xc5, 0x5f, 0x76, 0x84, 0x55, 0x85, 0xf5, 0x24, 0x10, 0x2f, 0xc0, 0x49, 0x57, 0x3b, 0x22, 0x08,
	0x33, 0xb7, 0x77, 0xd6, 0x35, 0xfd, 0x6a, 0x5f, 0xbf, 0xa9, 0x23, 0x6b, 0x17, 0x4a, 0x23, 0x29,
	0x18, 0x6e, 0x5a, 0x9b, 0xc1, 0x18, 0x99, 0x5e, 0xe0, 0x22, 0x58, 0x37, 0x60, 0x95, 0x77, 0x7c,
	0x1f, 0x73, 0x4e, 0xd9, 0x40, 0xa5, 0xcc, 0xf7, 0xcc, 0x52, 0xd5, 0x7f, 0x19, 0x50, 0x50, 0xaa,
	0xa6, 0x61, 0x9c, 0x50, 0x3a, 0x2b, 0xda, 0x9b, 0x50, 0xe4, 0xcc, 0x77, 0x47, 0xed, 0x51, 0x30,
	0x0b, 0x9c, 0xf9, 0xcd, 0x19, 0x48, 0xca, 0x5c, 0x88, 0xa4, 0x89, 0x25, 0xec, 0x77, 0x03, 0x2c,
	0x05, 0xde, 0x8b, 0x7c, 0xdc, 0x7e, 0xad, 0x13, 0xfd, 0xbd, 0x01, 0xb6, 0x92, 0xf3, 0x60, 0xfc,
	0x77, 0x8e, 0xc9, 0xcb, 0x23, 0xbe, 0x05, 0x6b, 0x34, 0xc6, 0xcc, 0x13, 0x94, 0xf5, 0xfa, 0x8f,
	0xf9, 0x82, 0xfe, 0xb3, 0xda, 0xdd, 0xa1, 0xcd, 0xce, 0x1f, 0x26, 0x94, 0x07, 0xa5, 0xf7, 0x3f,
	0x89, 0xcc, 0x6a, 0x80, 0x9d, 0x3a, 0x74, 0xda, 0x36, 0xfb, 0xe6, 0x50, 0x4c, 0x63, 0xe7, 0xb9,
	0xec, 0xa5, 0xcf, 0x46, 0xdb, 0xb0, 0x74, 0x40, 0x99, 0x8f, 0x91, 0x8b, 0x8f, 0x89, 0x90, 0x53,
	0xea, 0x62, 0x03, 0x94, 0x29, 0x21, 0xd3, 0xf9, 0xce, 0xd4, 0x7a, 0x6f, 0x60, 0x8e, 0xd9, 0x91,
	0xbc, 0xeb, 0xf5, 0xe8, 0x3f, 0xd1, 0xfb, 0x8c, 0xfd, 0xa1, 0x0c, 0xcb, 0xc2, 0x63, 0x01, 0x16,
	0x03, 0x52, 0x07, 0x65, 0x93, 0xa3, 0xc3, 0x7b, 0xb0, 0x8a, 0x8f, 0x63, 0xc2, 0x3c, 0x41, 0x68,
	0xe4, 0x0a, 0x12, 0x76, 0xc7, 0xf5, 0x95, 0x73, 0xf3, 0x3d, 0x12, 0x62, 0xe7, 0x6f, 0x03, 0xd6,
	0x53, 0x95, 0x6f, 0x06, 0x36, 0x3e, 0x86, 0xcd, 0x6e, 0x48, 0x63, 0x6b, 0x5f, 0x51, 0x07, 0x78,
	0x25, 0xe5, 0x6f, 0x02, 0x95, 0xd9, 0xf1, 0x54, 0x3a, 0xcf, 0x0d, 0xb8, 0x36, 0x54, 0xfc, 0x5e,
	0x33, 0x2d, 0x38, 0xfb, 0x50, 0x1a, 0x55, 0xf2, 0xf6, 0x7a, 0x37, 0xe2, 0x65, 0xe1, 0x3a, 0xbf,
	0x75, 0x87, 0xde, 0x26, 0x16, 0xa2, 0x3d, 0xfd, 0x80, 0xb9, 0x0e, 0xf3, 0xfd, 0x83, 0x65, 0x96,
	0x27, 0x00, 0xf6, 0xc0, 0xe2, 0xb1, 0x7b, 0xd0, 0x89, 0x10, 0x89, 0x82, 0xa9, 0x0b, 0xcc, 0x1a,
	0x8f, 0xf7, 0xd4, 0x96, 0x6e, 0x69, 0xb9, 0x07, 0x0b, 0x5e, 0x48, 0x3b, 0xd1, 0xe5, 0xd4, 0x14,
	0xed, 0x2b, 0x81, 0xba, 0x35, 0x11, 0x6a, 0x0a, 0xe4, 0x06, 0x2c, 0xe8, 0x5f, 0x5b, 0xa6, 0xec,
	0x58, 0xf3, 0x5c, 0x76, 0xa8, 0xcf, 0xa0, 0x90, 0x86, 0x89, 0x55, 0x5b, 0x9b, 0x04, 0xd4, 0x1a,
	0x06, 0x8a, 0xaf, 0x08, 0xea, 0xee, 0x17, 0x8f, 0x4f, 0x4b, 0xc6, 0x93, 0xd3, 0x92, 0xf1, 0xfc,
	0xb4, 0x64, 0xfc, 0x70, 0x56, 0x9a, 0x7b, 0x72, 0x56, 0x9a, 0xfb, 0xf9, 0xac, 0x34, 0xf7, 0xcd,
	0x07, 0x7d, 0x7e, 0x5b, 0x51, 0x6b, 0xc7, 0x3f, 0xf4, 0x48, 0x54, 0xeb, 0xfb, 0x34, 0x72, 0x3c,
	0xf8, 0x71, 0x44, 0x9e, 0xd4, 0x5a, 0x90, 0x9f, 0x34, 0xde, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x4c, 0x7d, 0xe7, 0x95, 0x44, 0x11, 0x00, 0x00,
}

func (m *EventCreateGlobalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateGlobalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateGlobalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalDeposit.Size()
		i -= size
		if _, err := m.TotalDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.VirtualPaymentAddress) > 0 {
		i -= len(m.VirtualPaymentAddress)
		copy(dAtA[i:], m.VirtualPaymentAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VirtualPaymentAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.StoredSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StoredSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SecondarySpIds) > 0 {
		dAtA2 := make([]byte, len(m.SecondarySpIds)*10)
		var j1 int
		for _, num := range m.SecondarySpIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvents(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.PrimarySpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x18
	}
	if m.FamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateGlobalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateGlobalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateGlobalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecondarySpIds) > 0 {
		dAtA4 := make([]byte, len(m.SecondarySpIds)*10)
		var j3 int
		for _, num := range m.SecondarySpIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintEvents(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if m.PrimarySpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.TotalDeposit.Size()
		i -= size
		if _, err := m.TotalDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.StoreSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StoreSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteGlobalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteGlobalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteGlobalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrimarySpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateGlobalVirtualGroupFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateGlobalVirtualGroupFamily) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateGlobalVirtualGroupFamily) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA6 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j5 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintEvents(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VirtualPaymentAddress) > 0 {
		i -= len(m.VirtualPaymentAddress)
		copy(dAtA[i:], m.VirtualPaymentAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VirtualPaymentAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PrimarySpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateGlobalVirtualGroupFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateGlobalVirtualGroupFamily) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateGlobalVirtualGroupFamily) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA8 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j7 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintEvents(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x1a
	}
	if m.PrimarySpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteGlobalVirtualGroupFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteGlobalVirtualGroupFamily) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteGlobalVirtualGroupFamily) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrimarySpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateLocalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateLocalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateLocalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoredSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StoredSize))
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.BucketId.Size()
		i -= size
		if _, err := m.BucketId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateLocalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateLocalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateLocalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoredSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StoredSize))
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.BucketId.Size()
		i -= size
		if _, err := m.BucketId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteLocalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteLocalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteLocalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BucketId.Size()
		i -= size
		if _, err := m.BucketId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSwapOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSwapOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSwapOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuccessorSpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SuccessorSpId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA10 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j9 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintEvents(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x1a
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCompleteSwapOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCompleteSwapOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCompleteSwapOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA12 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j11 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintEvents(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x22
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x18
	}
	if m.SrcStorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SrcStorageProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelSwapOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelSwapOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelSwapOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuccessorSpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SuccessorSpId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA14 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j13 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintEvents(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x1a
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventStorageProviderExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStorageProviderExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStorageProviderExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCompleteStorageProviderExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCompleteStorageProviderExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCompleteStorageProviderExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForcedExit {
		i--
		if m.ForcedExit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.TotalDeposit.Size()
		i -= size
		if _, err := m.TotalDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.StorageProviderAddress) > 0 {
		i -= len(m.StorageProviderAddress)
		copy(dAtA[i:], m.StorageProviderAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StorageProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventReserveSwapIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReserveSwapIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReserveSwapIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTime != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExpirationTime))
		i--
		dAtA[i] = 0x28
	}
	if m.TargetSpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TargetSpId))
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x18
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCompleteSwapIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCompleteSwapIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCompleteSwapIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x18
	}
	if m.TargetStorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TargetStorageProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelSwapIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelSwapIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelSwapIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetSpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TargetSpId))
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x18
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventStorageProviderForcedExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStorageProviderForcedExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStorageProviderForcedExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSettleGlobalVirtualGroupFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSettleGlobalVirtualGroupFamily) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSettleGlobalVirtualGroupFamily) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.SpFundingAddress) > 0 {
		i -= len(m.SpFundingAddress)
		copy(dAtA[i:], m.SpFundingAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SpFundingAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SpId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSettleGlobalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSettleGlobalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSettleGlobalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.SpFundingAddresses) > 0 {
		for iNdEx := len(m.SpFundingAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SpFundingAddresses[iNdEx])
			copy(dAtA[i:], m.SpFundingAddresses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.SpFundingAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SpIds) > 0 {
		dAtA16 := make([]byte, len(m.SpIds)*10)
		var j15 int
		for _, num := range m.SpIds {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintEvents(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateGlobalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.FamilyId != 0 {
		n += 1 + sovEvents(uint64(m.FamilyId))
	}
	if m.PrimarySpId != 0 {
		n += 1 + sovEvents(uint64(m.PrimarySpId))
	}
	if len(m.SecondarySpIds) > 0 {
		l = 0
		for _, e := range m.SecondarySpIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	if m.StoredSize != 0 {
		n += 1 + sovEvents(uint64(m.StoredSize))
	}
	l = len(m.VirtualPaymentAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TotalDeposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventUpdateGlobalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.StoreSize != 0 {
		n += 1 + sovEvents(uint64(m.StoreSize))
	}
	l = m.TotalDeposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.PrimarySpId != 0 {
		n += 1 + sovEvents(uint64(m.PrimarySpId))
	}
	if len(m.SecondarySpIds) > 0 {
		l = 0
		for _, e := range m.SecondarySpIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	return n
}

func (m *EventDeleteGlobalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.PrimarySpId != 0 {
		n += 1 + sovEvents(uint64(m.PrimarySpId))
	}
	return n
}

func (m *EventCreateGlobalVirtualGroupFamily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.PrimarySpId != 0 {
		n += 1 + sovEvents(uint64(m.PrimarySpId))
	}
	l = len(m.VirtualPaymentAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	return n
}

func (m *EventUpdateGlobalVirtualGroupFamily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.PrimarySpId != 0 {
		n += 1 + sovEvents(uint64(m.PrimarySpId))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	return n
}

func (m *EventDeleteGlobalVirtualGroupFamily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.PrimarySpId != 0 {
		n += 1 + sovEvents(uint64(m.PrimarySpId))
	}
	return n
}

func (m *EventCreateLocalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = m.BucketId.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupId))
	}
	if m.StoredSize != 0 {
		n += 1 + sovEvents(uint64(m.StoredSize))
	}
	return n
}

func (m *EventUpdateLocalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = m.BucketId.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupId))
	}
	if m.StoredSize != 0 {
		n += 1 + sovEvents(uint64(m.StoredSize))
	}
	return n
}

func (m *EventDeleteLocalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = m.BucketId.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventSwapOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	if m.SuccessorSpId != 0 {
		n += 1 + sovEvents(uint64(m.SuccessorSpId))
	}
	return n
}

func (m *EventCompleteSwapOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.SrcStorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.SrcStorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	return n
}

func (m *EventCancelSwapOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	if m.SuccessorSpId != 0 {
		n += 1 + sovEvents(uint64(m.SuccessorSpId))
	}
	return n
}

func (m *EventStorageProviderExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCompleteStorageProviderExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StorageProviderAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TotalDeposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.ForcedExit {
		n += 2
	}
	return n
}

func (m *EventReserveSwapIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupId))
	}
	if m.TargetSpId != 0 {
		n += 1 + sovEvents(uint64(m.TargetSpId))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovEvents(uint64(m.ExpirationTime))
	}
	return n
}

func (m *EventCompleteSwapIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.TargetStorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.TargetStorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupId))
	}
	return n
}

func (m *EventCancelSwapIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupId))
	}
	if m.TargetSpId != 0 {
		n += 1 + sovEvents(uint64(m.TargetSpId))
	}
	return n
}

func (m *EventStorageProviderForcedExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	return n
}

func (m *EventSettleGlobalVirtualGroupFamily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.SpId != 0 {
		n += 1 + sovEvents(uint64(m.SpId))
	}
	l = len(m.SpFundingAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventSettleGlobalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if len(m.SpIds) > 0 {
		l = 0
		for _, e := range m.SpIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	if len(m.SpFundingAddresses) > 0 {
		for _, s := range m.SpFundingAddresses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateGlobalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateGlobalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateGlobalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyId", wireType)
			}
			m.FamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SecondarySpIds = append(m.SecondarySpIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SecondarySpIds) == 0 {
					m.SecondarySpIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SecondarySpIds = append(m.SecondarySpIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondarySpIds", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSize", wireType)
			}
			m.StoredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateGlobalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateGlobalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateGlobalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSize", wireType)
			}
			m.StoreSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SecondarySpIds = append(m.SecondarySpIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SecondarySpIds) == 0 {
					m.SecondarySpIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SecondarySpIds = append(m.SecondarySpIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondarySpIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteGlobalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteGlobalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteGlobalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateGlobalVirtualGroupFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateGlobalVirtualGroupFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateGlobalVirtualGroupFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateGlobalVirtualGroupFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateGlobalVirtualGroupFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateGlobalVirtualGroupFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteGlobalVirtualGroupFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteGlobalVirtualGroupFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteGlobalVirtualGroupFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateLocalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateLocalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateLocalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BucketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSize", wireType)
			}
			m.StoredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateLocalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateLocalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateLocalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BucketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSize", wireType)
			}
			m.StoredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteLocalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteLocalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteLocalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BucketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSwapOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSwapOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSwapOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessorSpId", wireType)
			}
			m.SuccessorSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessorSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCompleteSwapOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCompleteSwapOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCompleteSwapOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcStorageProviderId", wireType)
			}
			m.SrcStorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcStorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelSwapOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelSwapOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelSwapOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessorSpId", wireType)
			}
			m.SuccessorSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessorSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStorageProviderExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStorageProviderExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStorageProviderExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCompleteStorageProviderExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCompleteStorageProviderExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCompleteStorageProviderExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcedExit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcedExit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReserveSwapIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReserveSwapIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReserveSwapIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSpId", wireType)
			}
			m.TargetSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCompleteSwapIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCompleteSwapIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCompleteSwapIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStorageProviderId", wireType)
			}
			m.TargetStorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetStorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelSwapIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelSwapIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelSwapIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSpId", wireType)
			}
			m.TargetSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStorageProviderForcedExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStorageProviderForcedExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStorageProviderForcedExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSettleGlobalVirtualGroupFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSettleGlobalVirtualGroupFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSettleGlobalVirtualGroupFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			m.SpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpFundingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpFundingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSettleGlobalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSettleGlobalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSettleGlobalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SpIds = append(m.SpIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SpIds) == 0 {
					m.SpIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SpIds = append(m.SpIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SpIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpFundingAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpFundingAddresses = append(m.SpFundingAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
