// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/virtualgroup/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCreateGlobalVirtualGroup struct {
	// The unique id of global virtual group, which is generated by blockchain
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the global virtual group family where the gvg belongs
	FamilyId uint32 `protobuf:"varint,2,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	// The id of the primary sp who create this global virtual group
	PrimarySpId uint32 `protobuf:"varint,3,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
	// The ids of the secondary sps which belongs to this global virtual group
	SecondarySpIds []uint32 `protobuf:"varint,4,rep,packed,name=secondary_sp_ids,json=secondarySpIds,proto3" json:"secondary_sp_ids,omitempty"`
	// The store size of all the objects stores in this global virtual group
	StoredSize uint64 `protobuf:"varint,5,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
	// The virtual payment address of this global virtual group, which is auto generated by blockchain
	// And, all users' payment flows will flow to this account
	VirtualPaymentAddress string `protobuf:"bytes,6,opt,name=virtual_payment_address,json=virtualPaymentAddress,proto3" json:"virtual_payment_address,omitempty"`
	// The total amount of the staking for this global virtual group
	TotalDeposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=total_deposit,json=totalDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_deposit"`
}

func (m *EventCreateGlobalVirtualGroup) Reset()         { *m = EventCreateGlobalVirtualGroup{} }
func (m *EventCreateGlobalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventCreateGlobalVirtualGroup) ProtoMessage()    {}
func (*EventCreateGlobalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{0}
}
func (m *EventCreateGlobalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateGlobalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateGlobalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateGlobalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateGlobalVirtualGroup.Merge(m, src)
}
func (m *EventCreateGlobalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateGlobalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateGlobalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateGlobalVirtualGroup proto.InternalMessageInfo

func (m *EventCreateGlobalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroup) GetFamilyId() uint32 {
	if m != nil {
		return m.FamilyId
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroup) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroup) GetSecondarySpIds() []uint32 {
	if m != nil {
		return m.SecondarySpIds
	}
	return nil
}

func (m *EventCreateGlobalVirtualGroup) GetStoredSize() uint64 {
	if m != nil {
		return m.StoredSize
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroup) GetVirtualPaymentAddress() string {
	if m != nil {
		return m.VirtualPaymentAddress
	}
	return ""
}

type EventCreateGlobalVirtualGroupFamily struct {
	// The id of global virtual group family, which is auto generated by blockchain
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The virtual payment address of this global virtual group family, which is auto generated by blockcahin
	// all users' read quota payment flows will flow to this account.
	VirtualPaymentAddress string `protobuf:"bytes,2,opt,name=virtual_payment_address,json=virtualPaymentAddress,proto3" json:"virtual_payment_address,omitempty"`
}

func (m *EventCreateGlobalVirtualGroupFamily) Reset()         { *m = EventCreateGlobalVirtualGroupFamily{} }
func (m *EventCreateGlobalVirtualGroupFamily) String() string { return proto.CompactTextString(m) }
func (*EventCreateGlobalVirtualGroupFamily) ProtoMessage()    {}
func (*EventCreateGlobalVirtualGroupFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{1}
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateGlobalVirtualGroupFamily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateGlobalVirtualGroupFamily.Merge(m, src)
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateGlobalVirtualGroupFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateGlobalVirtualGroupFamily.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateGlobalVirtualGroupFamily proto.InternalMessageInfo

func (m *EventCreateGlobalVirtualGroupFamily) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateGlobalVirtualGroupFamily) GetVirtualPaymentAddress() string {
	if m != nil {
		return m.VirtualPaymentAddress
	}
	return ""
}

type EventDeleteGlobalVirtualGroup struct {
	// The id of global virtual group, which has been deleted
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EventDeleteGlobalVirtualGroup) Reset()         { *m = EventDeleteGlobalVirtualGroup{} }
func (m *EventDeleteGlobalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventDeleteGlobalVirtualGroup) ProtoMessage()    {}
func (*EventDeleteGlobalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{2}
}
func (m *EventDeleteGlobalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteGlobalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteGlobalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteGlobalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteGlobalVirtualGroup.Merge(m, src)
}
func (m *EventDeleteGlobalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteGlobalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteGlobalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteGlobalVirtualGroup proto.InternalMessageInfo

func (m *EventDeleteGlobalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EventUpdateGlobalVirtualGroup struct {
	// The id of global virtual group, which has been updated
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The store size of all the objects stores in this global virtual group
	StoreSize uint64 `protobuf:"varint,2,opt,name=store_size,json=storeSize,proto3" json:"store_size,omitempty"`
	// The total amount of the staking for this global virtual group
	TotalDeposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_deposit,json=totalDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_deposit"`
}

func (m *EventUpdateGlobalVirtualGroup) Reset()         { *m = EventUpdateGlobalVirtualGroup{} }
func (m *EventUpdateGlobalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventUpdateGlobalVirtualGroup) ProtoMessage()    {}
func (*EventUpdateGlobalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{3}
}
func (m *EventUpdateGlobalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateGlobalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateGlobalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateGlobalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateGlobalVirtualGroup.Merge(m, src)
}
func (m *EventUpdateGlobalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateGlobalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateGlobalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateGlobalVirtualGroup proto.InternalMessageInfo

func (m *EventUpdateGlobalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventUpdateGlobalVirtualGroup) GetStoreSize() uint64 {
	if m != nil {
		return m.StoreSize
	}
	return 0
}

type EventCreateLocalVirtualGroup struct {
	// The id of the local virtual group and this ID is unique within the bucket
	// and different buckets will have the same ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the bucket
	BucketId Uint `protobuf:"bytes,2,opt,name=bucket_id,json=bucketId,proto3,customtype=Uint" json:"bucket_id"`
	// The id of the global virtual group
	GlobalVirtualGroupId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
	// The stored size of all the objects stores in this lvg
	StoredSize uint64 `protobuf:"varint,4,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
}

func (m *EventCreateLocalVirtualGroup) Reset()         { *m = EventCreateLocalVirtualGroup{} }
func (m *EventCreateLocalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventCreateLocalVirtualGroup) ProtoMessage()    {}
func (*EventCreateLocalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{4}
}
func (m *EventCreateLocalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateLocalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateLocalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateLocalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateLocalVirtualGroup.Merge(m, src)
}
func (m *EventCreateLocalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateLocalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateLocalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateLocalVirtualGroup proto.InternalMessageInfo

func (m *EventCreateLocalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateLocalVirtualGroup) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

func (m *EventCreateLocalVirtualGroup) GetStoredSize() uint64 {
	if m != nil {
		return m.StoredSize
	}
	return 0
}

type EventUpdateLocalVirtualGroup struct {
	// The id of the local virtual group
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the global virtual group
	GlobalVirtualGroupId uint32 `protobuf:"varint,2,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
	// The stored size of all the objects stores in this lvg
	StoredSize uint64 `protobuf:"varint,3,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
}

func (m *EventUpdateLocalVirtualGroup) Reset()         { *m = EventUpdateLocalVirtualGroup{} }
func (m *EventUpdateLocalVirtualGroup) String() string { return proto.CompactTextString(m) }
func (*EventUpdateLocalVirtualGroup) ProtoMessage()    {}
func (*EventUpdateLocalVirtualGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{5}
}
func (m *EventUpdateLocalVirtualGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateLocalVirtualGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateLocalVirtualGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateLocalVirtualGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateLocalVirtualGroup.Merge(m, src)
}
func (m *EventUpdateLocalVirtualGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateLocalVirtualGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateLocalVirtualGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateLocalVirtualGroup proto.InternalMessageInfo

func (m *EventUpdateLocalVirtualGroup) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventUpdateLocalVirtualGroup) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

func (m *EventUpdateLocalVirtualGroup) GetStoredSize() uint64 {
	if m != nil {
		return m.StoredSize
	}
	return 0
}

type EventSwapOut struct {
	// The id of the storage provider who wants to swap out
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the gvg family which the storage provider wants to swap out as primary sp
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,2,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The ids of the gvgs which the storage provider wants to swap out as secondary sp
	GlobalVirtualGroupIds []uint32 `protobuf:"varint,3,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
	// The id of the successor sp who take over this family or these gvgs
	SuccessorSpId uint32 `protobuf:"varint,4,opt,name=successor_sp_id,json=successorSpId,proto3" json:"successor_sp_id,omitempty"`
}

func (m *EventSwapOut) Reset()         { *m = EventSwapOut{} }
func (m *EventSwapOut) String() string { return proto.CompactTextString(m) }
func (*EventSwapOut) ProtoMessage()    {}
func (*EventSwapOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{6}
}
func (m *EventSwapOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSwapOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSwapOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSwapOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSwapOut.Merge(m, src)
}
func (m *EventSwapOut) XXX_Size() int {
	return m.Size()
}
func (m *EventSwapOut) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSwapOut.DiscardUnknown(m)
}

var xxx_messageInfo_EventSwapOut proto.InternalMessageInfo

func (m *EventSwapOut) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventSwapOut) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventSwapOut) GetGlobalVirtualGroupIds() []uint32 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

func (m *EventSwapOut) GetSuccessorSpId() uint32 {
	if m != nil {
		return m.SuccessorSpId
	}
	return 0
}

type EventCompleteSwapOut struct {
	// The id of the storage provider who complete swap out.
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the storage provider who swap out the family or gvgs
	SrcStorageProviderId uint32 `protobuf:"varint,2,opt,name=src_storage_provider_id,json=srcStorageProviderId,proto3" json:"src_storage_provider_id,omitempty"`
	// The id of the gvg family
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The ids of the gvgs
	GlobalVirtualGroupIds []uint32 `protobuf:"varint,4,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
}

func (m *EventCompleteSwapOut) Reset()         { *m = EventCompleteSwapOut{} }
func (m *EventCompleteSwapOut) String() string { return proto.CompactTextString(m) }
func (*EventCompleteSwapOut) ProtoMessage()    {}
func (*EventCompleteSwapOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{7}
}
func (m *EventCompleteSwapOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCompleteSwapOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCompleteSwapOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCompleteSwapOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCompleteSwapOut.Merge(m, src)
}
func (m *EventCompleteSwapOut) XXX_Size() int {
	return m.Size()
}
func (m *EventCompleteSwapOut) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCompleteSwapOut.DiscardUnknown(m)
}

var xxx_messageInfo_EventCompleteSwapOut proto.InternalMessageInfo

func (m *EventCompleteSwapOut) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventCompleteSwapOut) GetSrcStorageProviderId() uint32 {
	if m != nil {
		return m.SrcStorageProviderId
	}
	return 0
}

func (m *EventCompleteSwapOut) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventCompleteSwapOut) GetGlobalVirtualGroupIds() []uint32 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

type EventCancelSwapOut struct {
	// The id of the storage provider who cancel swap out.
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The id of the gvg family
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,2,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// The ids of the gvgs
	GlobalVirtualGroupIds []uint32 `protobuf:"varint,3,rep,packed,name=global_virtual_group_ids,json=globalVirtualGroupIds,proto3" json:"global_virtual_group_ids,omitempty"`
	// The id of the successor sp who take over this family or these gvgs
	SuccessorSpId uint32 `protobuf:"varint,4,opt,name=successor_sp_id,json=successorSpId,proto3" json:"successor_sp_id,omitempty"`
}

func (m *EventCancelSwapOut) Reset()         { *m = EventCancelSwapOut{} }
func (m *EventCancelSwapOut) String() string { return proto.CompactTextString(m) }
func (*EventCancelSwapOut) ProtoMessage()    {}
func (*EventCancelSwapOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{8}
}
func (m *EventCancelSwapOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelSwapOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelSwapOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelSwapOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelSwapOut.Merge(m, src)
}
func (m *EventCancelSwapOut) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelSwapOut) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelSwapOut.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelSwapOut proto.InternalMessageInfo

func (m *EventCancelSwapOut) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventCancelSwapOut) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *EventCancelSwapOut) GetGlobalVirtualGroupIds() []uint32 {
	if m != nil {
		return m.GlobalVirtualGroupIds
	}
	return nil
}

func (m *EventCancelSwapOut) GetSuccessorSpId() uint32 {
	if m != nil {
		return m.SuccessorSpId
	}
	return 0
}

type EventStorageProviderExit struct {
	// The id of the storage provider who wants to exit
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The operator address of the storage provider who wants to exit
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *EventStorageProviderExit) Reset()         { *m = EventStorageProviderExit{} }
func (m *EventStorageProviderExit) String() string { return proto.CompactTextString(m) }
func (*EventStorageProviderExit) ProtoMessage()    {}
func (*EventStorageProviderExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{9}
}
func (m *EventStorageProviderExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStorageProviderExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStorageProviderExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStorageProviderExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStorageProviderExit.Merge(m, src)
}
func (m *EventStorageProviderExit) XXX_Size() int {
	return m.Size()
}
func (m *EventStorageProviderExit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStorageProviderExit.DiscardUnknown(m)
}

var xxx_messageInfo_EventStorageProviderExit proto.InternalMessageInfo

func (m *EventStorageProviderExit) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventStorageProviderExit) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

type EventCompleteStorageProviderExit struct {
	// The id of the storage provider who complete exit
	StorageProviderId uint32 `protobuf:"varint,1,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
	// The operator address which initial the complete exit transaction
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// total_deposit defines the number of tokens deposited by this storage provider for staking.
	TotalDeposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_deposit,json=totalDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_deposit"`
}

func (m *EventCompleteStorageProviderExit) Reset()         { *m = EventCompleteStorageProviderExit{} }
func (m *EventCompleteStorageProviderExit) String() string { return proto.CompactTextString(m) }
func (*EventCompleteStorageProviderExit) ProtoMessage()    {}
func (*EventCompleteStorageProviderExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece39ea12016bd5b, []int{10}
}
func (m *EventCompleteStorageProviderExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCompleteStorageProviderExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCompleteStorageProviderExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCompleteStorageProviderExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCompleteStorageProviderExit.Merge(m, src)
}
func (m *EventCompleteStorageProviderExit) XXX_Size() int {
	return m.Size()
}
func (m *EventCompleteStorageProviderExit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCompleteStorageProviderExit.DiscardUnknown(m)
}

var xxx_messageInfo_EventCompleteStorageProviderExit proto.InternalMessageInfo

func (m *EventCompleteStorageProviderExit) GetStorageProviderId() uint32 {
	if m != nil {
		return m.StorageProviderId
	}
	return 0
}

func (m *EventCompleteStorageProviderExit) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreateGlobalVirtualGroup)(nil), "greenfield.virtualgroup.EventCreateGlobalVirtualGroup")
	proto.RegisterType((*EventCreateGlobalVirtualGroupFamily)(nil), "greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily")
	proto.RegisterType((*EventDeleteGlobalVirtualGroup)(nil), "greenfield.virtualgroup.EventDeleteGlobalVirtualGroup")
	proto.RegisterType((*EventUpdateGlobalVirtualGroup)(nil), "greenfield.virtualgroup.EventUpdateGlobalVirtualGroup")
	proto.RegisterType((*EventCreateLocalVirtualGroup)(nil), "greenfield.virtualgroup.EventCreateLocalVirtualGroup")
	proto.RegisterType((*EventUpdateLocalVirtualGroup)(nil), "greenfield.virtualgroup.EventUpdateLocalVirtualGroup")
	proto.RegisterType((*EventSwapOut)(nil), "greenfield.virtualgroup.EventSwapOut")
	proto.RegisterType((*EventCompleteSwapOut)(nil), "greenfield.virtualgroup.EventCompleteSwapOut")
	proto.RegisterType((*EventCancelSwapOut)(nil), "greenfield.virtualgroup.EventCancelSwapOut")
	proto.RegisterType((*EventStorageProviderExit)(nil), "greenfield.virtualgroup.EventStorageProviderExit")
	proto.RegisterType((*EventCompleteStorageProviderExit)(nil), "greenfield.virtualgroup.EventCompleteStorageProviderExit")
}

func init() {
	proto.RegisterFile("greenfield/virtualgroup/events.proto", fileDescriptor_ece39ea12016bd5b)
}

var fileDescriptor_ece39ea12016bd5b = []byte{
	// 747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x3f, 0x4f, 0x1b, 0x49,
	0x14, 0xf7, 0xd8, 0x3e, 0x0e, 0x0f, 0x18, 0xb8, 0x3d, 0x23, 0xef, 0xc1, 0x61, 0xac, 0xbd, 0x13,
	0x72, 0x63, 0xbb, 0xb8, 0x43, 0x77, 0xc5, 0x35, 0x67, 0x20, 0x68, 0xa5, 0x28, 0x41, 0xb6, 0x48,
	0x91, 0x66, 0xb5, 0xde, 0x19, 0x96, 0x11, 0xeb, 0x9d, 0xd5, 0xcc, 0x98, 0x60, 0x3e, 0x40, 0x52,
	0x26, 0x5f, 0x25, 0x12, 0x1f, 0x20, 0x25, 0x25, 0xa2, 0x8a, 0x52, 0xa0, 0x08, 0x57, 0xe9, 0x52,
	0x53, 0x45, 0x3b, 0x33, 0x36, 0x06, 0x83, 0x71, 0x48, 0x14, 0x45, 0xa9, 0xec, 0x7d, 0xf3, 0xfe,
	0xfc, 0x7e, 0xbf, 0xf7, 0xe6, 0x69, 0xe0, 0x9f, 0x3e, 0xc3, 0x38, 0xdc, 0x21, 0x38, 0x40, 0xd5,
	0x7d, 0xc2, 0x44, 0xdb, 0x0d, 0x7c, 0x46, 0xdb, 0x51, 0x15, 0xef, 0xe3, 0x50, 0xf0, 0x4a, 0xc4,
	0xa8, 0xa0, 0x46, 0xfe, 0xd2, 0xab, 0x32, 0xe8, 0xb5, 0xf0, 0x9b, 0x47, 0x79, 0x8b, 0x72, 0x47,
	0xba, 0x55, 0xd5, 0x87, 0x8a, 0x59, 0xc8, 0xf9, 0xd4, 0xa7, 0xca, 0x1e, 0xff, 0x53, 0x56, 0xeb,
	0x63, 0x12, 0x2e, 0x6d, 0xc4, 0xa9, 0xd7, 0x18, 0x76, 0x05, 0xde, 0x0c, 0x68, 0xd3, 0x0d, 0x9e,
	0xa8, 0x94, 0x9b, 0x71, 0x4a, 0x63, 0x06, 0x26, 0x09, 0x32, 0x41, 0x11, 0x94, 0xb2, 0xf5, 0x24,
	0x41, 0xc6, 0x22, 0xcc, 0xec, 0xb8, 0x2d, 0x12, 0x74, 0x1c, 0x82, 0xcc, 0xa4, 0x34, 0x4f, 0x2a,
	0x83, 0x8d, 0x0c, 0x0b, 0x66, 0x23, 0x46, 0x5a, 0x2e, 0xeb, 0x38, 0x3c, 0x8a, 0x1d, 0x52, 0xd2,
	0x61, 0x4a, 0x1b, 0x1b, 0x91, 0x8d, 0x8c, 0x12, 0x9c, 0xe3, 0xd8, 0xa3, 0x21, 0xea, 0x7b, 0x71,
	0x33, 0x5d, 0x4c, 0x95, 0xb2, 0xf5, 0x99, 0xbe, 0x3d, 0x76, 0xe4, 0xc6, 0x32, 0x9c, 0xe2, 0x82,
	0x32, 0x8c, 0x1c, 0x4e, 0x0e, 0xb1, 0xf9, 0x53, 0x11, 0x94, 0xd2, 0x75, 0xa8, 0x4c, 0x0d, 0x72,
	0x88, 0x8d, 0x2d, 0x98, 0xd7, 0xf4, 0x9d, 0xc8, 0xed, 0xb4, 0x70, 0x28, 0x1c, 0x17, 0x21, 0x86,
	0x39, 0x37, 0x27, 0x8a, 0xa0, 0x94, 0xa9, 0x99, 0xa7, 0x47, 0xe5, 0x9c, 0x96, 0xe1, 0x7f, 0x75,
	0xd2, 0x10, 0x8c, 0x84, 0x7e, 0x7d, 0x5e, 0x07, 0x6e, 0xa9, 0x38, 0x7d, 0x68, 0xb8, 0x30, 0x2b,
	0xa8, 0x70, 0x03, 0x07, 0xe1, 0x88, 0x72, 0x22, 0xcc, 0x9f, 0x65, 0x9e, 0xff, 0x8e, 0xcf, 0x96,
	0x13, 0xef, 0xce, 0x96, 0x57, 0x7c, 0x22, 0x76, 0xdb, 0xcd, 0x8a, 0x47, 0x5b, 0x5a, 0x5d, 0xfd,
	0x53, 0xe6, 0x68, 0xaf, 0x2a, 0x3a, 0x11, 0xe6, 0x15, 0x3b, 0x14, 0xa7, 0x47, 0x65, 0xa8, 0xab,
	0xda, 0xa1, 0xa8, 0x4f, 0xcb, 0x94, 0xeb, 0x2a, 0xa3, 0xf5, 0x02, 0xc0, 0x3f, 0x46, 0x4a, 0xfe,
	0x40, 0xaa, 0x39, 0x24, 0xfc, 0x08, 0xb2, 0xc9, 0x7b, 0x91, 0xb5, 0xaa, 0xba, 0xf7, 0xeb, 0x38,
	0xc0, 0xe3, 0xf4, 0xde, 0x7a, 0x0d, 0x74, 0xc4, 0x76, 0x84, 0xc6, 0x9b, 0x96, 0x25, 0xa8, 0xfa,
	0xa5, 0x3a, 0x98, 0x94, 0x1d, 0xcc, 0x48, 0x8b, 0x6c, 0xe0, 0x90, 0xdc, 0xa9, 0xaf, 0x2e, 0xf7,
	0x1b, 0x00, 0x7f, 0x1f, 0x90, 0xfb, 0x21, 0xf5, 0xee, 0x80, 0xfc, 0x2f, 0xcc, 0x34, 0xdb, 0xde,
	0x1e, 0x16, 0xbd, 0x01, 0xcf, 0xd4, 0x16, 0x35, 0x9e, 0xf4, 0x36, 0x91, 0xd5, 0xa6, 0x74, 0xb5,
	0xf8, 0xb3, 0x3e, 0xa9, 0xbc, 0x6d, 0x64, 0xac, 0xc2, 0xbc, 0x2f, 0x25, 0x71, 0x7a, 0x8d, 0x92,
	0xb7, 0xf2, 0xf2, 0x1e, 0xe4, 0xfc, 0x21, 0xc5, 0x6c, 0x74, 0x7d, 0xcc, 0xd3, 0xd7, 0xc7, 0xdc,
	0x7a, 0xde, 0xa3, 0xa0, 0x64, 0xbf, 0x9b, 0xc2, 0x08, 0x20, 0xc9, 0xf1, 0x81, 0xa4, 0x86, 0x80,
	0x74, 0x01, 0x9c, 0x96, 0x40, 0x1a, 0xcf, 0xdc, 0xe8, 0x71, 0x5b, 0x18, 0x15, 0xf8, 0x6b, 0x7c,
	0xec, 0xfa, 0x38, 0x5e, 0x39, 0xfb, 0x04, 0x61, 0xe6, 0xf4, 0x91, 0xfc, 0xa2, 0x8f, 0xb6, 0xf4,
	0x89, 0x8d, 0x8c, 0x1a, 0x2c, 0xdc, 0x08, 0xec, 0xfa, 0x46, 0x59, 0xf0, 0x6f, 0xb9, 0x15, 0x36,
	0x32, 0xfe, 0x81, 0xe6, 0x2d, 0xe4, 0xb8, 0x99, 0x92, 0x7b, 0x64, 0xfe, 0x26, 0x76, 0xdc, 0x58,
	0x81, 0xb3, 0xbc, 0xed, 0x79, 0x98, 0x73, 0xca, 0xf4, 0x7a, 0x4a, 0xcb, 0x6a, 0xd9, 0xbe, 0x39,
	0xde, 0x3b, 0xd6, 0x05, 0x80, 0x39, 0x35, 0x31, 0xb4, 0x15, 0xc5, 0x37, 0xe3, 0xbe, 0x6c, 0x57,
	0x61, 0x9e, 0x33, 0xcf, 0xb9, 0x29, 0x46, 0xb7, 0x81, 0x33, 0xaf, 0x71, 0x0f, 0x91, 0x52, 0x5f,
	0x24, 0x52, 0x7a, 0x84, 0x48, 0xd6, 0x07, 0x00, 0x0d, 0x45, 0xde, 0x0d, 0x3d, 0x1c, 0xfc, 0xd0,
	0x8d, 0x7e, 0x09, 0xa0, 0xa9, 0xc6, 0xf9, 0x2a, 0xfe, 0x8d, 0x03, 0xf2, 0xf9, 0x8c, 0xd7, 0xe0,
	0x1c, 0x8d, 0x30, 0x73, 0x05, 0x65, 0x63, 0xef, 0xe5, 0xd9, 0x5e, 0x44, 0x6f, 0x23, 0x5f, 0x00,
	0x58, 0xbc, 0x3a, 0x7a, 0xdf, 0x09, 0xb2, 0x6f, 0xb0, 0xa9, 0x6b, 0x8f, 0x8e, 0xcf, 0x0b, 0xe0,
	0xe4, 0xbc, 0x00, 0xde, 0x9f, 0x17, 0xc0, 0xab, 0x6e, 0x21, 0x71, 0xd2, 0x2d, 0x24, 0xde, 0x76,
	0x0b, 0x89, 0xa7, 0x7f, 0x0f, 0x64, 0x6f, 0x86, 0xcd, 0xb2, 0xb7, 0xeb, 0x92, 0xb0, 0x3a, 0xf0,
	0x54, 0x3a, 0xb8, 0xfa, 0x58, 0x92, 0xf5, 0x9a, 0x13, 0xf2, 0x89, 0xf3, 0xd7, 0xa7, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x89, 0x1e, 0x45, 0x35, 0x54, 0x09, 0x00, 0x00,
}

func (m *EventCreateGlobalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateGlobalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateGlobalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalDeposit.Size()
		i -= size
		if _, err := m.TotalDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.VirtualPaymentAddress) > 0 {
		i -= len(m.VirtualPaymentAddress)
		copy(dAtA[i:], m.VirtualPaymentAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VirtualPaymentAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.StoredSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StoredSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SecondarySpIds) > 0 {
		dAtA2 := make([]byte, len(m.SecondarySpIds)*10)
		var j1 int
		for _, num := range m.SecondarySpIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvents(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.PrimarySpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x18
	}
	if m.FamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateGlobalVirtualGroupFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateGlobalVirtualGroupFamily) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateGlobalVirtualGroupFamily) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualPaymentAddress) > 0 {
		i -= len(m.VirtualPaymentAddress)
		copy(dAtA[i:], m.VirtualPaymentAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VirtualPaymentAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteGlobalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteGlobalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteGlobalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateGlobalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateGlobalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateGlobalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalDeposit.Size()
		i -= size
		if _, err := m.TotalDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.StoreSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StoreSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateLocalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateLocalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateLocalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoredSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StoredSize))
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.BucketId.Size()
		i -= size
		if _, err := m.BucketId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateLocalVirtualGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateLocalVirtualGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateLocalVirtualGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoredSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StoredSize))
		i--
		dAtA[i] = 0x18
	}
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSwapOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSwapOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSwapOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuccessorSpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SuccessorSpId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA4 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j3 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintEvents(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCompleteSwapOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCompleteSwapOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCompleteSwapOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA6 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j5 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintEvents(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x22
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x18
	}
	if m.SrcStorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SrcStorageProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelSwapOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelSwapOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelSwapOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuccessorSpId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SuccessorSpId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		dAtA8 := make([]byte, len(m.GlobalVirtualGroupIds)*10)
		var j7 int
		for _, num := range m.GlobalVirtualGroupIds {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintEvents(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x1a
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x10
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventStorageProviderExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStorageProviderExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStorageProviderExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCompleteStorageProviderExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCompleteStorageProviderExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCompleteStorageProviderExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalDeposit.Size()
		i -= size
		if _, err := m.TotalDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.StorageProviderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StorageProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateGlobalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.FamilyId != 0 {
		n += 1 + sovEvents(uint64(m.FamilyId))
	}
	if m.PrimarySpId != 0 {
		n += 1 + sovEvents(uint64(m.PrimarySpId))
	}
	if len(m.SecondarySpIds) > 0 {
		l = 0
		for _, e := range m.SecondarySpIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	if m.StoredSize != 0 {
		n += 1 + sovEvents(uint64(m.StoredSize))
	}
	l = len(m.VirtualPaymentAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TotalDeposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCreateGlobalVirtualGroupFamily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.VirtualPaymentAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDeleteGlobalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	return n
}

func (m *EventUpdateGlobalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.StoreSize != 0 {
		n += 1 + sovEvents(uint64(m.StoreSize))
	}
	l = m.TotalDeposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCreateLocalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = m.BucketId.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupId))
	}
	if m.StoredSize != 0 {
		n += 1 + sovEvents(uint64(m.StoredSize))
	}
	return n
}

func (m *EventUpdateLocalVirtualGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupId))
	}
	if m.StoredSize != 0 {
		n += 1 + sovEvents(uint64(m.StoredSize))
	}
	return n
}

func (m *EventSwapOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	if m.SuccessorSpId != 0 {
		n += 1 + sovEvents(uint64(m.SuccessorSpId))
	}
	return n
}

func (m *EventCompleteSwapOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.SrcStorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.SrcStorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	return n
}

func (m *EventCancelSwapOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovEvents(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if len(m.GlobalVirtualGroupIds) > 0 {
		l = 0
		for _, e := range m.GlobalVirtualGroupIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	if m.SuccessorSpId != 0 {
		n += 1 + sovEvents(uint64(m.SuccessorSpId))
	}
	return n
}

func (m *EventStorageProviderExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCompleteStorageProviderExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderId != 0 {
		n += 1 + sovEvents(uint64(m.StorageProviderId))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TotalDeposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateGlobalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateGlobalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateGlobalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyId", wireType)
			}
			m.FamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SecondarySpIds = append(m.SecondarySpIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SecondarySpIds) == 0 {
					m.SecondarySpIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SecondarySpIds = append(m.SecondarySpIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondarySpIds", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSize", wireType)
			}
			m.StoredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateGlobalVirtualGroupFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateGlobalVirtualGroupFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateGlobalVirtualGroupFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteGlobalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteGlobalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteGlobalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateGlobalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateGlobalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateGlobalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSize", wireType)
			}
			m.StoreSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateLocalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateLocalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateLocalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BucketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSize", wireType)
			}
			m.StoredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateLocalVirtualGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateLocalVirtualGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateLocalVirtualGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSize", wireType)
			}
			m.StoredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoredSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSwapOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSwapOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSwapOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessorSpId", wireType)
			}
			m.SuccessorSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessorSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCompleteSwapOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCompleteSwapOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCompleteSwapOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcStorageProviderId", wireType)
			}
			m.SrcStorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcStorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelSwapOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelSwapOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelSwapOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GlobalVirtualGroupIds) == 0 {
					m.GlobalVirtualGroupIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GlobalVirtualGroupIds = append(m.GlobalVirtualGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessorSpId", wireType)
			}
			m.SuccessorSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessorSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStorageProviderExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStorageProviderExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStorageProviderExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCompleteStorageProviderExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCompleteStorageProviderExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCompleteStorageProviderExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
			}
			m.StorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
