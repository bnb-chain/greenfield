// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/storage/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	common "github.com/bnb-chain/greenfield/types/common"
	types "github.com/bnb-chain/greenfield/x/permission/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateBucket struct {
	// creator defines the account address of bucket creator, it is also the bucket owner.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// bucket_name defines a globally unique name of bucket
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// visibility means the bucket is private or public. if private, only bucket owner or grantee can read it,
	// otherwise every greenfield user can read it.
	Visibility VisibilityType `protobuf:"varint,3,opt,name=visibility,proto3,enum=greenfield.storage.VisibilityType" json:"visibility,omitempty"`
	// payment_address defines an account address specified by bucket owner to pay the read fee. Default: creator
	PaymentAddress string `protobuf:"bytes,4,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	// primary_sp_address defines the address of primary sp.
	PrimarySpAddress string `protobuf:"bytes,5,opt,name=primary_sp_address,json=primarySpAddress,proto3" json:"primary_sp_address,omitempty"`
	// primary_sp_approval defines the approval info of the primary SP which indicates that primary sp confirm the user's request.
	PrimarySpApproval *common.Approval `protobuf:"bytes,6,opt,name=primary_sp_approval,json=primarySpApproval,proto3" json:"primary_sp_approval,omitempty"`
	// charged_read_quota defines the read data that users are charged for, measured in bytes.
	// The available read data for each user is the sum of the free read data provided by SP and
	// the ChargeReadQuota specified here.
	ChargedReadQuota uint64 `protobuf:"varint,7,opt,name=charged_read_quota,json=chargedReadQuota,proto3" json:"charged_read_quota,omitempty"`
}

func (m *MsgCreateBucket) Reset()         { *m = MsgCreateBucket{} }
func (m *MsgCreateBucket) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBucket) ProtoMessage()    {}
func (*MsgCreateBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{0}
}
func (m *MsgCreateBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBucket.Merge(m, src)
}
func (m *MsgCreateBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBucket proto.InternalMessageInfo

func (m *MsgCreateBucket) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgCreateBucket) GetVisibility() VisibilityType {
	if m != nil {
		return m.Visibility
	}
	return VISIBILITY_TYPE_UNSPECIFIED
}

func (m *MsgCreateBucket) GetPaymentAddress() string {
	if m != nil {
		return m.PaymentAddress
	}
	return ""
}

func (m *MsgCreateBucket) GetPrimarySpAddress() string {
	if m != nil {
		return m.PrimarySpAddress
	}
	return ""
}

func (m *MsgCreateBucket) GetPrimarySpApproval() *common.Approval {
	if m != nil {
		return m.PrimarySpApproval
	}
	return nil
}

func (m *MsgCreateBucket) GetChargedReadQuota() uint64 {
	if m != nil {
		return m.ChargedReadQuota
	}
	return 0
}

type MsgCreateBucketResponse struct {
	BucketId Uint `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3,customtype=Uint" json:"bucket_id"`
}

func (m *MsgCreateBucketResponse) Reset()         { *m = MsgCreateBucketResponse{} }
func (m *MsgCreateBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBucketResponse) ProtoMessage()    {}
func (*MsgCreateBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{1}
}
func (m *MsgCreateBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBucketResponse.Merge(m, src)
}
func (m *MsgCreateBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBucketResponse proto.InternalMessageInfo

type MsgDeleteBucket struct {
	// creator defines the account address of the grantee who has the DeleteBucket permission of the bucket to be deleted.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket to be deleted.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (m *MsgDeleteBucket) Reset()         { *m = MsgDeleteBucket{} }
func (m *MsgDeleteBucket) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBucket) ProtoMessage()    {}
func (*MsgDeleteBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{2}
}
func (m *MsgDeleteBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBucket.Merge(m, src)
}
func (m *MsgDeleteBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBucket proto.InternalMessageInfo

func (m *MsgDeleteBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgDeleteBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

type MsgDeleteBucketResponse struct {
}

func (m *MsgDeleteBucketResponse) Reset()         { *m = MsgDeleteBucketResponse{} }
func (m *MsgDeleteBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBucketResponse) ProtoMessage()    {}
func (*MsgDeleteBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{3}
}
func (m *MsgDeleteBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBucketResponse.Merge(m, src)
}
func (m *MsgDeleteBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBucketResponse proto.InternalMessageInfo

type MsgDiscontinueBucket struct {
	// operator is the sp who wants to stop serving the bucket.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket where the object which to be discontinued is stored.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// the reason for the request.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MsgDiscontinueBucket) Reset()         { *m = MsgDiscontinueBucket{} }
func (m *MsgDiscontinueBucket) String() string { return proto.CompactTextString(m) }
func (*MsgDiscontinueBucket) ProtoMessage()    {}
func (*MsgDiscontinueBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{4}
}
func (m *MsgDiscontinueBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscontinueBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscontinueBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscontinueBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscontinueBucket.Merge(m, src)
}
func (m *MsgDiscontinueBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscontinueBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscontinueBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscontinueBucket proto.InternalMessageInfo

func (m *MsgDiscontinueBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgDiscontinueBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgDiscontinueBucket) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MsgDiscontinueBucketResponse struct {
}

func (m *MsgDiscontinueBucketResponse) Reset()         { *m = MsgDiscontinueBucketResponse{} }
func (m *MsgDiscontinueBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDiscontinueBucketResponse) ProtoMessage()    {}
func (*MsgDiscontinueBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{5}
}
func (m *MsgDiscontinueBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscontinueBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscontinueBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscontinueBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscontinueBucketResponse.Merge(m, src)
}
func (m *MsgDiscontinueBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscontinueBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscontinueBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscontinueBucketResponse proto.InternalMessageInfo

type MsgCreateObject struct {
	// creator defines the account address of object uploader
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// bucket_name defines the name of the bucket where the object is stored.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// object_name defines the name of object
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// payload_size defines size of the object's payload
	PayloadSize uint64 `protobuf:"varint,4,opt,name=payload_size,json=payloadSize,proto3" json:"payload_size,omitempty"`
	// visibility means the object is private or public. if private, only object owner or grantee can access it,
	// otherwise every greenfield user can access it.
	Visibility VisibilityType `protobuf:"varint,5,opt,name=visibility,proto3,enum=greenfield.storage.VisibilityType" json:"visibility,omitempty"`
	// content_type defines a standard MIME type describing the format of the object.
	ContentType string `protobuf:"bytes,6,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// primary_sp_approval defines the approval info of the primary SP which indicates that primary sp confirm the user's request.
	PrimarySpApproval *common.Approval `protobuf:"bytes,7,opt,name=primary_sp_approval,json=primarySpApproval,proto3" json:"primary_sp_approval,omitempty"`
	// expect_checksums defines a list of hashes which was generate by redundancy algorithm.
	ExpectChecksums [][]byte `protobuf:"bytes,8,rep,name=expect_checksums,json=expectChecksums,proto3" json:"expect_checksums,omitempty"`
	// redundancy_type can be ec or replica
	RedundancyType RedundancyType `protobuf:"varint,9,opt,name=redundancy_type,json=redundancyType,proto3,enum=greenfield.storage.RedundancyType" json:"redundancy_type,omitempty"`
}

func (m *MsgCreateObject) Reset()         { *m = MsgCreateObject{} }
func (m *MsgCreateObject) String() string { return proto.CompactTextString(m) }
func (*MsgCreateObject) ProtoMessage()    {}
func (*MsgCreateObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{6}
}
func (m *MsgCreateObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateObject.Merge(m, src)
}
func (m *MsgCreateObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateObject proto.InternalMessageInfo

func (m *MsgCreateObject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgCreateObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *MsgCreateObject) GetPayloadSize() uint64 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

func (m *MsgCreateObject) GetVisibility() VisibilityType {
	if m != nil {
		return m.Visibility
	}
	return VISIBILITY_TYPE_UNSPECIFIED
}

func (m *MsgCreateObject) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *MsgCreateObject) GetPrimarySpApproval() *common.Approval {
	if m != nil {
		return m.PrimarySpApproval
	}
	return nil
}

func (m *MsgCreateObject) GetExpectChecksums() [][]byte {
	if m != nil {
		return m.ExpectChecksums
	}
	return nil
}

func (m *MsgCreateObject) GetRedundancyType() RedundancyType {
	if m != nil {
		return m.RedundancyType
	}
	return REDUNDANCY_EC_TYPE
}

type MsgCreateObjectResponse struct {
	ObjectId Uint `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3,customtype=Uint" json:"object_id"`
}

func (m *MsgCreateObjectResponse) Reset()         { *m = MsgCreateObjectResponse{} }
func (m *MsgCreateObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateObjectResponse) ProtoMessage()    {}
func (*MsgCreateObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{7}
}
func (m *MsgCreateObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateObjectResponse.Merge(m, src)
}
func (m *MsgCreateObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateObjectResponse proto.InternalMessageInfo

type MsgSealObject struct {
	// operator defines the account address of primary SP
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket where the object is stored.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// object_name defines the name of object to be sealed.
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// global_virtual_group_id defines the id of global virtual group
	GlobalVirtualGroupId uint32 `protobuf:"varint,4,opt,name=global_virtual_group_id,json=globalVirtualGroupId,proto3" json:"global_virtual_group_id,omitempty"`
	// secondary_sp_bls_agg_signatures defines the aggregate bls signature of the secondary sp that can
	// acknowledge that the payload data has received and stored.
	SecondarySpBlsAggSignatures []byte `protobuf:"bytes,5,opt,name=secondary_sp_bls_agg_signatures,json=secondarySpBlsAggSignatures,proto3" json:"secondary_sp_bls_agg_signatures,omitempty"`
}

func (m *MsgSealObject) Reset()         { *m = MsgSealObject{} }
func (m *MsgSealObject) String() string { return proto.CompactTextString(m) }
func (*MsgSealObject) ProtoMessage()    {}
func (*MsgSealObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{8}
}
func (m *MsgSealObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSealObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSealObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSealObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSealObject.Merge(m, src)
}
func (m *MsgSealObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgSealObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSealObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSealObject proto.InternalMessageInfo

func (m *MsgSealObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgSealObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgSealObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *MsgSealObject) GetGlobalVirtualGroupId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupId
	}
	return 0
}

func (m *MsgSealObject) GetSecondarySpBlsAggSignatures() []byte {
	if m != nil {
		return m.SecondarySpBlsAggSignatures
	}
	return nil
}

type MsgSealObjectResponse struct {
}

func (m *MsgSealObjectResponse) Reset()         { *m = MsgSealObjectResponse{} }
func (m *MsgSealObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSealObjectResponse) ProtoMessage()    {}
func (*MsgSealObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{9}
}
func (m *MsgSealObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSealObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSealObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSealObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSealObjectResponse.Merge(m, src)
}
func (m *MsgSealObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSealObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSealObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSealObjectResponse proto.InternalMessageInfo

type MsgRejectSealObject struct {
	// operator defines the account address of the object owner
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket where the object is stored.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// object_name defines the name of unsealed object to be reject.
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
}

func (m *MsgRejectSealObject) Reset()         { *m = MsgRejectSealObject{} }
func (m *MsgRejectSealObject) String() string { return proto.CompactTextString(m) }
func (*MsgRejectSealObject) ProtoMessage()    {}
func (*MsgRejectSealObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{10}
}
func (m *MsgRejectSealObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectSealObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectSealObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectSealObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectSealObject.Merge(m, src)
}
func (m *MsgRejectSealObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectSealObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectSealObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectSealObject proto.InternalMessageInfo

func (m *MsgRejectSealObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgRejectSealObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgRejectSealObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

type MsgRejectSealObjectResponse struct {
}

func (m *MsgRejectSealObjectResponse) Reset()         { *m = MsgRejectSealObjectResponse{} }
func (m *MsgRejectSealObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRejectSealObjectResponse) ProtoMessage()    {}
func (*MsgRejectSealObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{11}
}
func (m *MsgRejectSealObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectSealObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectSealObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectSealObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectSealObjectResponse.Merge(m, src)
}
func (m *MsgRejectSealObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectSealObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectSealObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectSealObjectResponse proto.InternalMessageInfo

type MsgCopyObject struct {
	// operator defines the account address of the operator who has the CopyObject permission of the object to be deleted.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// src_bucket_name defines the name of the bucket where the object to be copied is located
	SrcBucketName string `protobuf:"bytes,2,opt,name=src_bucket_name,json=srcBucketName,proto3" json:"src_bucket_name,omitempty"`
	// dst_bucket_name defines the name of the bucket where the object is copied to.
	DstBucketName string `protobuf:"bytes,3,opt,name=dst_bucket_name,json=dstBucketName,proto3" json:"dst_bucket_name,omitempty"`
	// src_object_name defines the name of the object which to be copied
	SrcObjectName string `protobuf:"bytes,4,opt,name=src_object_name,json=srcObjectName,proto3" json:"src_object_name,omitempty"`
	// dst_object_name defines the name of the object which is copied to
	DstObjectName string `protobuf:"bytes,5,opt,name=dst_object_name,json=dstObjectName,proto3" json:"dst_object_name,omitempty"`
	// primary_sp_approval defines the approval info of the primary SP which indicates that primary sp confirm the user's request.
	DstPrimarySpApproval *common.Approval `protobuf:"bytes,6,opt,name=dst_primary_sp_approval,json=dstPrimarySpApproval,proto3" json:"dst_primary_sp_approval,omitempty"`
}

func (m *MsgCopyObject) Reset()         { *m = MsgCopyObject{} }
func (m *MsgCopyObject) String() string { return proto.CompactTextString(m) }
func (*MsgCopyObject) ProtoMessage()    {}
func (*MsgCopyObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{12}
}
func (m *MsgCopyObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCopyObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCopyObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCopyObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCopyObject.Merge(m, src)
}
func (m *MsgCopyObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgCopyObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCopyObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCopyObject proto.InternalMessageInfo

func (m *MsgCopyObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgCopyObject) GetSrcBucketName() string {
	if m != nil {
		return m.SrcBucketName
	}
	return ""
}

func (m *MsgCopyObject) GetDstBucketName() string {
	if m != nil {
		return m.DstBucketName
	}
	return ""
}

func (m *MsgCopyObject) GetSrcObjectName() string {
	if m != nil {
		return m.SrcObjectName
	}
	return ""
}

func (m *MsgCopyObject) GetDstObjectName() string {
	if m != nil {
		return m.DstObjectName
	}
	return ""
}

func (m *MsgCopyObject) GetDstPrimarySpApproval() *common.Approval {
	if m != nil {
		return m.DstPrimarySpApproval
	}
	return nil
}

type MsgCopyObjectResponse struct {
	ObjectId Uint `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3,customtype=Uint" json:"object_id"`
}

func (m *MsgCopyObjectResponse) Reset()         { *m = MsgCopyObjectResponse{} }
func (m *MsgCopyObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCopyObjectResponse) ProtoMessage()    {}
func (*MsgCopyObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{13}
}
func (m *MsgCopyObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCopyObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCopyObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCopyObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCopyObjectResponse.Merge(m, src)
}
func (m *MsgCopyObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCopyObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCopyObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCopyObjectResponse proto.InternalMessageInfo

type MsgDeleteObject struct {
	// operator defines the account address of the operator who has the DeleteObject permission of the object to be deleted.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket where the object which to be deleted is stored.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// object_name defines the name of the object which to be deleted.
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
}

func (m *MsgDeleteObject) Reset()         { *m = MsgDeleteObject{} }
func (m *MsgDeleteObject) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteObject) ProtoMessage()    {}
func (*MsgDeleteObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{14}
}
func (m *MsgDeleteObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteObject.Merge(m, src)
}
func (m *MsgDeleteObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteObject proto.InternalMessageInfo

func (m *MsgDeleteObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgDeleteObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgDeleteObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

type MsgDeleteObjectResponse struct {
}

func (m *MsgDeleteObjectResponse) Reset()         { *m = MsgDeleteObjectResponse{} }
func (m *MsgDeleteObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteObjectResponse) ProtoMessage()    {}
func (*MsgDeleteObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{15}
}
func (m *MsgDeleteObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteObjectResponse.Merge(m, src)
}
func (m *MsgDeleteObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteObjectResponse proto.InternalMessageInfo

type MsgDiscontinueObject struct {
	// operator is the sp who wants to stop serving the objects.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket where the object which to be discontinued is stored.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// object_ids are the ids of object info.
	ObjectIds []Uint `protobuf:"bytes,3,rep,name=object_ids,json=objectIds,proto3,customtype=Uint" json:"object_ids"`
	// the reason for the request.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MsgDiscontinueObject) Reset()         { *m = MsgDiscontinueObject{} }
func (m *MsgDiscontinueObject) String() string { return proto.CompactTextString(m) }
func (*MsgDiscontinueObject) ProtoMessage()    {}
func (*MsgDiscontinueObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{16}
}
func (m *MsgDiscontinueObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscontinueObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscontinueObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscontinueObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscontinueObject.Merge(m, src)
}
func (m *MsgDiscontinueObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscontinueObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscontinueObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscontinueObject proto.InternalMessageInfo

func (m *MsgDiscontinueObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgDiscontinueObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgDiscontinueObject) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MsgDiscontinueObjectResponse struct {
}

func (m *MsgDiscontinueObjectResponse) Reset()         { *m = MsgDiscontinueObjectResponse{} }
func (m *MsgDiscontinueObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDiscontinueObjectResponse) ProtoMessage()    {}
func (*MsgDiscontinueObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{17}
}
func (m *MsgDiscontinueObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscontinueObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscontinueObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscontinueObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscontinueObjectResponse.Merge(m, src)
}
func (m *MsgDiscontinueObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscontinueObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscontinueObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscontinueObjectResponse proto.InternalMessageInfo

type MsgCreateGroup struct {
	// owner defines the account address of group owner who create the group
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// group_name defines the name of the group. it's not globally unique.
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// extra defines extra info for the group
	Extra string `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *MsgCreateGroup) Reset()         { *m = MsgCreateGroup{} }
func (m *MsgCreateGroup) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGroup) ProtoMessage()    {}
func (*MsgCreateGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{18}
}
func (m *MsgCreateGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGroup.Merge(m, src)
}
func (m *MsgCreateGroup) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGroup proto.InternalMessageInfo

func (m *MsgCreateGroup) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *MsgCreateGroup) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type MsgCreateGroupResponse struct {
	GroupId Uint `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3,customtype=Uint" json:"group_id"`
}

func (m *MsgCreateGroupResponse) Reset()         { *m = MsgCreateGroupResponse{} }
func (m *MsgCreateGroupResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGroupResponse) ProtoMessage()    {}
func (*MsgCreateGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{19}
}
func (m *MsgCreateGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGroupResponse.Merge(m, src)
}
func (m *MsgCreateGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGroupResponse proto.InternalMessageInfo

type MsgDeleteGroup struct {
	// operator defines the account address of the operator who has the DeleteGroup permission of the group to be deleted.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// group_name defines the name of the group which to be deleted
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (m *MsgDeleteGroup) Reset()         { *m = MsgDeleteGroup{} }
func (m *MsgDeleteGroup) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteGroup) ProtoMessage()    {}
func (*MsgDeleteGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{20}
}
func (m *MsgDeleteGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteGroup.Merge(m, src)
}
func (m *MsgDeleteGroup) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteGroup proto.InternalMessageInfo

func (m *MsgDeleteGroup) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgDeleteGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type MsgDeleteGroupResponse struct {
}

func (m *MsgDeleteGroupResponse) Reset()         { *m = MsgDeleteGroupResponse{} }
func (m *MsgDeleteGroupResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteGroupResponse) ProtoMessage()    {}
func (*MsgDeleteGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{21}
}
func (m *MsgDeleteGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteGroupResponse.Merge(m, src)
}
func (m *MsgDeleteGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteGroupResponse proto.InternalMessageInfo

type MsgUpdateGroupMember struct {
	// operator defines the account address of the operator who has the UpdateGroupMember permission of the group.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// group_owner defines the account address of the group owner
	GroupOwner string `protobuf:"bytes,2,opt,name=group_owner,json=groupOwner,proto3" json:"group_owner,omitempty"`
	// group_name defines the name of the group which to be updated
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// members_to_add defines a list of members account address which will be add to the group
	MembersToAdd []*MsgGroupMember `protobuf:"bytes,4,rep,name=members_to_add,json=membersToAdd,proto3" json:"members_to_add,omitempty"`
	// members_to_delete defines a list of members account address which will be remove from the group
	MembersToDelete []string `protobuf:"bytes,5,rep,name=members_to_delete,json=membersToDelete,proto3" json:"members_to_delete,omitempty"`
}

func (m *MsgUpdateGroupMember) Reset()         { *m = MsgUpdateGroupMember{} }
func (m *MsgUpdateGroupMember) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGroupMember) ProtoMessage()    {}
func (*MsgUpdateGroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{22}
}
func (m *MsgUpdateGroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGroupMember.Merge(m, src)
}
func (m *MsgUpdateGroupMember) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGroupMember proto.InternalMessageInfo

func (m *MsgUpdateGroupMember) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgUpdateGroupMember) GetGroupOwner() string {
	if m != nil {
		return m.GroupOwner
	}
	return ""
}

func (m *MsgUpdateGroupMember) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *MsgUpdateGroupMember) GetMembersToAdd() []*MsgGroupMember {
	if m != nil {
		return m.MembersToAdd
	}
	return nil
}

func (m *MsgUpdateGroupMember) GetMembersToDelete() []string {
	if m != nil {
		return m.MembersToDelete
	}
	return nil
}

type MsgUpdateGroupMemberResponse struct {
}

func (m *MsgUpdateGroupMemberResponse) Reset()         { *m = MsgUpdateGroupMemberResponse{} }
func (m *MsgUpdateGroupMemberResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGroupMemberResponse) ProtoMessage()    {}
func (*MsgUpdateGroupMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{23}
}
func (m *MsgUpdateGroupMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGroupMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGroupMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGroupMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGroupMemberResponse.Merge(m, src)
}
func (m *MsgUpdateGroupMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGroupMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGroupMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGroupMemberResponse proto.InternalMessageInfo

type MsgRenewGroupMember struct {
	// operator defines the account address of the operator who has the UpdateGroupMember permission of the group.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// group_owner defines the account address of the group owner
	GroupOwner string `protobuf:"bytes,2,opt,name=group_owner,json=groupOwner,proto3" json:"group_owner,omitempty"`
	// group_name defines the name of the group which to be updated
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// members defines a list of members which will be renew to the group
	Members []*MsgGroupMember `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *MsgRenewGroupMember) Reset()         { *m = MsgRenewGroupMember{} }
func (m *MsgRenewGroupMember) String() string { return proto.CompactTextString(m) }
func (*MsgRenewGroupMember) ProtoMessage()    {}
func (*MsgRenewGroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{24}
}
func (m *MsgRenewGroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRenewGroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRenewGroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRenewGroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRenewGroupMember.Merge(m, src)
}
func (m *MsgRenewGroupMember) XXX_Size() int {
	return m.Size()
}
func (m *MsgRenewGroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRenewGroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRenewGroupMember proto.InternalMessageInfo

func (m *MsgRenewGroupMember) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgRenewGroupMember) GetGroupOwner() string {
	if m != nil {
		return m.GroupOwner
	}
	return ""
}

func (m *MsgRenewGroupMember) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *MsgRenewGroupMember) GetMembers() []*MsgGroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type MsgRenewGroupMemberResponse struct {
}

func (m *MsgRenewGroupMemberResponse) Reset()         { *m = MsgRenewGroupMemberResponse{} }
func (m *MsgRenewGroupMemberResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRenewGroupMemberResponse) ProtoMessage()    {}
func (*MsgRenewGroupMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{25}
}
func (m *MsgRenewGroupMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRenewGroupMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRenewGroupMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRenewGroupMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRenewGroupMemberResponse.Merge(m, src)
}
func (m *MsgRenewGroupMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRenewGroupMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRenewGroupMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRenewGroupMemberResponse proto.InternalMessageInfo

type MsgGroupMember struct {
	// member defines the account address of the group member
	Member string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	// expiration_time defines the expiration time of the group member
	ExpirationTime *time.Time `protobuf:"bytes,2,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time,omitempty"`
}

func (m *MsgGroupMember) Reset()         { *m = MsgGroupMember{} }
func (m *MsgGroupMember) String() string { return proto.CompactTextString(m) }
func (*MsgGroupMember) ProtoMessage()    {}
func (*MsgGroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{26}
}
func (m *MsgGroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGroupMember.Merge(m, src)
}
func (m *MsgGroupMember) XXX_Size() int {
	return m.Size()
}
func (m *MsgGroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGroupMember proto.InternalMessageInfo

func (m *MsgGroupMember) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *MsgGroupMember) GetExpirationTime() *time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

type MsgUpdateGroupExtra struct {
	// operator defines the account address of the operator who has the UpdateGroupMember permission of the group.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// group_owner defines the account address of the group owner
	GroupOwner string `protobuf:"bytes,2,opt,name=group_owner,json=groupOwner,proto3" json:"group_owner,omitempty"`
	// group_name defines the name of the group which to be updated
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// extra defines extra info for the group to update
	Extra string `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *MsgUpdateGroupExtra) Reset()         { *m = MsgUpdateGroupExtra{} }
func (m *MsgUpdateGroupExtra) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGroupExtra) ProtoMessage()    {}
func (*MsgUpdateGroupExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{27}
}
func (m *MsgUpdateGroupExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGroupExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGroupExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGroupExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGroupExtra.Merge(m, src)
}
func (m *MsgUpdateGroupExtra) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGroupExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGroupExtra.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGroupExtra proto.InternalMessageInfo

func (m *MsgUpdateGroupExtra) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgUpdateGroupExtra) GetGroupOwner() string {
	if m != nil {
		return m.GroupOwner
	}
	return ""
}

func (m *MsgUpdateGroupExtra) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *MsgUpdateGroupExtra) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type MsgUpdateGroupExtraResponse struct {
}

func (m *MsgUpdateGroupExtraResponse) Reset()         { *m = MsgUpdateGroupExtraResponse{} }
func (m *MsgUpdateGroupExtraResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGroupExtraResponse) ProtoMessage()    {}
func (*MsgUpdateGroupExtraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{28}
}
func (m *MsgUpdateGroupExtraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGroupExtraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGroupExtraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGroupExtraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGroupExtraResponse.Merge(m, src)
}
func (m *MsgUpdateGroupExtraResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGroupExtraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGroupExtraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGroupExtraResponse proto.InternalMessageInfo

type MsgLeaveGroup struct {
	// member defines the account address of the member who want to leave the group
	Member string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	// group_owner defines the owner of the group you want to leave
	GroupOwner string `protobuf:"bytes,2,opt,name=group_owner,json=groupOwner,proto3" json:"group_owner,omitempty"`
	// group_name defines the name of the group you want to leave
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (m *MsgLeaveGroup) Reset()         { *m = MsgLeaveGroup{} }
func (m *MsgLeaveGroup) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveGroup) ProtoMessage()    {}
func (*MsgLeaveGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{29}
}
func (m *MsgLeaveGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveGroup.Merge(m, src)
}
func (m *MsgLeaveGroup) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveGroup proto.InternalMessageInfo

func (m *MsgLeaveGroup) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *MsgLeaveGroup) GetGroupOwner() string {
	if m != nil {
		return m.GroupOwner
	}
	return ""
}

func (m *MsgLeaveGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type MsgLeaveGroupResponse struct {
}

func (m *MsgLeaveGroupResponse) Reset()         { *m = MsgLeaveGroupResponse{} }
func (m *MsgLeaveGroupResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveGroupResponse) ProtoMessage()    {}
func (*MsgLeaveGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{30}
}
func (m *MsgLeaveGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveGroupResponse.Merge(m, src)
}
func (m *MsgLeaveGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveGroupResponse proto.InternalMessageInfo

type MsgUpdateBucketInfo struct {
	// operator defines the account address of the operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of bucket which you'll update
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// charged_read_quota defines the traffic quota that you read from primary sp
	// if read_quota is nil, it means don't change the read_quota
	ChargedReadQuota *common.UInt64Value `protobuf:"bytes,3,opt,name=charged_read_quota,json=chargedReadQuota,proto3" json:"charged_read_quota,omitempty"`
	// payment_address defines the account address of the payment account
	// if payment_address is empty, it means don't change the payment_address
	PaymentAddress string `protobuf:"bytes,4,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	// visibility means the bucket is private or public. if private, only bucket owner or grantee can read it,
	// otherwise every greenfield user can read it.
	Visibility VisibilityType `protobuf:"varint,5,opt,name=visibility,proto3,enum=greenfield.storage.VisibilityType" json:"visibility,omitempty"`
}

func (m *MsgUpdateBucketInfo) Reset()         { *m = MsgUpdateBucketInfo{} }
func (m *MsgUpdateBucketInfo) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBucketInfo) ProtoMessage()    {}
func (*MsgUpdateBucketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{31}
}
func (m *MsgUpdateBucketInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBucketInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBucketInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBucketInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBucketInfo.Merge(m, src)
}
func (m *MsgUpdateBucketInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBucketInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBucketInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBucketInfo proto.InternalMessageInfo

func (m *MsgUpdateBucketInfo) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgUpdateBucketInfo) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgUpdateBucketInfo) GetChargedReadQuota() *common.UInt64Value {
	if m != nil {
		return m.ChargedReadQuota
	}
	return nil
}

func (m *MsgUpdateBucketInfo) GetPaymentAddress() string {
	if m != nil {
		return m.PaymentAddress
	}
	return ""
}

func (m *MsgUpdateBucketInfo) GetVisibility() VisibilityType {
	if m != nil {
		return m.Visibility
	}
	return VISIBILITY_TYPE_UNSPECIFIED
}

type MsgUpdateBucketInfoResponse struct {
}

func (m *MsgUpdateBucketInfoResponse) Reset()         { *m = MsgUpdateBucketInfoResponse{} }
func (m *MsgUpdateBucketInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBucketInfoResponse) ProtoMessage()    {}
func (*MsgUpdateBucketInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{32}
}
func (m *MsgUpdateBucketInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBucketInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBucketInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBucketInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBucketInfoResponse.Merge(m, src)
}
func (m *MsgUpdateBucketInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBucketInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBucketInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBucketInfoResponse proto.InternalMessageInfo

type MsgCancelCreateObject struct {
	// operator defines the account address of the operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// object_name defines the name of the object
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
}

func (m *MsgCancelCreateObject) Reset()         { *m = MsgCancelCreateObject{} }
func (m *MsgCancelCreateObject) String() string { return proto.CompactTextString(m) }
func (*MsgCancelCreateObject) ProtoMessage()    {}
func (*MsgCancelCreateObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{33}
}
func (m *MsgCancelCreateObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelCreateObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelCreateObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelCreateObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelCreateObject.Merge(m, src)
}
func (m *MsgCancelCreateObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelCreateObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelCreateObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelCreateObject proto.InternalMessageInfo

func (m *MsgCancelCreateObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgCancelCreateObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgCancelCreateObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

type MsgCancelCreateObjectResponse struct {
}

func (m *MsgCancelCreateObjectResponse) Reset()         { *m = MsgCancelCreateObjectResponse{} }
func (m *MsgCancelCreateObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelCreateObjectResponse) ProtoMessage()    {}
func (*MsgCancelCreateObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{34}
}
func (m *MsgCancelCreateObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelCreateObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelCreateObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelCreateObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelCreateObjectResponse.Merge(m, src)
}
func (m *MsgCancelCreateObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelCreateObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelCreateObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelCreateObjectResponse proto.InternalMessageInfo

type MsgPutPolicy struct {
	// operator defines the granter who grant the permission to another principal
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// Principal defines the roles that can grant permissions. Currently, it can be account or group.
	Principal *types.Principal `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	// resource defines a greenfield standard resource name that can be generated by GRN structure
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// statements defines a list of individual statement which describe the detail rules of policy
	Statements []*types.Statement `protobuf:"bytes,4,rep,name=statements,proto3" json:"statements,omitempty"`
	// expiration_time defines the whole expiration time of all the statements.
	// Notices: Its priority is higher than the expiration time inside the Statement
	ExpirationTime *time.Time `protobuf:"bytes,7,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time,omitempty"`
}

func (m *MsgPutPolicy) Reset()         { *m = MsgPutPolicy{} }
func (m *MsgPutPolicy) String() string { return proto.CompactTextString(m) }
func (*MsgPutPolicy) ProtoMessage()    {}
func (*MsgPutPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{35}
}
func (m *MsgPutPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPutPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPutPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPutPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPutPolicy.Merge(m, src)
}
func (m *MsgPutPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MsgPutPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPutPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPutPolicy proto.InternalMessageInfo

func (m *MsgPutPolicy) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgPutPolicy) GetPrincipal() *types.Principal {
	if m != nil {
		return m.Principal
	}
	return nil
}

func (m *MsgPutPolicy) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *MsgPutPolicy) GetStatements() []*types.Statement {
	if m != nil {
		return m.Statements
	}
	return nil
}

func (m *MsgPutPolicy) GetExpirationTime() *time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

type MsgPutPolicyResponse struct {
	PolicyId Uint `protobuf:"bytes,4,opt,name=policy_id,json=policyId,proto3,customtype=Uint" json:"policy_id"`
}

func (m *MsgPutPolicyResponse) Reset()         { *m = MsgPutPolicyResponse{} }
func (m *MsgPutPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPutPolicyResponse) ProtoMessage()    {}
func (*MsgPutPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{36}
}
func (m *MsgPutPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPutPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPutPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPutPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPutPolicyResponse.Merge(m, src)
}
func (m *MsgPutPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPutPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPutPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPutPolicyResponse proto.InternalMessageInfo

type MsgDeletePolicy struct {
	// operator defines the granter who grant the permission to another principal
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// Principal defines the roles that can grant permissions. Currently, it can be account or group.
	Principal *types.Principal `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	// resource defines a greenfield standard resource name that can be generated by GRN structure
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (m *MsgDeletePolicy) Reset()         { *m = MsgDeletePolicy{} }
func (m *MsgDeletePolicy) String() string { return proto.CompactTextString(m) }
func (*MsgDeletePolicy) ProtoMessage()    {}
func (*MsgDeletePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{37}
}
func (m *MsgDeletePolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeletePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeletePolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeletePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeletePolicy.Merge(m, src)
}
func (m *MsgDeletePolicy) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeletePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeletePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeletePolicy proto.InternalMessageInfo

func (m *MsgDeletePolicy) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgDeletePolicy) GetPrincipal() *types.Principal {
	if m != nil {
		return m.Principal
	}
	return nil
}

func (m *MsgDeletePolicy) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type MsgDeletePolicyResponse struct {
	PolicyId Uint `protobuf:"bytes,4,opt,name=policy_id,json=policyId,proto3,customtype=Uint" json:"policy_id"`
}

func (m *MsgDeletePolicyResponse) Reset()         { *m = MsgDeletePolicyResponse{} }
func (m *MsgDeletePolicyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeletePolicyResponse) ProtoMessage()    {}
func (*MsgDeletePolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{38}
}
func (m *MsgDeletePolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeletePolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeletePolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeletePolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeletePolicyResponse.Merge(m, src)
}
func (m *MsgDeletePolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeletePolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeletePolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeletePolicyResponse proto.InternalMessageInfo

type MsgMirrorObject struct {
	// operator defines the account address of the operator who has the DeleteObject permission of the object to be deleted.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// id defines the unique u256 for object.
	Id Uint `protobuf:"bytes,2,opt,name=id,proto3,customtype=Uint" json:"id"`
	// bucket_name defines the name of the bucket where the object is stored
	BucketName string `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// object_name defines the name of object
	ObjectName string `protobuf:"bytes,4,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// destination chain id
	DestChainId uint32 `protobuf:"varint,5,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
}

func (m *MsgMirrorObject) Reset()         { *m = MsgMirrorObject{} }
func (m *MsgMirrorObject) String() string { return proto.CompactTextString(m) }
func (*MsgMirrorObject) ProtoMessage()    {}
func (*MsgMirrorObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{39}
}
func (m *MsgMirrorObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMirrorObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMirrorObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMirrorObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMirrorObject.Merge(m, src)
}
func (m *MsgMirrorObject) XXX_Size() int {
	return m.Size()
}
func (m *MsgMirrorObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMirrorObject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMirrorObject proto.InternalMessageInfo

func (m *MsgMirrorObject) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMirrorObject) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMirrorObject) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *MsgMirrorObject) GetDestChainId() uint32 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

type MsgMirrorObjectResponse struct {
}

func (m *MsgMirrorObjectResponse) Reset()         { *m = MsgMirrorObjectResponse{} }
func (m *MsgMirrorObjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMirrorObjectResponse) ProtoMessage()    {}
func (*MsgMirrorObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{40}
}
func (m *MsgMirrorObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMirrorObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMirrorObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMirrorObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMirrorObjectResponse.Merge(m, src)
}
func (m *MsgMirrorObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMirrorObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMirrorObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMirrorObjectResponse proto.InternalMessageInfo

type MsgMirrorBucket struct {
	// creator defines the account address of the grantee who has the DeleteBucket permission of the bucket to be deleted.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// id defines the unique u256 for bucket.
	Id Uint `protobuf:"bytes,2,opt,name=id,proto3,customtype=Uint" json:"id"`
	// bucket_name defines a globally unique name of bucket
	BucketName string `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// destination chain id
	DestChainId uint32 `protobuf:"varint,4,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
}

func (m *MsgMirrorBucket) Reset()         { *m = MsgMirrorBucket{} }
func (m *MsgMirrorBucket) String() string { return proto.CompactTextString(m) }
func (*MsgMirrorBucket) ProtoMessage()    {}
func (*MsgMirrorBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{41}
}
func (m *MsgMirrorBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMirrorBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMirrorBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMirrorBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMirrorBucket.Merge(m, src)
}
func (m *MsgMirrorBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgMirrorBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMirrorBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMirrorBucket proto.InternalMessageInfo

func (m *MsgMirrorBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMirrorBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMirrorBucket) GetDestChainId() uint32 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

type MsgUpdateObjectInfoResponse struct {
}

func (m *MsgUpdateObjectInfoResponse) Reset()         { *m = MsgUpdateObjectInfoResponse{} }
func (m *MsgUpdateObjectInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateObjectInfoResponse) ProtoMessage()    {}
func (*MsgUpdateObjectInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{42}
}
func (m *MsgUpdateObjectInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateObjectInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateObjectInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateObjectInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateObjectInfoResponse.Merge(m, src)
}
func (m *MsgUpdateObjectInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateObjectInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateObjectInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateObjectInfoResponse proto.InternalMessageInfo

type MsgUpdateObjectInfo struct {
	// operator defines the account address of the operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name is the name of the bucket
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// object_name defines the name of bucket which you'll update
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// visibility means the object is private or public. if private, only bucket owner or grantee can read it,
	// otherwise every greenfield user can read it.
	Visibility VisibilityType `protobuf:"varint,4,opt,name=visibility,proto3,enum=greenfield.storage.VisibilityType" json:"visibility,omitempty"`
}

func (m *MsgUpdateObjectInfo) Reset()         { *m = MsgUpdateObjectInfo{} }
func (m *MsgUpdateObjectInfo) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateObjectInfo) ProtoMessage()    {}
func (*MsgUpdateObjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{43}
}
func (m *MsgUpdateObjectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateObjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateObjectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateObjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateObjectInfo.Merge(m, src)
}
func (m *MsgUpdateObjectInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateObjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateObjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateObjectInfo proto.InternalMessageInfo

func (m *MsgUpdateObjectInfo) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgUpdateObjectInfo) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgUpdateObjectInfo) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *MsgUpdateObjectInfo) GetVisibility() VisibilityType {
	if m != nil {
		return m.Visibility
	}
	return VISIBILITY_TYPE_UNSPECIFIED
}

type MsgMirrorBucketResponse struct {
}

func (m *MsgMirrorBucketResponse) Reset()         { *m = MsgMirrorBucketResponse{} }
func (m *MsgMirrorBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMirrorBucketResponse) ProtoMessage()    {}
func (*MsgMirrorBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{44}
}
func (m *MsgMirrorBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMirrorBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMirrorBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMirrorBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMirrorBucketResponse.Merge(m, src)
}
func (m *MsgMirrorBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMirrorBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMirrorBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMirrorBucketResponse proto.InternalMessageInfo

type MsgMirrorGroup struct {
	// operator defines the account address of the operator who is the owner of the group
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// id defines the unique u256 for group.
	Id Uint `protobuf:"bytes,2,opt,name=id,proto3,customtype=Uint" json:"id"`
	// group_name defines the name of the group
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// destination chain id
	DestChainId uint32 `protobuf:"varint,4,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
}

func (m *MsgMirrorGroup) Reset()         { *m = MsgMirrorGroup{} }
func (m *MsgMirrorGroup) String() string { return proto.CompactTextString(m) }
func (*MsgMirrorGroup) ProtoMessage()    {}
func (*MsgMirrorGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{45}
}
func (m *MsgMirrorGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMirrorGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMirrorGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMirrorGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMirrorGroup.Merge(m, src)
}
func (m *MsgMirrorGroup) XXX_Size() int {
	return m.Size()
}
func (m *MsgMirrorGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMirrorGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMirrorGroup proto.InternalMessageInfo

func (m *MsgMirrorGroup) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMirrorGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *MsgMirrorGroup) GetDestChainId() uint32 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

type MsgMirrorGroupResponse struct {
}

func (m *MsgMirrorGroupResponse) Reset()         { *m = MsgMirrorGroupResponse{} }
func (m *MsgMirrorGroupResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMirrorGroupResponse) ProtoMessage()    {}
func (*MsgMirrorGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{46}
}
func (m *MsgMirrorGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMirrorGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMirrorGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMirrorGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMirrorGroupResponse.Merge(m, src)
}
func (m *MsgMirrorGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMirrorGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMirrorGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMirrorGroupResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/storage parameters to update.
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{47}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{48}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// this line is used by starport scaffolding # proto/tx/message
type MsgMigrateBucket struct {
	// operator defines the account address of the operator who initial the migrate bucket
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket that need to be migrated
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// dst_primary_sp_id defines the destination SP for migration
	DstPrimarySpId uint32 `protobuf:"varint,3,opt,name=dst_primary_sp_id,json=dstPrimarySpId,proto3" json:"dst_primary_sp_id,omitempty"`
	// dst_primary_sp_approval defines the approval of destination sp
	DstPrimarySpApproval *common.Approval `protobuf:"bytes,4,opt,name=dst_primary_sp_approval,json=dstPrimarySpApproval,proto3" json:"dst_primary_sp_approval,omitempty"`
}

func (m *MsgMigrateBucket) Reset()         { *m = MsgMigrateBucket{} }
func (m *MsgMigrateBucket) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateBucket) ProtoMessage()    {}
func (*MsgMigrateBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{49}
}
func (m *MsgMigrateBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateBucket.Merge(m, src)
}
func (m *MsgMigrateBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateBucket proto.InternalMessageInfo

func (m *MsgMigrateBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgMigrateBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgMigrateBucket) GetDstPrimarySpId() uint32 {
	if m != nil {
		return m.DstPrimarySpId
	}
	return 0
}

func (m *MsgMigrateBucket) GetDstPrimarySpApproval() *common.Approval {
	if m != nil {
		return m.DstPrimarySpApproval
	}
	return nil
}

type MsgMigrateBucketResponse struct {
}

func (m *MsgMigrateBucketResponse) Reset()         { *m = MsgMigrateBucketResponse{} }
func (m *MsgMigrateBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateBucketResponse) ProtoMessage()    {}
func (*MsgMigrateBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{50}
}
func (m *MsgMigrateBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateBucketResponse.Merge(m, src)
}
func (m *MsgMigrateBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateBucketResponse proto.InternalMessageInfo

type MsgCompleteMigrateBucket struct {
	// operator defines the account address of the msg operator.
	// The CompleteMigrateBucket transaction must be initiated by the destination SP of the migration
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket that need to be migrated
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// global_virtual_group_family_id defines the family id which the bucket migrate to
	GlobalVirtualGroupFamilyId uint32 `protobuf:"varint,3,opt,name=global_virtual_group_family_id,json=globalVirtualGroupFamilyId,proto3" json:"global_virtual_group_family_id,omitempty"`
	// gvg_mappings defines the src and dst gvg mapping relationships which the bucket migrate to
	GvgMappings []*GVGMapping `protobuf:"bytes,4,rep,name=gvg_mappings,json=gvgMappings,proto3" json:"gvg_mappings,omitempty"`
}

func (m *MsgCompleteMigrateBucket) Reset()         { *m = MsgCompleteMigrateBucket{} }
func (m *MsgCompleteMigrateBucket) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteMigrateBucket) ProtoMessage()    {}
func (*MsgCompleteMigrateBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{51}
}
func (m *MsgCompleteMigrateBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteMigrateBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteMigrateBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteMigrateBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteMigrateBucket.Merge(m, src)
}
func (m *MsgCompleteMigrateBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteMigrateBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteMigrateBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteMigrateBucket proto.InternalMessageInfo

func (m *MsgCompleteMigrateBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgCompleteMigrateBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgCompleteMigrateBucket) GetGlobalVirtualGroupFamilyId() uint32 {
	if m != nil {
		return m.GlobalVirtualGroupFamilyId
	}
	return 0
}

func (m *MsgCompleteMigrateBucket) GetGvgMappings() []*GVGMapping {
	if m != nil {
		return m.GvgMappings
	}
	return nil
}

type MsgCompleteMigrateBucketResponse struct {
}

func (m *MsgCompleteMigrateBucketResponse) Reset()         { *m = MsgCompleteMigrateBucketResponse{} }
func (m *MsgCompleteMigrateBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteMigrateBucketResponse) ProtoMessage()    {}
func (*MsgCompleteMigrateBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{52}
}
func (m *MsgCompleteMigrateBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteMigrateBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteMigrateBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteMigrateBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteMigrateBucketResponse.Merge(m, src)
}
func (m *MsgCompleteMigrateBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteMigrateBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteMigrateBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteMigrateBucketResponse proto.InternalMessageInfo

type MsgCancelMigrateBucket struct {
	// operator defines the account address of the msg operator.
	// Only the user can send this transaction to cancel the migrate bucket
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket that need to be migrated
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (m *MsgCancelMigrateBucket) Reset()         { *m = MsgCancelMigrateBucket{} }
func (m *MsgCancelMigrateBucket) String() string { return proto.CompactTextString(m) }
func (*MsgCancelMigrateBucket) ProtoMessage()    {}
func (*MsgCancelMigrateBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{53}
}
func (m *MsgCancelMigrateBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelMigrateBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelMigrateBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelMigrateBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelMigrateBucket.Merge(m, src)
}
func (m *MsgCancelMigrateBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelMigrateBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelMigrateBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelMigrateBucket proto.InternalMessageInfo

func (m *MsgCancelMigrateBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgCancelMigrateBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

type MsgCancelMigrateBucketResponse struct {
}

func (m *MsgCancelMigrateBucketResponse) Reset()         { *m = MsgCancelMigrateBucketResponse{} }
func (m *MsgCancelMigrateBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelMigrateBucketResponse) ProtoMessage()    {}
func (*MsgCancelMigrateBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{54}
}
func (m *MsgCancelMigrateBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelMigrateBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelMigrateBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelMigrateBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelMigrateBucketResponse.Merge(m, src)
}
func (m *MsgCancelMigrateBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelMigrateBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelMigrateBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelMigrateBucketResponse proto.InternalMessageInfo

type MsgRejectMigrateBucket struct {
	// operator defines the account address of the msg operator.
	// only the Dest SP can send this transaction to reject the bucket migration.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// bucket_name defines the name of the bucket that need to be migrated
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (m *MsgRejectMigrateBucket) Reset()         { *m = MsgRejectMigrateBucket{} }
func (m *MsgRejectMigrateBucket) String() string { return proto.CompactTextString(m) }
func (*MsgRejectMigrateBucket) ProtoMessage()    {}
func (*MsgRejectMigrateBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{55}
}
func (m *MsgRejectMigrateBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectMigrateBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectMigrateBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectMigrateBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectMigrateBucket.Merge(m, src)
}
func (m *MsgRejectMigrateBucket) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectMigrateBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectMigrateBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectMigrateBucket proto.InternalMessageInfo

func (m *MsgRejectMigrateBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgRejectMigrateBucket) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

type MsgRejectMigrateBucketResponse struct {
}

func (m *MsgRejectMigrateBucketResponse) Reset()         { *m = MsgRejectMigrateBucketResponse{} }
func (m *MsgRejectMigrateBucketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRejectMigrateBucketResponse) ProtoMessage()    {}
func (*MsgRejectMigrateBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddb71b028305a3cc, []int{56}
}
func (m *MsgRejectMigrateBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectMigrateBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectMigrateBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectMigrateBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectMigrateBucketResponse.Merge(m, src)
}
func (m *MsgRejectMigrateBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectMigrateBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectMigrateBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectMigrateBucketResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateBucket)(nil), "greenfield.storage.MsgCreateBucket")
	proto.RegisterType((*MsgCreateBucketResponse)(nil), "greenfield.storage.MsgCreateBucketResponse")
	proto.RegisterType((*MsgDeleteBucket)(nil), "greenfield.storage.MsgDeleteBucket")
	proto.RegisterType((*MsgDeleteBucketResponse)(nil), "greenfield.storage.MsgDeleteBucketResponse")
	proto.RegisterType((*MsgDiscontinueBucket)(nil), "greenfield.storage.MsgDiscontinueBucket")
	proto.RegisterType((*MsgDiscontinueBucketResponse)(nil), "greenfield.storage.MsgDiscontinueBucketResponse")
	proto.RegisterType((*MsgCreateObject)(nil), "greenfield.storage.MsgCreateObject")
	proto.RegisterType((*MsgCreateObjectResponse)(nil), "greenfield.storage.MsgCreateObjectResponse")
	proto.RegisterType((*MsgSealObject)(nil), "greenfield.storage.MsgSealObject")
	proto.RegisterType((*MsgSealObjectResponse)(nil), "greenfield.storage.MsgSealObjectResponse")
	proto.RegisterType((*MsgRejectSealObject)(nil), "greenfield.storage.MsgRejectSealObject")
	proto.RegisterType((*MsgRejectSealObjectResponse)(nil), "greenfield.storage.MsgRejectSealObjectResponse")
	proto.RegisterType((*MsgCopyObject)(nil), "greenfield.storage.MsgCopyObject")
	proto.RegisterType((*MsgCopyObjectResponse)(nil), "greenfield.storage.MsgCopyObjectResponse")
	proto.RegisterType((*MsgDeleteObject)(nil), "greenfield.storage.MsgDeleteObject")
	proto.RegisterType((*MsgDeleteObjectResponse)(nil), "greenfield.storage.MsgDeleteObjectResponse")
	proto.RegisterType((*MsgDiscontinueObject)(nil), "greenfield.storage.MsgDiscontinueObject")
	proto.RegisterType((*MsgDiscontinueObjectResponse)(nil), "greenfield.storage.MsgDiscontinueObjectResponse")
	proto.RegisterType((*MsgCreateGroup)(nil), "greenfield.storage.MsgCreateGroup")
	proto.RegisterType((*MsgCreateGroupResponse)(nil), "greenfield.storage.MsgCreateGroupResponse")
	proto.RegisterType((*MsgDeleteGroup)(nil), "greenfield.storage.MsgDeleteGroup")
	proto.RegisterType((*MsgDeleteGroupResponse)(nil), "greenfield.storage.MsgDeleteGroupResponse")
	proto.RegisterType((*MsgUpdateGroupMember)(nil), "greenfield.storage.MsgUpdateGroupMember")
	proto.RegisterType((*MsgUpdateGroupMemberResponse)(nil), "greenfield.storage.MsgUpdateGroupMemberResponse")
	proto.RegisterType((*MsgRenewGroupMember)(nil), "greenfield.storage.MsgRenewGroupMember")
	proto.RegisterType((*MsgRenewGroupMemberResponse)(nil), "greenfield.storage.MsgRenewGroupMemberResponse")
	proto.RegisterType((*MsgGroupMember)(nil), "greenfield.storage.MsgGroupMember")
	proto.RegisterType((*MsgUpdateGroupExtra)(nil), "greenfield.storage.MsgUpdateGroupExtra")
	proto.RegisterType((*MsgUpdateGroupExtraResponse)(nil), "greenfield.storage.MsgUpdateGroupExtraResponse")
	proto.RegisterType((*MsgLeaveGroup)(nil), "greenfield.storage.MsgLeaveGroup")
	proto.RegisterType((*MsgLeaveGroupResponse)(nil), "greenfield.storage.MsgLeaveGroupResponse")
	proto.RegisterType((*MsgUpdateBucketInfo)(nil), "greenfield.storage.MsgUpdateBucketInfo")
	proto.RegisterType((*MsgUpdateBucketInfoResponse)(nil), "greenfield.storage.MsgUpdateBucketInfoResponse")
	proto.RegisterType((*MsgCancelCreateObject)(nil), "greenfield.storage.MsgCancelCreateObject")
	proto.RegisterType((*MsgCancelCreateObjectResponse)(nil), "greenfield.storage.MsgCancelCreateObjectResponse")
	proto.RegisterType((*MsgPutPolicy)(nil), "greenfield.storage.MsgPutPolicy")
	proto.RegisterType((*MsgPutPolicyResponse)(nil), "greenfield.storage.MsgPutPolicyResponse")
	proto.RegisterType((*MsgDeletePolicy)(nil), "greenfield.storage.MsgDeletePolicy")
	proto.RegisterType((*MsgDeletePolicyResponse)(nil), "greenfield.storage.MsgDeletePolicyResponse")
	proto.RegisterType((*MsgMirrorObject)(nil), "greenfield.storage.MsgMirrorObject")
	proto.RegisterType((*MsgMirrorObjectResponse)(nil), "greenfield.storage.MsgMirrorObjectResponse")
	proto.RegisterType((*MsgMirrorBucket)(nil), "greenfield.storage.MsgMirrorBucket")
	proto.RegisterType((*MsgUpdateObjectInfoResponse)(nil), "greenfield.storage.MsgUpdateObjectInfoResponse")
	proto.RegisterType((*MsgUpdateObjectInfo)(nil), "greenfield.storage.MsgUpdateObjectInfo")
	proto.RegisterType((*MsgMirrorBucketResponse)(nil), "greenfield.storage.MsgMirrorBucketResponse")
	proto.RegisterType((*MsgMirrorGroup)(nil), "greenfield.storage.MsgMirrorGroup")
	proto.RegisterType((*MsgMirrorGroupResponse)(nil), "greenfield.storage.MsgMirrorGroupResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "greenfield.storage.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "greenfield.storage.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgMigrateBucket)(nil), "greenfield.storage.MsgMigrateBucket")
	proto.RegisterType((*MsgMigrateBucketResponse)(nil), "greenfield.storage.MsgMigrateBucketResponse")
	proto.RegisterType((*MsgCompleteMigrateBucket)(nil), "greenfield.storage.MsgCompleteMigrateBucket")
	proto.RegisterType((*MsgCompleteMigrateBucketResponse)(nil), "greenfield.storage.MsgCompleteMigrateBucketResponse")
	proto.RegisterType((*MsgCancelMigrateBucket)(nil), "greenfield.storage.MsgCancelMigrateBucket")
	proto.RegisterType((*MsgCancelMigrateBucketResponse)(nil), "greenfield.storage.MsgCancelMigrateBucketResponse")
	proto.RegisterType((*MsgRejectMigrateBucket)(nil), "greenfield.storage.MsgRejectMigrateBucket")
	proto.RegisterType((*MsgRejectMigrateBucketResponse)(nil), "greenfield.storage.MsgRejectMigrateBucketResponse")
}

func init() { proto.RegisterFile("greenfield/storage/tx.proto", fileDescriptor_ddb71b028305a3cc) }

var fileDescriptor_ddb71b028305a3cc = []byte{
	// 2269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0x36, 0x45, 0xca, 0x12, 0x1f, 0xa9, 0x1f, 0xaf, 0x15, 0x8b, 0xa1, 0x6a, 0x8a, 0x66, 0x8a,
	0x44, 0xfe, 0x13, 0x1d, 0xd5, 0x35, 0x52, 0xa1, 0x28, 0x2a, 0x29, 0x8d, 0x4b, 0x24, 0xac, 0x95,
	0x95, 0xed, 0x02, 0x01, 0x0a, 0x66, 0xc8, 0x1d, 0xaf, 0xb6, 0x21, 0x77, 0xb7, 0x33, 0x4b, 0xd9,
	0x4c, 0x81, 0x1e, 0x7a, 0xe9, 0xa9, 0x40, 0x80, 0xf4, 0xd0, 0x43, 0xd1, 0x73, 0x4f, 0x45, 0x51,
	0xe4, 0x5c, 0xf4, 0x12, 0xc0, 0xe8, 0xc9, 0xc8, 0xa9, 0x28, 0x0a, 0x37, 0xb0, 0x0b, 0x14, 0xbd,
	0xf6, 0xd2, 0x6b, 0x30, 0x3b, 0xb3, 0xbb, 0xc3, 0xfd, 0xa5, 0x64, 0x29, 0xd6, 0x49, 0xda, 0x99,
	0x6f, 0x66, 0xde, 0xff, 0xbc, 0xf7, 0x86, 0xb0, 0xa2, 0x13, 0x8c, 0xcd, 0x07, 0x06, 0xee, 0x6b,
	0x4d, 0xea, 0x58, 0x04, 0xe9, 0xb8, 0xe9, 0x3c, 0x5a, 0xb7, 0x89, 0xe5, 0x58, 0x8a, 0x12, 0x4c,
	0xae, 0x8b, 0xc9, 0xea, 0x72, 0xcf, 0xa2, 0x03, 0x8b, 0x36, 0x07, 0x54, 0x6f, 0x1e, 0xbc, 0xc9,
	0xfe, 0x70, 0x70, 0xf5, 0x55, 0x3e, 0xd1, 0x71, 0xbf, 0x9a, 0xfc, 0x43, 0x4c, 0x2d, 0xe9, 0x96,
	0x6e, 0xf1, 0x71, 0xf6, 0x9f, 0x18, 0x5d, 0xd5, 0x2d, 0x4b, 0xef, 0xe3, 0xa6, 0xfb, 0xd5, 0x1d,
	0x3e, 0x68, 0x3a, 0xc6, 0x00, 0x53, 0x07, 0x0d, 0x6c, 0x01, 0xa8, 0x4b, 0xb4, 0xf5, 0xac, 0xc1,
	0xc0, 0x32, 0x9b, 0xc8, 0xb6, 0x89, 0x75, 0x80, 0xfa, 0xfe, 0x16, 0x11, 0xc4, 0x43, 0x82, 0x6c,
	0x1b, 0x13, 0x01, 0x68, 0x48, 0x00, 0x1b, 0x93, 0x81, 0x41, 0xa9, 0x61, 0x99, 0x02, 0x1b, 0xb3,
	0x89, 0x27, 0x82, 0x4c, 0x80, 0x8d, 0x08, 0x1a, 0x08, 0xfe, 0x1a, 0x7f, 0xc9, 0xc3, 0x42, 0x9b,
	0xea, 0x3b, 0x04, 0x23, 0x07, 0x6f, 0x0f, 0x7b, 0x1f, 0x61, 0x47, 0xd9, 0x80, 0x99, 0x1e, 0xfb,
	0xb6, 0x48, 0x25, 0x57, 0xcf, 0xad, 0x15, 0xb7, 0x2b, 0x5f, 0x7c, 0x76, 0x7d, 0x49, 0x88, 0x65,
	0x4b, 0xd3, 0x08, 0xa6, 0x74, 0xcf, 0x21, 0x86, 0xa9, 0xab, 0x1e, 0x50, 0x59, 0x85, 0x52, 0xd7,
	0x5d, 0xdd, 0x31, 0xd1, 0x00, 0x57, 0xa6, 0xd8, 0x3a, 0x15, 0xf8, 0xd0, 0x8f, 0xd0, 0x00, 0x2b,
	0xdb, 0x00, 0x07, 0x06, 0x35, 0xba, 0x46, 0xdf, 0x70, 0x46, 0x95, 0x7c, 0x3d, 0xb7, 0x36, 0xbf,
	0xd1, 0x58, 0x8f, 0x6a, 0x69, 0xfd, 0xbe, 0x8f, 0xba, 0x3b, 0xb2, 0xb1, 0x2a, 0xad, 0x52, 0xb6,
	0x60, 0xc1, 0x46, 0xa3, 0x01, 0x36, 0x9d, 0x0e, 0xe2, 0x64, 0x54, 0x0a, 0x19, 0x04, 0xce, 0x8b,
	0x05, 0x62, 0x54, 0x79, 0x07, 0x14, 0x9b, 0x18, 0x03, 0x44, 0x46, 0x1d, 0x6a, 0xfb, 0xbb, 0x4c,
	0x67, 0xec, 0xb2, 0x28, 0xd6, 0xec, 0xd9, 0xde, 0x3e, 0xef, 0xc2, 0x79, 0x79, 0x1f, 0xa1, 0xdb,
	0xca, 0xd9, 0x7a, 0x6e, 0xad, 0xb4, 0xb1, 0x22, 0xf3, 0x25, 0xf4, 0xb1, 0x25, 0x20, 0xea, 0xb9,
	0x60, 0x2f, 0x31, 0xa4, 0x5c, 0x03, 0xa5, 0xb7, 0x8f, 0x88, 0x8e, 0xb5, 0x0e, 0xc1, 0x48, 0xeb,
	0xfc, 0x6c, 0x68, 0x39, 0xa8, 0x32, 0x53, 0xcf, 0xad, 0x15, 0xd4, 0x45, 0x31, 0xa3, 0x62, 0xa4,
	0xbd, 0xcf, 0xc6, 0x37, 0xcb, 0xbf, 0xfc, 0xcf, 0x9f, 0xae, 0x78, 0x82, 0x6f, 0xec, 0xc1, 0x72,
	0x48, 0x7f, 0x2a, 0xa6, 0xb6, 0x65, 0x52, 0xac, 0xbc, 0x05, 0x45, 0xa1, 0x13, 0x43, 0x13, 0x9a,
	0x5c, 0x79, 0xfc, 0x74, 0xf5, 0xcc, 0x3f, 0x9e, 0xae, 0x16, 0xee, 0x19, 0xa6, 0xf3, 0xc5, 0x67,
	0xd7, 0x4b, 0x82, 0x5d, 0xf6, 0xa9, 0xce, 0x72, 0x74, 0x4b, 0x6b, 0x3c, 0x74, 0x8d, 0xe2, 0x6d,
	0xdc, 0xc7, 0xbe, 0x51, 0xdc, 0x84, 0x59, 0xcb, 0xc6, 0x64, 0x22, 0xab, 0xf0, 0x91, 0x99, 0x66,
	0xb1, 0x39, 0xc7, 0x98, 0xf1, 0xf1, 0x8d, 0x57, 0x5d, 0x6e, 0xe4, 0x83, 0x3d, 0x6e, 0x1a, 0xbf,
	0xc9, 0xc1, 0x12, 0x9b, 0x33, 0x68, 0xcf, 0x32, 0x1d, 0xc3, 0x1c, 0x9e, 0x2c, 0x65, 0xca, 0x05,
	0x38, 0x4b, 0x30, 0xa2, 0x96, 0xe9, 0x1a, 0x6b, 0x51, 0x15, 0x5f, 0x61, 0x8a, 0x6b, 0xf0, 0x8d,
	0x38, 0xaa, 0x7c, 0xb2, 0xff, 0x2d, 0x3b, 0xd8, 0x9d, 0xee, 0x4f, 0x71, 0xef, 0x84, 0x1c, 0x6c,
	0x15, 0x4a, 0x96, 0xbb, 0x3d, 0x07, 0x70, 0xa2, 0x81, 0x0f, 0xb9, 0x80, 0x4b, 0x50, 0xb6, 0xd1,
	0xa8, 0x6f, 0x21, 0xad, 0x43, 0x8d, 0x8f, 0xb1, 0xeb, 0x3a, 0x05, 0xb5, 0x24, 0xc6, 0xf6, 0x8c,
	0x8f, 0xc3, 0x4e, 0x3a, 0x7d, 0x24, 0x27, 0xbd, 0x04, 0x65, 0x26, 0x0a, 0xe6, 0xa4, 0xce, 0xc8,
	0xc6, 0xae, 0x4b, 0x14, 0xd5, 0x92, 0x18, 0x63, 0xf0, 0x24, 0xe7, 0x99, 0x39, 0x92, 0xf3, 0x5c,
	0x86, 0x45, 0xfc, 0xc8, 0x66, 0x7c, 0xf7, 0xf6, 0x71, 0xef, 0x23, 0x3a, 0x1c, 0xd0, 0xca, 0x6c,
	0x3d, 0xbf, 0x56, 0x56, 0x17, 0xf8, 0xf8, 0x8e, 0x37, 0xac, 0xbc, 0x0b, 0x0b, 0x04, 0x6b, 0x43,
	0x53, 0x43, 0x66, 0x6f, 0xc4, 0xa9, 0x2b, 0x26, 0xf3, 0xa8, 0xfa, 0x50, 0x97, 0xc7, 0x79, 0x32,
	0xf6, 0x9d, 0xe2, 0x86, 0x5c, 0xcb, 0xb2, 0x1b, 0x0a, 0xc5, 0x4c, 0xe8, 0x86, 0x1c, 0xdd, 0xd2,
	0x1a, 0x9f, 0x4e, 0xc1, 0x5c, 0x9b, 0xea, 0x7b, 0x18, 0xf5, 0x85, 0xe5, 0x9c, 0x90, 0xad, 0x67,
	0xda, 0xce, 0xb7, 0x61, 0x59, 0xef, 0x5b, 0x5d, 0xd4, 0xef, 0x1c, 0x18, 0xc4, 0x19, 0xa2, 0x7e,
	0x47, 0x27, 0xd6, 0xd0, 0x66, 0x1c, 0x31, 0x33, 0x9a, 0x53, 0x97, 0xf8, 0xf4, 0x7d, 0x3e, 0x7b,
	0x9b, 0x4d, 0xb6, 0x34, 0xe5, 0x6d, 0x58, 0xa5, 0xb8, 0x67, 0x99, 0x9a, 0x50, 0x75, 0xb7, 0x4f,
	0x3b, 0x48, 0xd7, 0x3b, 0xd4, 0xd0, 0x4d, 0xe4, 0x0c, 0x09, 0xe6, 0xa1, 0xb7, 0xac, 0xae, 0xf8,
	0xb0, 0x3d, 0x7b, 0xbb, 0x4f, 0xb7, 0x74, 0x7d, 0xcf, 0x87, 0x84, 0x3d, 0x6e, 0x19, 0x5e, 0x19,
	0x13, 0x8a, 0xef, 0x6a, 0xbf, 0xcb, 0xc1, 0xf9, 0x36, 0xd5, 0x55, 0xcc, 0x46, 0x5f, 0xbe, 0xd0,
	0xc2, 0x74, 0x5f, 0x84, 0x95, 0x18, 0xea, 0x7c, 0xea, 0xff, 0xc8, 0x95, 0xbd, 0x63, 0xd9, 0x23,
	0x41, 0x77, 0x35, 0x4c, 0xb7, 0x44, 0xdd, 0xeb, 0xb0, 0x40, 0x49, 0xaf, 0x13, 0xa5, 0x70, 0x8e,
	0x92, 0xde, 0x76, 0x40, 0xe4, 0xeb, 0xb0, 0xa0, 0x51, 0x67, 0x0c, 0xc7, 0x09, 0x9d, 0xd3, 0xa8,
	0x33, 0x8e, 0x63, 0xfb, 0xc9, 0x0c, 0x15, 0xfc, 0xfd, 0xee, 0x04, 0x86, 0x20, 0xf6, 0x93, 0x71,
	0xd3, 0xfe, 0x7e, 0x12, 0x4e, 0x85, 0x65, 0x86, 0x3b, 0xe2, 0x1d, 0xb9, 0xa4, 0x51, 0x67, 0x37,
	0xec, 0xe9, 0x61, 0x79, 0xbe, 0xef, 0xda, 0x41, 0x20, 0xaf, 0x63, 0x70, 0xb8, 0xdf, 0xe6, 0xa4,
	0x8b, 0xef, 0x74, 0x59, 0x8f, 0x7c, 0x33, 0x86, 0x2c, 0xe7, 0x49, 0xe4, 0x66, 0x3c, 0x59, 0xd2,
	0x37, 0x01, 0x7c, 0xf9, 0xd2, 0x4a, 0xbe, 0x9e, 0xcf, 0x12, 0x70, 0xd1, 0x13, 0x30, 0x95, 0x6e,
	0xd5, 0xc2, 0xa1, 0x6e, 0xd5, 0x10, 0xcb, 0xbf, 0xca, 0xc1, 0xbc, 0x1f, 0x6f, 0xdd, 0x68, 0x73,
	0xa4, 0x4b, 0xf5, 0x22, 0x00, 0x8f, 0x63, 0x12, 0xa7, 0x45, 0x77, 0xc4, 0x65, 0x74, 0x09, 0xa6,
	0xf1, 0x23, 0x87, 0x20, 0xa1, 0x1d, 0xfe, 0x11, 0x0a, 0xfc, 0xbb, 0x70, 0x61, 0x9c, 0x10, 0xdf,
	0x0c, 0x6f, 0xc1, 0xac, 0x1f, 0x24, 0x27, 0xb0, 0xc2, 0x19, 0x9d, 0x07, 0xcd, 0x86, 0xe3, 0xb2,
	0xc6, 0x35, 0xcd, 0x59, 0x3b, 0x9a, 0x1e, 0xd3, 0x99, 0x0b, 0x4b, 0xbc, 0xe2, 0xf2, 0x21, 0x9d,
	0xea, 0xcb, 0xfa, 0xf3, 0x29, 0xd7, 0xbc, 0xee, 0xd9, 0x9a, 0xc7, 0x62, 0x1b, 0x0f, 0xba, 0x98,
	0x1c, 0x91, 0xac, 0xef, 0x40, 0x89, 0x93, 0x65, 0x3d, 0x34, 0x31, 0xe1, 0x74, 0xa5, 0x2c, 0xe4,
	0x3c, 0xdc, 0x61, 0xd8, 0x10, 0x47, 0xf9, 0xb0, 0xba, 0x7e, 0x08, 0xf3, 0x03, 0x97, 0x32, 0xda,
	0x71, 0x2c, 0x96, 0xdb, 0x57, 0x0a, 0xf5, 0xfc, 0x5a, 0x29, 0xfe, 0x76, 0x6f, 0x53, 0x5d, 0xe2,
	0x45, 0x2d, 0x8b, 0x95, 0x77, 0xad, 0x2d, 0x8d, 0xdd, 0x5b, 0xe7, 0xa4, 0x9d, 0x34, 0x57, 0x28,
	0x95, 0x69, 0xd7, 0xd0, 0x93, 0x29, 0x5d, 0xf0, 0xb7, 0xe0, 0x52, 0x8c, 0xb7, 0xe9, 0x88, 0x18,
	0x7d, 0x39, 0xff, 0xcf, 0xbb, 0xbe, 0x4c, 0xfc, 0xf0, 0x34, 0x8b, 0xf9, 0xbb, 0x30, 0x23, 0x38,
	0x3d, 0x84, 0x7c, 0xbd, 0x25, 0x49, 0x97, 0xe2, 0x38, 0xcf, 0xbe, 0x4c, 0x7e, 0xcd, 0xfd, 0x5c,
	0x16, 0xc7, 0x0d, 0x38, 0xcb, 0xf7, 0xca, 0x14, 0x86, 0xc0, 0x29, 0x2d, 0x60, 0x99, 0xa0, 0x41,
	0x90, 0x63, 0x58, 0x66, 0x87, 0x95, 0xea, 0xae, 0x38, 0x4a, 0x1b, 0xd5, 0x75, 0x5e, 0xc7, 0xaf,
	0x7b, 0x75, 0xfc, 0xfa, 0x5d, 0xaf, 0x8e, 0xdf, 0x2e, 0x7c, 0xf2, 0xaf, 0xd5, 0x9c, 0x3a, 0x1f,
	0x2c, 0x64, 0x53, 0x8d, 0xbf, 0x71, 0x1d, 0x49, 0x4a, 0xfc, 0x01, 0x8b, 0x09, 0xa7, 0x4e, 0x47,
	0x7e, 0xe4, 0x2a, 0xc8, 0x91, 0x2b, 0x56, 0xf6, 0x61, 0x5e, 0x7c, 0xd9, 0xff, 0x21, 0xe7, 0x26,
	0x24, 0xef, 0x61, 0x74, 0x20, 0xe2, 0xd0, 0xe1, 0x45, 0x7f, 0x62, 0x1c, 0x6e, 0x96, 0x18, 0x2f,
	0xe2, 0x18, 0x91, 0x12, 0x06, 0x94, 0x06, 0x57, 0xe3, 0x94, 0xa4, 0x2f, 0x9e, 0xee, 0xb4, 0xcc,
	0x07, 0xd6, 0x49, 0xdd, 0x8c, 0xef, 0xc5, 0x16, 0xf2, 0x79, 0xd7, 0xd8, 0x6a, 0x31, 0x09, 0xcf,
	0xbd, 0x96, 0xe9, 0xdc, 0xba, 0x79, 0x1f, 0xf5, 0x87, 0x38, 0x5a, 0xe8, 0x1f, 0x47, 0xbb, 0xe3,
	0x18, 0x0a, 0xba, 0x34, 0xab, 0x09, 0x24, 0xea, 0x4b, 0xfc, 0xf7, 0x39, 0x9e, 0x96, 0x21, 0xb3,
	0x87, 0xfb, 0x63, 0x55, 0xef, 0x29, 0x49, 0xa4, 0x56, 0xe1, 0x62, 0x2c, 0x7d, 0x3e, 0x07, 0x7f,
	0x9d, 0x82, 0x72, 0x9b, 0xea, 0xbb, 0x43, 0x67, 0xd7, 0xea, 0x1b, 0xbd, 0xd1, 0x11, 0x09, 0xff,
	0x1e, 0x14, 0x6d, 0x62, 0x98, 0x3d, 0xc3, 0x46, 0x7d, 0x11, 0x6f, 0xea, 0xb2, 0xe4, 0x83, 0x9e,
	0xde, 0xfa, 0xae, 0x87, 0x53, 0x83, 0x25, 0x2c, 0xfb, 0x27, 0x98, 0x5a, 0x43, 0xd2, 0xf3, 0x98,
	0xf2, 0xbf, 0x95, 0xef, 0x03, 0x50, 0x07, 0x39, 0x98, 0xa9, 0xda, 0x8b, 0xc2, 0x49, 0x9b, 0xef,
	0x79, 0x40, 0x55, 0x5a, 0xa3, 0xb4, 0xa3, 0x31, 0x71, 0x26, 0x33, 0x26, 0xce, 0x3e, 0x7e, 0xba,
	0x9a, 0x8b, 0x8b, 0x8b, 0x61, 0x19, 0xef, 0xba, 0x19, 0x83, 0x2f, 0x41, 0x39, 0x33, 0xb7, 0xdd,
	0x11, 0xaf, 0x70, 0xcc, 0xca, 0xcc, 0x39, 0xba, 0xa5, 0x35, 0xfe, 0x2c, 0x67, 0xe6, 0xa7, 0x55,
	0x2f, 0x61, 0x31, 0xec, 0x49, 0x39, 0xfb, 0xb1, 0x49, 0xe2, 0xbf, 0x5c, 0x12, 0x6d, 0x83, 0x10,
	0x8b, 0xbc, 0x90, 0x6b, 0x5d, 0x85, 0x29, 0x43, 0x13, 0x31, 0x39, 0xf5, 0xf0, 0x29, 0x43, 0x0b,
	0xfb, 0x61, 0x3e, 0xcb, 0x0f, 0x0b, 0x91, 0x1e, 0x42, 0x03, 0xe6, 0x34, 0x4c, 0x9d, 0x4e, 0x6f,
	0x1f, 0x19, 0x26, 0x63, 0x7b, 0xda, 0xed, 0x1c, 0x94, 0xd8, 0xe0, 0x0e, 0x1b, 0x6b, 0x69, 0xf1,
	0x45, 0x8f, 0xcc, 0xaa, 0xef, 0xa5, 0x8f, 0x65, 0x31, 0xbc, 0x50, 0x27, 0xf0, 0x78, 0xc5, 0x10,
	0xe1, 0xb2, 0x90, 0xc9, 0xa5, 0x1c, 0x51, 0x39, 0x97, 0x63, 0x11, 0xf5, 0x4b, 0x39, 0xe7, 0x08,
	0xe6, 0x5f, 0x5a, 0x2f, 0x68, 0xfc, 0x4e, 0x29, 0x1c, 0xc7, 0x9d, 0x22, 0xeb, 0x39, 0xd4, 0x3f,
	0xfd, 0x9c, 0x67, 0x80, 0x7c, 0xee, 0x45, 0xca, 0xa1, 0x43, 0xa9, 0x39, 0x23, 0xbd, 0x3a, 0x82,
	0x92, 0x79, 0x7d, 0x25, 0xb1, 0xe1, 0x73, 0xf8, 0x29, 0xb7, 0x64, 0xae, 0xdf, 0x5d, 0xf7, 0x71,
	0x46, 0xb9, 0x05, 0x45, 0x34, 0x74, 0xf6, 0x2d, 0xc2, 0x44, 0x9c, 0xc5, 0x63, 0x00, 0x55, 0xde,
	0x82, 0xb3, 0xfc, 0x79, 0x27, 0xc8, 0x70, 0xa3, 0x7a, 0xe1, 0x67, 0x6c, 0x17, 0x98, 0x10, 0x54,
	0x81, 0xdf, 0x9c, 0x67, 0xe4, 0x06, 0x3b, 0x09, 0x95, 0xc8, 0x44, 0xf9, 0x04, 0xff, 0x3f, 0x07,
	0x8b, 0x2e, 0x2f, 0x3a, 0x41, 0x27, 0xfc, 0x3e, 0xa0, 0x5c, 0x86, 0x73, 0xa1, 0x3e, 0x92, 0xa1,
	0xb9, 0xfa, 0x98, 0x53, 0xe7, 0xe5, 0x26, 0x51, 0x4b, 0x4b, 0x6b, 0x39, 0x15, 0x8e, 0xa9, 0xe5,
	0x54, 0x85, 0x4a, 0x98, 0xf1, 0xa0, 0x25, 0x31, 0xe5, 0x4e, 0xee, 0x58, 0x03, 0x9b, 0xc5, 0xfb,
	0xaf, 0x45, 0x3a, 0xdb, 0x50, 0x8b, 0x6d, 0xcb, 0x3e, 0x40, 0x03, 0xa3, 0x3f, 0x0a, 0x44, 0x55,
	0x8d, 0x76, 0x67, 0xdf, 0x71, 0x21, 0x2d, 0x4d, 0xd9, 0x82, 0xb2, 0x7e, 0xa0, 0x77, 0x06, 0xc8,
	0xb6, 0x0d, 0x53, 0xf7, 0xb2, 0x89, 0x5a, 0x9c, 0xe1, 0xdc, 0xbe, 0x7f, 0xbb, 0xcd, 0x61, 0x6a,
	0x49, 0x3f, 0xd0, 0xc5, 0xff, 0x91, 0x9a, 0xae, 0x01, 0xf5, 0x24, 0x41, 0xf8, 0xd2, 0xfa, 0x05,
	0x6f, 0x9b, 0xb8, 0x59, 0xd8, 0xd7, 0x21, 0xaa, 0x30, 0x8d, 0x75, 0xa8, 0xc5, 0x9f, 0x1f, 0xa2,
	0x90, 0xb7, 0x6b, 0x5f, 0x1e, 0x85, 0x31, 0xe7, 0x7b, 0x14, 0x6e, 0xfc, 0xf3, 0x02, 0xe4, 0xdb,
	0x54, 0x57, 0x3e, 0x84, 0xf2, 0xd8, 0xfb, 0xed, 0x6b, 0x09, 0xf5, 0xb8, 0x0c, 0xaa, 0x5e, 0x9d,
	0x00, 0xe4, 0x67, 0x2b, 0x1f, 0x42, 0x79, 0xec, 0x31, 0x30, 0xe9, 0x04, 0x19, 0x94, 0x78, 0x42,
	0xdc, 0xeb, 0x9e, 0xd2, 0x87, 0xc5, 0x48, 0x91, 0xf6, 0x46, 0xc2, 0x06, 0x61, 0x60, 0xb5, 0x39,
	0x21, 0x50, 0xe6, 0x67, 0x2c, 0x71, 0x48, 0xe2, 0x47, 0x06, 0x25, 0xf2, 0x13, 0x77, 0x6d, 0x29,
	0x16, 0x9c, 0x8b, 0xbe, 0x54, 0xae, 0x25, 0x49, 0x24, 0x8c, 0xac, 0xde, 0x98, 0x14, 0x29, 0xb3,
	0x34, 0x56, 0x6d, 0xa5, 0x1b, 0x01, 0x07, 0x65, 0x18, 0x41, 0xa8, 0xad, 0xfe, 0x01, 0x80, 0xf4,
	0xa8, 0x72, 0x29, 0x61, 0x69, 0x00, 0xa9, 0x5e, 0xce, 0x84, 0xc8, 0xea, 0x8f, 0x3c, 0xdb, 0x24,
	0xa9, 0x3f, 0x0c, 0x4c, 0x54, 0x7f, 0xd2, 0x53, 0x0b, 0xe3, 0x44, 0x7a, 0x66, 0x49, 0xe2, 0x24,
	0x80, 0x24, 0x72, 0x12, 0xf3, 0xf8, 0xe0, 0xbb, 0x4a, 0x86, 0x1e, 0x64, 0x50, 0x86, 0xab, 0x84,
	0x4e, 0x20, 0xa0, 0xc4, 0x54, 0xd7, 0x89, 0x24, 0x46, 0xa0, 0xd5, 0x37, 0x27, 0x86, 0x46, 0x1d,
	0x26, 0x83, 0x2b, 0x19, 0x94, 0xe1, 0x30, 0xa1, 0x13, 0xc6, 0x1d, 0x46, 0x1c, 0x33, 0x81, 0xc3,
	0x88, 0xb3, 0x6e, 0x4c, 0x8a, 0x8c, 0x46, 0x1c, 0x29, 0xa5, 0x4e, 0x8f, 0x38, 0x01, 0x30, 0x23,
	0xe2, 0x44, 0x93, 0x78, 0xe5, 0x27, 0x50, 0x92, 0x1f, 0x2b, 0x1a, 0xa9, 0x8e, 0xe7, 0x62, 0xaa,
	0x57, 0xb2, 0x31, 0xf2, 0xf6, 0xf2, 0x83, 0x41, 0x23, 0xd5, 0x9e, 0xd2, 0xb7, 0x8f, 0x79, 0x02,
	0x60, 0xca, 0x89, 0xb6, 0xff, 0xd7, 0x52, 0x65, 0x20, 0x21, 0x13, 0x95, 0x93, 0xd8, 0x0b, 0x0f,
	0x94, 0x23, 0xf5, 0x58, 0xdf, 0xc8, 0xde, 0xc5, 0x05, 0x66, 0x28, 0x27, 0xda, 0xe9, 0x64, 0xf1,
	0x40, 0xea, 0x72, 0x26, 0xc5, 0x83, 0x00, 0x92, 0x18, 0x0f, 0xa2, 0x1d, 0x48, 0xa6, 0x19, 0xb9,
	0x76, 0x69, 0xa4, 0xfa, 0x44, 0xba, 0x66, 0x62, 0x8a, 0x07, 0x1e, 0x38, 0x43, 0x0f, 0x06, 0xc9,
	0x81, 0x73, 0x1c, 0x98, 0x12, 0x38, 0xe3, 0xdb, 0xf1, 0xca, 0x8f, 0xa1, 0x18, 0xb4, 0xc5, 0xea,
	0x09, 0xab, 0x7d, 0x44, 0x75, 0x2d, 0x0b, 0x11, 0x8d, 0x9a, 0x62, 0xef, 0xf4, 0xa8, 0x29, 0xb6,
	0xbf, 0x3a, 0x01, 0x48, 0x3e, 0x61, 0xac, 0xc2, 0x7a, 0x2d, 0xd5, 0x48, 0x38, 0x28, 0xf1, 0x84,
	0xb8, 0xb2, 0x48, 0xe9, 0xc1, 0xdc, 0x78, 0x9e, 0xf8, 0xcd, 0x44, 0x3d, 0x4a, 0xa8, 0xea, 0xb5,
	0x49, 0x50, 0xfe, 0x21, 0x3f, 0x87, 0x57, 0xe2, 0x2b, 0x8c, 0x6b, 0x89, 0x57, 0x54, 0x0c, 0xba,
	0x7a, 0xf3, 0x30, 0x68, 0xff, 0xf0, 0x21, 0x9c, 0x8f, 0xcb, 0xd8, 0xaf, 0xa4, 0xde, 0x27, 0xe3,
	0x07, 0x6f, 0x4c, 0x8e, 0x95, 0x8f, 0x8d, 0x4b, 0xc3, 0xaf, 0xa4, 0x5e, 0xfb, 0x93, 0x1d, 0x9b,
	0x92, 0x5e, 0x6f, 0xb7, 0x1e, 0x3f, 0xab, 0xe5, 0x9e, 0x3c, 0xab, 0xe5, 0xbe, 0x7c, 0x56, 0xcb,
	0x7d, 0xf2, 0xbc, 0x76, 0xe6, 0xc9, 0xf3, 0xda, 0x99, 0xbf, 0x3f, 0xaf, 0x9d, 0xf9, 0xa0, 0xa9,
	0x1b, 0xce, 0xfe, 0xb0, 0xcb, 0x6a, 0xc8, 0x66, 0xd7, 0xec, 0x5e, 0x77, 0xdb, 0x00, 0x4d, 0xe9,
	0xa7, 0x96, 0x8f, 0x82, 0x1f, 0xa4, 0x8e, 0x6c, 0x4c, 0xbb, 0x67, 0xdd, 0x66, 0xea, 0xb7, 0xbe,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x9d, 0xed, 0xbd, 0xb3, 0x2a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// basic operation of bucket
	CreateBucket(ctx context.Context, in *MsgCreateBucket, opts ...grpc.CallOption) (*MsgCreateBucketResponse, error)
	DeleteBucket(ctx context.Context, in *MsgDeleteBucket, opts ...grpc.CallOption) (*MsgDeleteBucketResponse, error)
	UpdateBucketInfo(ctx context.Context, in *MsgUpdateBucketInfo, opts ...grpc.CallOption) (*MsgUpdateBucketInfoResponse, error)
	MirrorBucket(ctx context.Context, in *MsgMirrorBucket, opts ...grpc.CallOption) (*MsgMirrorBucketResponse, error)
	DiscontinueBucket(ctx context.Context, in *MsgDiscontinueBucket, opts ...grpc.CallOption) (*MsgDiscontinueBucketResponse, error)
	// basic operation of object
	CreateObject(ctx context.Context, in *MsgCreateObject, opts ...grpc.CallOption) (*MsgCreateObjectResponse, error)
	SealObject(ctx context.Context, in *MsgSealObject, opts ...grpc.CallOption) (*MsgSealObjectResponse, error)
	RejectSealObject(ctx context.Context, in *MsgRejectSealObject, opts ...grpc.CallOption) (*MsgRejectSealObjectResponse, error)
	CopyObject(ctx context.Context, in *MsgCopyObject, opts ...grpc.CallOption) (*MsgCopyObjectResponse, error)
	DeleteObject(ctx context.Context, in *MsgDeleteObject, opts ...grpc.CallOption) (*MsgDeleteObjectResponse, error)
	CancelCreateObject(ctx context.Context, in *MsgCancelCreateObject, opts ...grpc.CallOption) (*MsgCancelCreateObjectResponse, error)
	MirrorObject(ctx context.Context, in *MsgMirrorObject, opts ...grpc.CallOption) (*MsgMirrorObjectResponse, error)
	DiscontinueObject(ctx context.Context, in *MsgDiscontinueObject, opts ...grpc.CallOption) (*MsgDiscontinueObjectResponse, error)
	UpdateObjectInfo(ctx context.Context, in *MsgUpdateObjectInfo, opts ...grpc.CallOption) (*MsgUpdateObjectInfoResponse, error)
	// basic operation of group
	CreateGroup(ctx context.Context, in *MsgCreateGroup, opts ...grpc.CallOption) (*MsgCreateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *MsgDeleteGroup, opts ...grpc.CallOption) (*MsgDeleteGroupResponse, error)
	UpdateGroupMember(ctx context.Context, in *MsgUpdateGroupMember, opts ...grpc.CallOption) (*MsgUpdateGroupMemberResponse, error)
	UpdateGroupExtra(ctx context.Context, in *MsgUpdateGroupExtra, opts ...grpc.CallOption) (*MsgUpdateGroupExtraResponse, error)
	LeaveGroup(ctx context.Context, in *MsgLeaveGroup, opts ...grpc.CallOption) (*MsgLeaveGroupResponse, error)
	MirrorGroup(ctx context.Context, in *MsgMirrorGroup, opts ...grpc.CallOption) (*MsgMirrorGroupResponse, error)
	RenewGroupMember(ctx context.Context, in *MsgRenewGroupMember, opts ...grpc.CallOption) (*MsgRenewGroupMemberResponse, error)
	// basic operation of policy
	PutPolicy(ctx context.Context, in *MsgPutPolicy, opts ...grpc.CallOption) (*MsgPutPolicyResponse, error)
	DeletePolicy(ctx context.Context, in *MsgDeletePolicy, opts ...grpc.CallOption) (*MsgDeletePolicyResponse, error)
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	MigrateBucket(ctx context.Context, in *MsgMigrateBucket, opts ...grpc.CallOption) (*MsgMigrateBucketResponse, error)
	CompleteMigrateBucket(ctx context.Context, in *MsgCompleteMigrateBucket, opts ...grpc.CallOption) (*MsgCompleteMigrateBucketResponse, error)
	CancelMigrateBucket(ctx context.Context, in *MsgCancelMigrateBucket, opts ...grpc.CallOption) (*MsgCancelMigrateBucketResponse, error)
	RejectMigrateBucket(ctx context.Context, in *MsgRejectMigrateBucket, opts ...grpc.CallOption) (*MsgRejectMigrateBucketResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateBucket(ctx context.Context, in *MsgCreateBucket, opts ...grpc.CallOption) (*MsgCreateBucketResponse, error) {
	out := new(MsgCreateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBucket(ctx context.Context, in *MsgDeleteBucket, opts ...grpc.CallOption) (*MsgDeleteBucketResponse, error) {
	out := new(MsgDeleteBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBucketInfo(ctx context.Context, in *MsgUpdateBucketInfo, opts ...grpc.CallOption) (*MsgUpdateBucketInfoResponse, error) {
	out := new(MsgUpdateBucketInfoResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/UpdateBucketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MirrorBucket(ctx context.Context, in *MsgMirrorBucket, opts ...grpc.CallOption) (*MsgMirrorBucketResponse, error) {
	out := new(MsgMirrorBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/MirrorBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DiscontinueBucket(ctx context.Context, in *MsgDiscontinueBucket, opts ...grpc.CallOption) (*MsgDiscontinueBucketResponse, error) {
	out := new(MsgDiscontinueBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/DiscontinueBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateObject(ctx context.Context, in *MsgCreateObject, opts ...grpc.CallOption) (*MsgCreateObjectResponse, error) {
	out := new(MsgCreateObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SealObject(ctx context.Context, in *MsgSealObject, opts ...grpc.CallOption) (*MsgSealObjectResponse, error) {
	out := new(MsgSealObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/SealObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RejectSealObject(ctx context.Context, in *MsgRejectSealObject, opts ...grpc.CallOption) (*MsgRejectSealObjectResponse, error) {
	out := new(MsgRejectSealObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/RejectSealObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CopyObject(ctx context.Context, in *MsgCopyObject, opts ...grpc.CallOption) (*MsgCopyObjectResponse, error) {
	out := new(MsgCopyObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/CopyObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteObject(ctx context.Context, in *MsgDeleteObject, opts ...grpc.CallOption) (*MsgDeleteObjectResponse, error) {
	out := new(MsgDeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelCreateObject(ctx context.Context, in *MsgCancelCreateObject, opts ...grpc.CallOption) (*MsgCancelCreateObjectResponse, error) {
	out := new(MsgCancelCreateObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/CancelCreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MirrorObject(ctx context.Context, in *MsgMirrorObject, opts ...grpc.CallOption) (*MsgMirrorObjectResponse, error) {
	out := new(MsgMirrorObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/MirrorObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DiscontinueObject(ctx context.Context, in *MsgDiscontinueObject, opts ...grpc.CallOption) (*MsgDiscontinueObjectResponse, error) {
	out := new(MsgDiscontinueObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/DiscontinueObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateObjectInfo(ctx context.Context, in *MsgUpdateObjectInfo, opts ...grpc.CallOption) (*MsgUpdateObjectInfoResponse, error) {
	out := new(MsgUpdateObjectInfoResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/UpdateObjectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGroup(ctx context.Context, in *MsgCreateGroup, opts ...grpc.CallOption) (*MsgCreateGroupResponse, error) {
	out := new(MsgCreateGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteGroup(ctx context.Context, in *MsgDeleteGroup, opts ...grpc.CallOption) (*MsgDeleteGroupResponse, error) {
	out := new(MsgDeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGroupMember(ctx context.Context, in *MsgUpdateGroupMember, opts ...grpc.CallOption) (*MsgUpdateGroupMemberResponse, error) {
	out := new(MsgUpdateGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/UpdateGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGroupExtra(ctx context.Context, in *MsgUpdateGroupExtra, opts ...grpc.CallOption) (*MsgUpdateGroupExtraResponse, error) {
	out := new(MsgUpdateGroupExtraResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/UpdateGroupExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveGroup(ctx context.Context, in *MsgLeaveGroup, opts ...grpc.CallOption) (*MsgLeaveGroupResponse, error) {
	out := new(MsgLeaveGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MirrorGroup(ctx context.Context, in *MsgMirrorGroup, opts ...grpc.CallOption) (*MsgMirrorGroupResponse, error) {
	out := new(MsgMirrorGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/MirrorGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RenewGroupMember(ctx context.Context, in *MsgRenewGroupMember, opts ...grpc.CallOption) (*MsgRenewGroupMemberResponse, error) {
	out := new(MsgRenewGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/RenewGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PutPolicy(ctx context.Context, in *MsgPutPolicy, opts ...grpc.CallOption) (*MsgPutPolicyResponse, error) {
	out := new(MsgPutPolicyResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/PutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeletePolicy(ctx context.Context, in *MsgDeletePolicy, opts ...grpc.CallOption) (*MsgDeletePolicyResponse, error) {
	out := new(MsgDeletePolicyResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MigrateBucket(ctx context.Context, in *MsgMigrateBucket, opts ...grpc.CallOption) (*MsgMigrateBucketResponse, error) {
	out := new(MsgMigrateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/MigrateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteMigrateBucket(ctx context.Context, in *MsgCompleteMigrateBucket, opts ...grpc.CallOption) (*MsgCompleteMigrateBucketResponse, error) {
	out := new(MsgCompleteMigrateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/CompleteMigrateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelMigrateBucket(ctx context.Context, in *MsgCancelMigrateBucket, opts ...grpc.CallOption) (*MsgCancelMigrateBucketResponse, error) {
	out := new(MsgCancelMigrateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/CancelMigrateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RejectMigrateBucket(ctx context.Context, in *MsgRejectMigrateBucket, opts ...grpc.CallOption) (*MsgRejectMigrateBucketResponse, error) {
	out := new(MsgRejectMigrateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.Msg/RejectMigrateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// basic operation of bucket
	CreateBucket(context.Context, *MsgCreateBucket) (*MsgCreateBucketResponse, error)
	DeleteBucket(context.Context, *MsgDeleteBucket) (*MsgDeleteBucketResponse, error)
	UpdateBucketInfo(context.Context, *MsgUpdateBucketInfo) (*MsgUpdateBucketInfoResponse, error)
	MirrorBucket(context.Context, *MsgMirrorBucket) (*MsgMirrorBucketResponse, error)
	DiscontinueBucket(context.Context, *MsgDiscontinueBucket) (*MsgDiscontinueBucketResponse, error)
	// basic operation of object
	CreateObject(context.Context, *MsgCreateObject) (*MsgCreateObjectResponse, error)
	SealObject(context.Context, *MsgSealObject) (*MsgSealObjectResponse, error)
	RejectSealObject(context.Context, *MsgRejectSealObject) (*MsgRejectSealObjectResponse, error)
	CopyObject(context.Context, *MsgCopyObject) (*MsgCopyObjectResponse, error)
	DeleteObject(context.Context, *MsgDeleteObject) (*MsgDeleteObjectResponse, error)
	CancelCreateObject(context.Context, *MsgCancelCreateObject) (*MsgCancelCreateObjectResponse, error)
	MirrorObject(context.Context, *MsgMirrorObject) (*MsgMirrorObjectResponse, error)
	DiscontinueObject(context.Context, *MsgDiscontinueObject) (*MsgDiscontinueObjectResponse, error)
	UpdateObjectInfo(context.Context, *MsgUpdateObjectInfo) (*MsgUpdateObjectInfoResponse, error)
	// basic operation of group
	CreateGroup(context.Context, *MsgCreateGroup) (*MsgCreateGroupResponse, error)
	DeleteGroup(context.Context, *MsgDeleteGroup) (*MsgDeleteGroupResponse, error)
	UpdateGroupMember(context.Context, *MsgUpdateGroupMember) (*MsgUpdateGroupMemberResponse, error)
	UpdateGroupExtra(context.Context, *MsgUpdateGroupExtra) (*MsgUpdateGroupExtraResponse, error)
	LeaveGroup(context.Context, *MsgLeaveGroup) (*MsgLeaveGroupResponse, error)
	MirrorGroup(context.Context, *MsgMirrorGroup) (*MsgMirrorGroupResponse, error)
	RenewGroupMember(context.Context, *MsgRenewGroupMember) (*MsgRenewGroupMemberResponse, error)
	// basic operation of policy
	PutPolicy(context.Context, *MsgPutPolicy) (*MsgPutPolicyResponse, error)
	DeletePolicy(context.Context, *MsgDeletePolicy) (*MsgDeletePolicyResponse, error)
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	MigrateBucket(context.Context, *MsgMigrateBucket) (*MsgMigrateBucketResponse, error)
	CompleteMigrateBucket(context.Context, *MsgCompleteMigrateBucket) (*MsgCompleteMigrateBucketResponse, error)
	CancelMigrateBucket(context.Context, *MsgCancelMigrateBucket) (*MsgCancelMigrateBucketResponse, error)
	RejectMigrateBucket(context.Context, *MsgRejectMigrateBucket) (*MsgRejectMigrateBucketResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateBucket(ctx context.Context, req *MsgCreateBucket) (*MsgCreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (*UnimplementedMsgServer) DeleteBucket(ctx context.Context, req *MsgDeleteBucket) (*MsgDeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (*UnimplementedMsgServer) UpdateBucketInfo(ctx context.Context, req *MsgUpdateBucketInfo) (*MsgUpdateBucketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketInfo not implemented")
}
func (*UnimplementedMsgServer) MirrorBucket(ctx context.Context, req *MsgMirrorBucket) (*MsgMirrorBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorBucket not implemented")
}
func (*UnimplementedMsgServer) DiscontinueBucket(ctx context.Context, req *MsgDiscontinueBucket) (*MsgDiscontinueBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscontinueBucket not implemented")
}
func (*UnimplementedMsgServer) CreateObject(ctx context.Context, req *MsgCreateObject) (*MsgCreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (*UnimplementedMsgServer) SealObject(ctx context.Context, req *MsgSealObject) (*MsgSealObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealObject not implemented")
}
func (*UnimplementedMsgServer) RejectSealObject(ctx context.Context, req *MsgRejectSealObject) (*MsgRejectSealObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectSealObject not implemented")
}
func (*UnimplementedMsgServer) CopyObject(ctx context.Context, req *MsgCopyObject) (*MsgCopyObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (*UnimplementedMsgServer) DeleteObject(ctx context.Context, req *MsgDeleteObject) (*MsgDeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (*UnimplementedMsgServer) CancelCreateObject(ctx context.Context, req *MsgCancelCreateObject) (*MsgCancelCreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCreateObject not implemented")
}
func (*UnimplementedMsgServer) MirrorObject(ctx context.Context, req *MsgMirrorObject) (*MsgMirrorObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorObject not implemented")
}
func (*UnimplementedMsgServer) DiscontinueObject(ctx context.Context, req *MsgDiscontinueObject) (*MsgDiscontinueObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscontinueObject not implemented")
}
func (*UnimplementedMsgServer) UpdateObjectInfo(ctx context.Context, req *MsgUpdateObjectInfo) (*MsgUpdateObjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectInfo not implemented")
}
func (*UnimplementedMsgServer) CreateGroup(ctx context.Context, req *MsgCreateGroup) (*MsgCreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedMsgServer) DeleteGroup(ctx context.Context, req *MsgDeleteGroup) (*MsgDeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedMsgServer) UpdateGroupMember(ctx context.Context, req *MsgUpdateGroupMember) (*MsgUpdateGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupMember not implemented")
}
func (*UnimplementedMsgServer) UpdateGroupExtra(ctx context.Context, req *MsgUpdateGroupExtra) (*MsgUpdateGroupExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupExtra not implemented")
}
func (*UnimplementedMsgServer) LeaveGroup(ctx context.Context, req *MsgLeaveGroup) (*MsgLeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (*UnimplementedMsgServer) MirrorGroup(ctx context.Context, req *MsgMirrorGroup) (*MsgMirrorGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorGroup not implemented")
}
func (*UnimplementedMsgServer) RenewGroupMember(ctx context.Context, req *MsgRenewGroupMember) (*MsgRenewGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewGroupMember not implemented")
}
func (*UnimplementedMsgServer) PutPolicy(ctx context.Context, req *MsgPutPolicy) (*MsgPutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPolicy not implemented")
}
func (*UnimplementedMsgServer) DeletePolicy(ctx context.Context, req *MsgDeletePolicy) (*MsgDeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) MigrateBucket(ctx context.Context, req *MsgMigrateBucket) (*MsgMigrateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateBucket not implemented")
}
func (*UnimplementedMsgServer) CompleteMigrateBucket(ctx context.Context, req *MsgCompleteMigrateBucket) (*MsgCompleteMigrateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMigrateBucket not implemented")
}
func (*UnimplementedMsgServer) CancelMigrateBucket(ctx context.Context, req *MsgCancelMigrateBucket) (*MsgCancelMigrateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMigrateBucket not implemented")
}
func (*UnimplementedMsgServer) RejectMigrateBucket(ctx context.Context, req *MsgRejectMigrateBucket) (*MsgRejectMigrateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectMigrateBucket not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBucket(ctx, req.(*MsgCreateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBucket(ctx, req.(*MsgDeleteBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBucketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBucketInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBucketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/UpdateBucketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBucketInfo(ctx, req.(*MsgUpdateBucketInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MirrorBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMirrorBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MirrorBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/MirrorBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MirrorBucket(ctx, req.(*MsgMirrorBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DiscontinueBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDiscontinueBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DiscontinueBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/DiscontinueBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DiscontinueBucket(ctx, req.(*MsgDiscontinueBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateObject(ctx, req.(*MsgCreateObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SealObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSealObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SealObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/SealObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SealObject(ctx, req.(*MsgSealObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RejectSealObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRejectSealObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RejectSealObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/RejectSealObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RejectSealObject(ctx, req.(*MsgRejectSealObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CopyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCopyObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CopyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/CopyObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CopyObject(ctx, req.(*MsgCopyObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteObject(ctx, req.(*MsgDeleteObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelCreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelCreateObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelCreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/CancelCreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelCreateObject(ctx, req.(*MsgCancelCreateObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MirrorObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMirrorObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MirrorObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/MirrorObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MirrorObject(ctx, req.(*MsgMirrorObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DiscontinueObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDiscontinueObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DiscontinueObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/DiscontinueObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DiscontinueObject(ctx, req.(*MsgDiscontinueObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/UpdateObjectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateObjectInfo(ctx, req.(*MsgUpdateObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGroup(ctx, req.(*MsgCreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteGroup(ctx, req.(*MsgDeleteGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/UpdateGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGroupMember(ctx, req.(*MsgUpdateGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGroupExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGroupExtra)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGroupExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/UpdateGroupExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGroupExtra(ctx, req.(*MsgUpdateGroupExtra))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveGroup(ctx, req.(*MsgLeaveGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MirrorGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMirrorGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MirrorGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/MirrorGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MirrorGroup(ctx, req.(*MsgMirrorGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RenewGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRenewGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RenewGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/RenewGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RenewGroupMember(ctx, req.(*MsgRenewGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPutPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/PutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PutPolicy(ctx, req.(*MsgPutPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeletePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeletePolicy(ctx, req.(*MsgDeletePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MigrateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMigrateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MigrateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/MigrateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MigrateBucket(ctx, req.(*MsgMigrateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteMigrateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteMigrateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteMigrateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/CompleteMigrateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteMigrateBucket(ctx, req.(*MsgCompleteMigrateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelMigrateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelMigrateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelMigrateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/CancelMigrateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelMigrateBucket(ctx, req.(*MsgCancelMigrateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RejectMigrateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRejectMigrateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RejectMigrateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.Msg/RejectMigrateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RejectMigrateBucket(ctx, req.(*MsgRejectMigrateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greenfield.storage.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _Msg_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _Msg_DeleteBucket_Handler,
		},
		{
			MethodName: "UpdateBucketInfo",
			Handler:    _Msg_UpdateBucketInfo_Handler,
		},
		{
			MethodName: "MirrorBucket",
			Handler:    _Msg_MirrorBucket_Handler,
		},
		{
			MethodName: "DiscontinueBucket",
			Handler:    _Msg_DiscontinueBucket_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _Msg_CreateObject_Handler,
		},
		{
			MethodName: "SealObject",
			Handler:    _Msg_SealObject_Handler,
		},
		{
			MethodName: "RejectSealObject",
			Handler:    _Msg_RejectSealObject_Handler,
		},
		{
			MethodName: "CopyObject",
			Handler:    _Msg_CopyObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Msg_DeleteObject_Handler,
		},
		{
			MethodName: "CancelCreateObject",
			Handler:    _Msg_CancelCreateObject_Handler,
		},
		{
			MethodName: "MirrorObject",
			Handler:    _Msg_MirrorObject_Handler,
		},
		{
			MethodName: "DiscontinueObject",
			Handler:    _Msg_DiscontinueObject_Handler,
		},
		{
			MethodName: "UpdateObjectInfo",
			Handler:    _Msg_UpdateObjectInfo_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Msg_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Msg_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroupMember",
			Handler:    _Msg_UpdateGroupMember_Handler,
		},
		{
			MethodName: "UpdateGroupExtra",
			Handler:    _Msg_UpdateGroupExtra_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Msg_LeaveGroup_Handler,
		},
		{
			MethodName: "MirrorGroup",
			Handler:    _Msg_MirrorGroup_Handler,
		},
		{
			MethodName: "RenewGroupMember",
			Handler:    _Msg_RenewGroupMember_Handler,
		},
		{
			MethodName: "PutPolicy",
			Handler:    _Msg_PutPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Msg_DeletePolicy_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "MigrateBucket",
			Handler:    _Msg_MigrateBucket_Handler,
		},
		{
			MethodName: "CompleteMigrateBucket",
			Handler:    _Msg_CompleteMigrateBucket_Handler,
		},
		{
			MethodName: "CancelMigrateBucket",
			Handler:    _Msg_CancelMigrateBucket_Handler,
		},
		{
			MethodName: "RejectMigrateBucket",
			Handler:    _Msg_RejectMigrateBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greenfield/storage/tx.proto",
}

func (m *MsgCreateBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChargedReadQuota != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChargedReadQuota))
		i--
		dAtA[i] = 0x38
	}
	if m.PrimarySpApproval != nil {
		{
			size, err := m.PrimarySpApproval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.PrimarySpAddress) > 0 {
		i -= len(m.PrimarySpAddress)
		copy(dAtA[i:], m.PrimarySpAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrimarySpAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PaymentAddress) > 0 {
		i -= len(m.PaymentAddress)
		copy(dAtA[i:], m.PaymentAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaymentAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Visibility != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BucketId.Size()
		i -= size
		if _, err := m.BucketId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDiscontinueBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscontinueBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscontinueBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDiscontinueBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscontinueBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscontinueBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedundancyType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RedundancyType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ExpectChecksums) > 0 {
		for iNdEx := len(m.ExpectChecksums) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExpectChecksums[iNdEx])
			copy(dAtA[i:], m.ExpectChecksums[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ExpectChecksums[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.PrimarySpApproval != nil {
		{
			size, err := m.PrimarySpApproval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x32
	}
	if m.Visibility != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x28
	}
	if m.PayloadSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PayloadSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ObjectId.Size()
		i -= size
		if _, err := m.ObjectId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSealObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSealObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSealObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecondarySpBlsAggSignatures) > 0 {
		i -= len(m.SecondarySpBlsAggSignatures)
		copy(dAtA[i:], m.SecondarySpBlsAggSignatures)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecondarySpBlsAggSignatures)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GlobalVirtualGroupId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GlobalVirtualGroupId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSealObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSealObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSealObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRejectSealObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectSealObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectSealObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRejectSealObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectSealObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectSealObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCopyObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCopyObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCopyObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DstPrimarySpApproval != nil {
		{
			size, err := m.DstPrimarySpApproval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DstObjectName) > 0 {
		i -= len(m.DstObjectName)
		copy(dAtA[i:], m.DstObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DstObjectName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcObjectName) > 0 {
		i -= len(m.SrcObjectName)
		copy(dAtA[i:], m.SrcObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcObjectName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DstBucketName) > 0 {
		i -= len(m.DstBucketName)
		copy(dAtA[i:], m.DstBucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DstBucketName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcBucketName) > 0 {
		i -= len(m.SrcBucketName)
		copy(dAtA[i:], m.SrcBucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcBucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCopyObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCopyObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCopyObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ObjectId.Size()
		i -= size
		if _, err := m.ObjectId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDiscontinueObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscontinueObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscontinueObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ObjectIds) > 0 {
		for iNdEx := len(m.ObjectIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ObjectIds[iNdEx].Size()
				i -= size
				if _, err := m.ObjectIds[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDiscontinueObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscontinueObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscontinueObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.GroupId.Size()
		i -= size
		if _, err := m.GroupId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MembersToDelete) > 0 {
		for iNdEx := len(m.MembersToDelete) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersToDelete[iNdEx])
			copy(dAtA[i:], m.MembersToDelete[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.MembersToDelete[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MembersToAdd) > 0 {
		for iNdEx := len(m.MembersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MembersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupOwner) > 0 {
		i -= len(m.GroupOwner)
		copy(dAtA[i:], m.GroupOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGroupMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGroupMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGroupMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRenewGroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRenewGroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRenewGroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupOwner) > 0 {
		i -= len(m.GroupOwner)
		copy(dAtA[i:], m.GroupOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRenewGroupMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRenewGroupMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRenewGroupMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTime != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpirationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpirationTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintTx(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Member) > 0 {
		i -= len(m.Member)
		copy(dAtA[i:], m.Member)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Member)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGroupExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGroupExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGroupExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupOwner) > 0 {
		i -= len(m.GroupOwner)
		copy(dAtA[i:], m.GroupOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGroupExtraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGroupExtraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGroupExtraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLeaveGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupOwner) > 0 {
		i -= len(m.GroupOwner)
		copy(dAtA[i:], m.GroupOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Member) > 0 {
		i -= len(m.Member)
		copy(dAtA[i:], m.Member)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Member)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaveGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBucketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBucketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBucketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PaymentAddress) > 0 {
		i -= len(m.PaymentAddress)
		copy(dAtA[i:], m.PaymentAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaymentAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChargedReadQuota != nil {
		{
			size, err := m.ChargedReadQuota.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBucketInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBucketInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBucketInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelCreateObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelCreateObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelCreateObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelCreateObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelCreateObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelCreateObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPutPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPutPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPutPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTime != nil {
		n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpirationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpirationTime):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintTx(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Statements) > 0 {
		for iNdEx := len(m.Statements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Principal != nil {
		{
			size, err := m.Principal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPutPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPutPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPutPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PolicyId.Size()
		i -= size
		if _, err := m.PolicyId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}

func (m *MsgDeletePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeletePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeletePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Principal != nil {
		{
			size, err := m.Principal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeletePolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeletePolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeletePolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PolicyId.Size()
		i -= size
		if _, err := m.PolicyId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}

func (m *MsgMirrorObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMirrorObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMirrorObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMirrorObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMirrorObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMirrorObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMirrorBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMirrorBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMirrorBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateObjectInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateObjectInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateObjectInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateObjectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateObjectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateObjectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMirrorBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMirrorBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMirrorBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMirrorGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMirrorGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMirrorGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMirrorGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMirrorGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMirrorGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMigrateBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DstPrimarySpApproval != nil {
		{
			size, err := m.DstPrimarySpApproval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DstPrimarySpId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DstPrimarySpId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMigrateBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCompleteMigrateBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteMigrateBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteMigrateBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GvgMappings) > 0 {
		for iNdEx := len(m.GvgMappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GvgMappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GlobalVirtualGroupFamilyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompleteMigrateBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteMigrateBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteMigrateBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelMigrateBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelMigrateBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelMigrateBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelMigrateBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelMigrateBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelMigrateBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRejectMigrateBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectMigrateBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectMigrateBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRejectMigrateBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectMigrateBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectMigrateBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Visibility != 0 {
		n += 1 + sovTx(uint64(m.Visibility))
	}
	l = len(m.PaymentAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrimarySpAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PrimarySpApproval != nil {
		l = m.PrimarySpApproval.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChargedReadQuota != 0 {
		n += 1 + sovTx(uint64(m.ChargedReadQuota))
	}
	return n
}

func (m *MsgCreateBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BucketId.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDeleteBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDiscontinueBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDiscontinueBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PayloadSize != 0 {
		n += 1 + sovTx(uint64(m.PayloadSize))
	}
	if m.Visibility != 0 {
		n += 1 + sovTx(uint64(m.Visibility))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PrimarySpApproval != nil {
		l = m.PrimarySpApproval.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ExpectChecksums) > 0 {
		for _, b := range m.ExpectChecksums {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.RedundancyType != 0 {
		n += 1 + sovTx(uint64(m.RedundancyType))
	}
	return n
}

func (m *MsgCreateObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectId.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSealObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GlobalVirtualGroupId != 0 {
		n += 1 + sovTx(uint64(m.GlobalVirtualGroupId))
	}
	l = len(m.SecondarySpBlsAggSignatures)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSealObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRejectSealObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRejectSealObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCopyObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcBucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DstBucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DstObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DstPrimarySpApproval != nil {
		l = m.DstPrimarySpApproval.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCopyObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectId.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDeleteObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDiscontinueObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ObjectIds) > 0 {
		for _, e := range m.ObjectIds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDiscontinueObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GroupId.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDeleteGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MembersToAdd) > 0 {
		for _, e := range m.MembersToAdd {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.MembersToDelete) > 0 {
		for _, s := range m.MembersToDelete {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateGroupMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRenewGroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRenewGroupMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Member)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExpirationTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpirationTime)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateGroupExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateGroupExtraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLeaveGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Member)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLeaveGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBucketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChargedReadQuota != nil {
		l = m.ChargedReadQuota.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PaymentAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Visibility != 0 {
		n += 1 + sovTx(uint64(m.Visibility))
	}
	return n
}

func (m *MsgUpdateBucketInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelCreateObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelCreateObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPutPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Principal != nil {
		l = m.Principal.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Statements) > 0 {
		for _, e := range m.Statements {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ExpirationTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpirationTime)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPutPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PolicyId.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDeletePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Principal != nil {
		l = m.Principal.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeletePolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PolicyId.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMirrorObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Id.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestChainId != 0 {
		n += 1 + sovTx(uint64(m.DestChainId))
	}
	return n
}

func (m *MsgMirrorObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMirrorBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Id.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestChainId != 0 {
		n += 1 + sovTx(uint64(m.DestChainId))
	}
	return n
}

func (m *MsgUpdateObjectInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateObjectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Visibility != 0 {
		n += 1 + sovTx(uint64(m.Visibility))
	}
	return n
}

func (m *MsgMirrorBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMirrorGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Id.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestChainId != 0 {
		n += 1 + sovTx(uint64(m.DestChainId))
	}
	return n
}

func (m *MsgMirrorGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMigrateBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DstPrimarySpId != 0 {
		n += 1 + sovTx(uint64(m.DstPrimarySpId))
	}
	if m.DstPrimarySpApproval != nil {
		l = m.DstPrimarySpApproval.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMigrateBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCompleteMigrateBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GlobalVirtualGroupFamilyId != 0 {
		n += 1 + sovTx(uint64(m.GlobalVirtualGroupFamilyId))
	}
	if len(m.GvgMappings) > 0 {
		for _, e := range m.GvgMappings {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCompleteMigrateBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelMigrateBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelMigrateBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRejectMigrateBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRejectMigrateBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= VisibilityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimarySpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpApproval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrimarySpApproval == nil {
				m.PrimarySpApproval = &common.Approval{}
			}
			if err := m.PrimarySpApproval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedReadQuota", wireType)
			}
			m.ChargedReadQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChargedReadQuota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BucketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscontinueBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscontinueBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscontinueBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscontinueBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscontinueBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscontinueBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSize", wireType)
			}
			m.PayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= VisibilityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpApproval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrimarySpApproval == nil {
				m.PrimarySpApproval = &common.Approval{}
			}
			if err := m.PrimarySpApproval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectChecksums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectChecksums = append(m.ExpectChecksums, make([]byte, postIndex-iNdEx))
			copy(m.ExpectChecksums[len(m.ExpectChecksums)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedundancyType", wireType)
			}
			m.RedundancyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedundancyType |= RedundancyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSealObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSealObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSealObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupId", wireType)
			}
			m.GlobalVirtualGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondarySpBlsAggSignatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondarySpBlsAggSignatures = append(m.SecondarySpBlsAggSignatures[:0], dAtA[iNdEx:postIndex]...)
			if m.SecondarySpBlsAggSignatures == nil {
				m.SecondarySpBlsAggSignatures = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSealObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSealObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSealObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectSealObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectSealObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectSealObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectSealObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectSealObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectSealObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCopyObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCopyObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCopyObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcBucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstBucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstBucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPrimarySpApproval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstPrimarySpApproval == nil {
				m.DstPrimarySpApproval = &common.Approval{}
			}
			if err := m.DstPrimarySpApproval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCopyObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCopyObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCopyObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscontinueObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscontinueObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscontinueObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v Uint
			m.ObjectIds = append(m.ObjectIds, v)
			if err := m.ObjectIds[len(m.ObjectIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscontinueObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscontinueObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscontinueObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersToAdd = append(m.MembersToAdd, &MsgGroupMember{})
			if err := m.MembersToAdd[len(m.MembersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersToDelete", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersToDelete = append(m.MembersToDelete, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGroupMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGroupMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGroupMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRenewGroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRenewGroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRenewGroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &MsgGroupMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRenewGroupMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRenewGroupMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRenewGroupMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTime == nil {
				m.ExpirationTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGroupExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGroupExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGroupExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGroupExtraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGroupExtraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGroupExtraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBucketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBucketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBucketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedReadQuota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargedReadQuota == nil {
				m.ChargedReadQuota = &common.UInt64Value{}
			}
			if err := m.ChargedReadQuota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= VisibilityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBucketInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBucketInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBucketInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelCreateObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelCreateObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelCreateObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelCreateObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelCreateObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelCreateObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPutPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPutPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPutPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Principal == nil {
				m.Principal = &types.Principal{}
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statements = append(m.Statements, &types.Statement{})
			if err := m.Statements[len(m.Statements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTime == nil {
				m.ExpirationTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPutPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPutPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPutPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PolicyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeletePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeletePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeletePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Principal == nil {
				m.Principal = &types.Principal{}
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeletePolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeletePolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeletePolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PolicyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMirrorObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMirrorObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMirrorObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMirrorObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMirrorObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMirrorObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMirrorBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMirrorBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMirrorBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateObjectInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateObjectInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateObjectInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateObjectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateObjectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateObjectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= VisibilityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMirrorBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMirrorBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMirrorBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMirrorGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMirrorGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMirrorGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMirrorGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMirrorGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMirrorGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPrimarySpId", wireType)
			}
			m.DstPrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPrimarySpApproval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstPrimarySpApproval == nil {
				m.DstPrimarySpApproval = &common.Approval{}
			}
			if err := m.DstPrimarySpApproval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteMigrateBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteMigrateBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteMigrateBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilyId", wireType)
			}
			m.GlobalVirtualGroupFamilyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalVirtualGroupFamilyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GvgMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GvgMappings = append(m.GvgMappings, &GVGMapping{})
			if err := m.GvgMappings[len(m.GvgMappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteMigrateBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteMigrateBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteMigrateBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelMigrateBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelMigrateBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelMigrateBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelMigrateBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelMigrateBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelMigrateBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectMigrateBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectMigrateBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectMigrateBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectMigrateBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectMigrateBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectMigrateBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
