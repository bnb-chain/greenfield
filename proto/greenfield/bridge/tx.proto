syntax = "proto3";
package greenfield.bridge;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "greenfield/bridge/params.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/bnb-chain/greenfield/x/bridge/types";

// Msg defines the Msg service.
service Msg {
  rpc TransferOut(MsgTransferOut) returns (MsgTransferOutResponse);

  // UpdateParams defines a governance operation for updating the x/bridge module parameters.
  // The authority is defined in the keeper.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

// MsgTransferOut is the Msg/TransferOut request type.
message MsgTransferOut {
  option (cosmos.msg.v1.signer) = "from";

  // from address
  string from = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // to address
  string to = 2;
  // transfer token amount
  cosmos.base.v1beta1.Coin amount = 3;
}

// MsgTransferOutResponse is the Msg/TransferOut response type.
message MsgTransferOutResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/crosschain parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// this line is used by starport scaffolding # proto/tx/message
