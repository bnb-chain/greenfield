syntax = "proto3";
package greenfield.storage;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "greenfield/resource/types.proto";
import "greenfield/storage/common.proto";
import "greenfield/storage/types.proto";

option go_package = "github.com/bnb-chain/greenfield/x/storage/types";

// EventCreateBucket is emitted on MsgCreateBucket
message EventCreateBucket {
  // owner define the account address of bucket owner
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is a globally unique name of bucket
  string bucket_name = 2;
  // visibility defines the highest permissions for bucket. When a bucket is public, everyone can get the object under it.
  VisibilityType visibility = 3;
  // create_at define the block timestamp when the bucket has been created
  int64 create_at = 4;
  // bucket_id is the unique u256 for bucket. Not global, only unique in buckets.
  string bucket_id = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // source_type define the source of the bucket. CrossChain or Greenfield origin
  SourceType source_type = 6;
  // read_quota defines the charged traffic quota for read, not include free quota which provided by each storage provider
  uint64 charged_read_quota = 7;
  // payment_address is the address of the payment account
  string payment_address = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // primary_sp_id is the unique id of primary sp.
  uint32 primary_sp_id = 9;
  // global_virtual_group_family_id defines the unique id of gvg family
  uint32 global_virtual_group_family_id = 10;
  // status define the status of the bucket.
  BucketStatus status = 11;
}

// EventDeleteBucket is emitted on MsgDeleteBucket
message EventDeleteBucket {
  // operator define the account address of operator who delete the bucket
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner define the account address of the bucket owner
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the deleted bucket
  string bucket_name = 3;
  // bucket_id define an u256 id for bucket
  string bucket_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // global_virtual_group_family_id defines the unique id of gvg family
  uint32 global_virtual_group_family_id = 5;
}

// EventUpdateBucketInfo is emitted on MsgUpdateBucketInfo
message EventUpdateBucketInfo {
  // operator define the account address of operator who update the bucket
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // bucket_id define an u256 id for bucket
  string bucket_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // charged_read_quota_after define the read quota after updated
  uint64 charged_read_quota = 4;
  // payment_address define the payment address after updated
  string payment_address = 5;
  // visibility defines the highest permission of object.
  VisibilityType visibility = 6;
  // global_virtual_group_family_id defines the gvg family id after migrated.
  uint32 global_virtual_group_family_id = 7;
}

// EventDiscontinueBucket is emitted on MsgDiscontinueBucket
message EventDiscontinueBucket {
  // bucket_id define id of the bucket
  string bucket_id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // the reason
  string reason = 3;
  // the timestamp after which the metadata will be deleted
  int64 delete_at = 4;
}

// EventCreateObject is emitted on MsgCreateObject
message EventCreateObject {
  // creator define the account address of msg creator
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner define the account address of object owner
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of bucket
  string bucket_name = 3;
  // object_name define the name of object
  string object_name = 4;
  // bucket_id define an u256 id for bucket
  string bucket_id = 6 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // object_id define an u256 id for object
  string object_id = 7 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // primary_sp_id define the unique id of primary sp
  uint32 primary_sp_id = 8;
  // payload_size define the size of payload data which you want upload
  uint64 payload_size = 9;
  // visibility defines the highest permission of object.
  VisibilityType visibility = 10;
  // content_type define the content type of the payload data
  string content_type = 11;
  // create_at define the block timestamp when the object created
  int64 create_at = 12;
  // status define the status of the object. INIT or IN_SERVICE or others
  ObjectStatus status = 13;
  // redundancy_type define the type of redundancy. Replication or EC
  RedundancyType redundancy_type = 14;
  // source_type define the source of the object.  CrossChain or Greenfield origin
  SourceType source_type = 15;
  // checksums define the total checksums of the object which generated by redundancy
  repeated bytes checksums = 16;
  // local_virtual_group_id defines the unique id of lvg which the object stored
  uint32 local_virtual_group_id = 17;
}

// EventCancelCreateObject is emitted on MsgCancelCreateObject
message EventCancelCreateObject {
  // operator define the account address of operator who cancel create object
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // object_name define the name of the object
  string object_name = 3;
  // primary_sp_id define the unique id of primary sp
  uint32 primary_sp_id = 4;
  // id define an u256 id for object
  string object_id = 6 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

// EventSealObject is emitted on MsgSealObject
message EventSealObject {
  // operator define the account address of operator who seal object
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // object_name define the name of the object
  string object_name = 3;
  // id define an u256 id for object
  string object_id = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // status define the status of the object. INIT or IN_SERVICE or others
  ObjectStatus status = 6;
  // global_virtual_group_id defines the unique id of gvg which the object stored
  uint32 global_virtual_group_id = 7;
  // local_virtual_group_id defines the unique id of lvg which the object stored
  uint32 local_virtual_group_id = 8;
  // checksums define the total checksums of the object which generated by redundancy
  // SP might set the checksum of object if it was delegated created by SP, which checksum
  // will not be available until sealing object.
  repeated bytes checksums = 9;
}

// EventCopyObject is emitted on MsgCopyObject
message EventCopyObject {
  // operator define the account address of operator who copy the object
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // src_bucket_name define the name of the src bucket
  string src_bucket_name = 2;
  // src_object_name define the name of the src object
  string src_object_name = 3;
  // dst_bucket_name define the name of the dst bucket
  string dst_bucket_name = 4;
  // dst_object_name define the name of the dst object
  string dst_object_name = 5;
  // src_object_id define the u256 id for src object
  string src_object_id = 6 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // dst_object_id define the u256 id for dst object
  string dst_object_id = 7 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // local_virtual_group_id defines the unique id of lvg which the object stored
  uint32 local_virtual_group_id = 8;
}

// EventDeleteObject is emitted on MsgDeleteObject
message EventDeleteObject {
  // operator define the account address of operator who delete the object
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // object_name define the name of the object
  string object_name = 3;
  // id define an u256 id for object
  string object_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // local_virtual_group_id defines the unique id of lvg which the object stored
  uint32 local_virtual_group_id = 5;
}

// EventRejectSealObject is emitted on MsgRejectSealObject
message EventRejectSealObject {
  // operator define the account address of operator who reject seal object
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // object_name define the name of the object
  string object_name = 3;
  // id define an u256 id for object
  string object_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // for_update indicates whether reject sealing on a updating object
  bool for_update = 5;
}

// EventDiscontinueObject is emitted on MsgDiscontinueObject
message EventDiscontinueObject {
  // bucket_name define the name of the bucket
  string bucket_name = 1;
  // object_id defines id of the object
  string object_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // the reason
  string reason = 3;
  // the timestamp after which the metadata will be deleted
  int64 delete_at = 4;
}

// EventUpdateObjectInfo is emitted on MsgUpdateObjectInfo
message EventUpdateObjectInfo {
  // operator define the account address of operator who update the bucket
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // object_name define the name of the object
  string object_name = 3;
  // object_id define an u256 id for object
  string object_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // visibility defines the highest permission of object.
  VisibilityType visibility = 5;
}

// EventCreateGroup is emitted on MsgCreateGroup
message EventCreateGroup {
  // owner define the account address of group owner
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name define the name of the group
  string group_name = 2;
  // id define an u256 id for group
  string group_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // source_type define the source of the group. CrossChain or Greenfield origin
  SourceType source_type = 4;
  // extra defines extra info for the group
  string extra = 5;
}

// EventDeleteGroup is emitted on MsgDeleteGroup
message EventDeleteGroup {
  // owner define the account address of group owner
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name define the name of the group
  string group_name = 3;
  // id define an u256 id for group
  string group_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

// EventLeaveGroup is emitted on MsgLeaveGroup
message EventLeaveGroup {
  // member_address define the address of the member who leave the group
  string member_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner define the account address of group owner
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name define the name of the group
  string group_name = 3;
  // id define an u256 id for group
  string group_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

// EventUpdateGroupMember is emitted on MsgUpdateGroupMember
message EventUpdateGroupMember {
  // operator define the account address of operator who update the group member
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner define the account address of group owner
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name define the name of the group
  string group_name = 3;
  // id define an u256 id for group
  string group_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // members_to_add defines all the members to be added to the group
  repeated EventGroupMemberDetail members_to_add = 5;
  // members_to_add defines all the members to be deleted from the group
  repeated string members_to_delete = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message EventRenewGroupMember {
  // operator define the account address of operator who update the group member
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner define the account address of group owner
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name define the name of the group
  string group_name = 3;
  // id define an u256 id for group
  string group_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // source_type define the source of the group. CrossChain or Greenfield origin
  SourceType source_type = 5;
  // members define the all the address of the members.
  repeated EventGroupMemberDetail members = 6;
}

message EventGroupMemberDetail {
  // member defines the account address of the group member
  string member = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // expiration_time defines the expiration time of the group member
  google.protobuf.Timestamp expiration_time = 2 [(gogoproto.stdtime) = true];
}

// EventUpdateGroupExtra is emitted on MsgUpdateGroupExtra
message EventUpdateGroupExtra {
  // operator define the account address of operator who update the group member
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner define the account address of group owner
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name define the name of the group
  string group_name = 3;
  // id define an u256 id for group
  string group_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // extra defines extra info for the group to update
  string extra = 5;
}

// EventMirrorBucket is emitted on MirrorBucket
message EventMirrorBucket {
  // operator define the account address of operator who mirror the bucket
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket
  string bucket_name = 2;
  // bucket_id define an u256 id for bucket
  string bucket_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // chain id of the destination chain
  uint32 dest_chain_id = 5;
}

// EventMirrorBucketResult is emitted on receiving ack package from destination chain
message EventMirrorBucketResult {
  // status define the status of the result
  uint32 status = 1;
  // bucket_name defines the name of the bucket
  string bucket_name = 2;
  // bucket_id define an u256 id for bucket
  string bucket_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // chain id of the destination chain
  uint32 dest_chain_id = 5;
}

// EventMirrorObject is emitted on MirrorObject
message EventMirrorObject {
  // operator define the account address of operator who delete the object
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // object_name define the name of the object
  string object_name = 3;
  // object_id define an u256 id for object
  string object_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // chain id of the destination chain
  uint32 dest_chain_id = 5;
}

// EventMirrorObjectResult is emitted on receiving ack package from destination chain
message EventMirrorObjectResult {
  // status define the status of the result
  uint32 status = 1;
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // object_name define the name of the object
  string object_name = 3;
  // object_id define an u256 id for object
  string object_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // chain id of the destination chain
  uint32 dest_chain_id = 5;
}

// EventMirrorGroup is emitted on MirrorGroup
message EventMirrorGroup {
  // owner define the account address of group owner
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name define the name of the group
  string group_name = 2;
  // group_id define an u256 id for group
  string group_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // chain id of the destination chain
  uint32 dest_chain_id = 4;
}

// EventMirrorGroupResult is emitted on receiving ack package from destination chain
message EventMirrorGroupResult {
  // status define the status of the result
  uint32 status = 1;
  // group_name define the name of the group
  string group_name = 2;
  // group_id define an u256 id for group
  string group_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // chain id of the destination chain
  uint32 dest_chain_id = 4;
}

// EventStalePolicyCleanup is emitted when specified block height's stale policies need to be Garbage collected
message EventStalePolicyCleanup {
  int64 blockNum = 1;
  DeleteInfo delete_info = 2;
}

message EventMigrationBucket {
  // The address of the operator that initiated the bucket migration,
  // usually the owner of the bucket or another account which has permission to operate
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The name of the bucket to be migrated
  string bucket_name = 2;
  // bucket_id define an u256 id for bucket
  string bucket_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // The id of the destination primary sp
  uint32 dst_primary_sp_id = 4;
  // status define the status of the bucket.
  BucketStatus status = 5;
}

message EventCancelMigrationBucket {
  // The address of the operator that canceled the bucket migration,
  // usually the owner of the bucket or another account which has permission to operate
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The name of the bucket to be migrated
  string bucket_name = 2;
  // bucket_id define an u256 id for bucket
  string bucket_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // status define the status of the bucket.
  BucketStatus status = 4;
}

message EventRejectMigrateBucket {
  // The address of the operator that reject the bucket migration, must be the dest SP
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The name of the bucket to be migrated
  string bucket_name = 2;
  // bucket_id define an u256 id for bucket
  string bucket_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // status define the status of the bucket.
  BucketStatus status = 4;
}

message EventCompleteMigrationBucket {
  // The address of the operator that initiated the bucket migration,
  // usually the owner of the bucket or another account which has permission to operate
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The name of the bucket to be migrated
  string bucket_name = 2;
  // bucket_id define an u256 id for bucket
  string bucket_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // The family id that the bucket to be migrated to
  uint32 global_virtual_group_family_id = 4;
  // The src_primary_sp_id defines the primary sp id of the bucket before migrate.
  uint32 src_primary_sp_id = 5;
  // status define the status of the bucket.
  BucketStatus status = 6;
}

message EventSetTag {
  // resource defines a greenfield standard resource name that can be generated by GRN structure
  string resource = 1;
  // tags define the tag of the source
  ResourceTags tags = 2;
}

// EventUpdateObjectContent is emitted on MsgUpdateObjectContent
message EventUpdateObjectContent {
  // operator define the account address of msg operator
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // object_id is the unique identifier of object
  string object_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  string bucket_name = 3;
  string object_name = 4;
  // payload_size define the size of payload data which you want upload
  uint64 payload_size = 5;
  // checksums define the total checksums of the object which generated by redundancy
  repeated bytes checksums = 6;
  // version define the version of object
  int64 version = 7;
}

// EventUpdateObjectContentSuccess is emitted on the MsgSealObject for updating object
message EventUpdateObjectContentSuccess {
  // operator define the account address of msg operator
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // object_id is the unique identifier of object
  string object_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  string bucket_name = 3;
  string object_name = 4;
  // content_type define the content type of the payload data
  string content_type = 5;
  // prev_payload_size define the size of payload data stored previously
  uint64 prev_payload_size = 6;
  // new_payload_size define the new size of payload data
  uint64 new_payload_size = 7;
  // prev_checksums define the total checksums of the previous object which generated by redundancy
  repeated bytes prev_checksums = 8;
  // new_checksums define the total checksums of the updated object which generated by redundancy
  repeated bytes new_checksums = 9;
  // version define the version of object
  int64 version = 10;
  // updated_at define the block timestamp when the object is updated
  int64 updated_at = 11;
}

// EventCancelUpdateObjectContent is emitted on MsgCancelUpdateObjectContent
message EventCancelUpdateObjectContent {
  // operator define the account address of operator who cancel update object
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // object_name define the name of the object
  string object_name = 3;
  // object_id define the id of the object
  string object_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message EventSetBucketFlowRateLimit {
  // operator define the account address of operator who set the bucket flow rate limit
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name define the name of the bucket
  string bucket_name = 2;
  // payment_address define the payment address for the bucket
  string payment_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_owner define the intended owner of the bucket
  string bucket_owner = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // flow_rate_limit define the flow rate limit of the bucket
  string flow_rate_limit = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventBucketFlowRateLimitStatus {
  // bucket_name define the name of the bucket
  string bucket_name = 1;
  // is_limited define the status of the bucket flow rate limit
  bool is_limited = 2;
  // bucket_id is the unique u256 for bucket. Not global, only unique in buckets.
  string bucket_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message EventToggleSPAsDelegatedAgent {
  // bucket_name define the name of the bucket
  string bucket_name = 1;
  // bucket_id is the unique u256 for bucket. Not global, only unique in buckets.
  string bucket_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // sp_as_delegated_agent_disabled indicates that whether bucket owner disable SP as the upload agent.
  bool sp_as_delegated_agent_disabled = 3;
}
