syntax = "proto3";
package greenfield.storage;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bnb-chain/greenfield/x/storage/types";

// SourceType represents the source of resource creation, which can
// from Greenfield native or from a cross-chain transfer from BSC
enum SourceType {
  option (gogoproto.goproto_enum_prefix) = false;

  SOURCE_TYPE_ORIGIN = 0;
  SOURCE_TYPE_BSC_CROSS_CHAIN = 1;
  SOURCE_TYPE_MIRROR_PENDING = 2;
}

// BucketStatus represents the status of a bucket. After a user successfully
// sends a CreateBucket transaction onto the chain, the status is set to 'Created'.
// When a Discontinue Object transaction is received on chain, the status is set to 'Discontinued'.
enum BucketStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  BUCKET_STATUS_CREATED = 0;
  BUCKET_STATUS_DISCONTINUED = 1;
}

// RedundancyType represents the redundancy algorithm type for object data,
// which can be either multi-replica or erasure coding.
enum RedundancyType {
  option (gogoproto.goproto_enum_prefix) = false;

  REDUNDANCY_EC_TYPE = 0;
  REDUNDANCY_REPLICA_TYPE = 1;
}

// ObjectStatus represents the creation status of an object. After a user successfully
// sends a CreateObject transaction onto the chain, the status is set to 'Created'.
// After the Primary Service Provider successfully sends a Seal Object transaction onto
// the chain, the status is set to 'Sealed'. When a Discontinue Object transaction is
// received on chain, the status is set to 'Discontinued'.
enum ObjectStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  OBJECT_STATUS_CREATED = 0;
  OBJECT_STATUS_SEALED = 1;
  OBJECT_STATUS_DISCONTINUED = 2;
}

// VisibilityType is the resources public status.
enum VisibilityType {
  option (gogoproto.goproto_enum_prefix) = false;
  VISIBILITY_TYPE_UNSPECIFIED = 0;
  VISIBILITY_TYPE_PUBLIC_READ = 1;
  VISIBILITY_TYPE_PRIVATE = 2;
  // If the bucket Visibility is inherit, it's finally set to private. If the object Visibility is inherit, it's the same as bucket.
  VISIBILITY_TYPE_INHERIT = 3;
}

// Approval is the signature information returned by the Primary Storage Provider (SP) to the user
// after allowing them to create a bucket or object, which is then used for verification on the chain
// to ensure agreement between the Primary SP and the user."
message Approval {
  // expired_height is the block height at which the signature expires.
  uint64 expired_height = 1;
  // The signature needs to conform to the EIP 712 specification.
  bytes sig = 2;
}

// SecondarySpSignDoc used to generate seal signature of secondary SP
// If the secondary SP only signs the checksum to declare the object pieces are saved,
// it might be reused by the primary SP to fake it's declaration.
// Then the primary SP can challenge and slash the secondary SP.
// So the id of the object is needed to prevent this.
message SecondarySpSignDoc {
  string sp_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string object_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  bytes checksum = 3;
}
