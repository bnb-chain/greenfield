syntax = "proto3";

package greenfield.storage;

import "cosmos/msg/v1/msg.proto";
// this line is used by starport scaffolding # proto/tx/import
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "greenfield/common/wrapper.proto";
import "greenfield/permission/common.proto";
import "greenfield/storage/common.proto";
import "greenfield/storage/params.proto";

option go_package = "github.com/bnb-chain/greenfield/x/storage/types";

// Msg defines the Msg service.
service Msg {
  // basic operation of bucket
  rpc CreateBucket(MsgCreateBucket) returns (MsgCreateBucketResponse);
  rpc DeleteBucket(MsgDeleteBucket) returns (MsgDeleteBucketResponse);
  rpc UpdateBucketInfo(MsgUpdateBucketInfo) returns (MsgUpdateBucketInfoResponse);
  rpc MirrorBucket(MsgMirrorBucket) returns (MsgMirrorBucketResponse);
  rpc DiscontinueBucket(MsgDiscontinueBucket) returns (MsgDiscontinueBucketResponse);

  // basic operation of object
  rpc CreateObject(MsgCreateObject) returns (MsgCreateObjectResponse);
  rpc SealObject(MsgSealObject) returns (MsgSealObjectResponse);
  rpc RejectSealObject(MsgRejectSealObject) returns (MsgRejectSealObjectResponse);
  rpc CopyObject(MsgCopyObject) returns (MsgCopyObjectResponse);
  rpc DeleteObject(MsgDeleteObject) returns (MsgDeleteObjectResponse);
  rpc CancelCreateObject(MsgCancelCreateObject) returns (MsgCancelCreateObjectResponse);
  rpc MirrorObject(MsgMirrorObject) returns (MsgMirrorObjectResponse);
  rpc DiscontinueObject(MsgDiscontinueObject) returns (MsgDiscontinueObjectResponse);
  rpc UpdateObjectInfo(MsgUpdateObjectInfo) returns (MsgUpdateObjectInfoResponse);

  // basic operation of group
  rpc CreateGroup(MsgCreateGroup) returns (MsgCreateGroupResponse);
  rpc DeleteGroup(MsgDeleteGroup) returns (MsgDeleteGroupResponse);
  rpc UpdateGroupMember(MsgUpdateGroupMember) returns (MsgUpdateGroupMemberResponse);
  rpc UpdateGroupExtra(MsgUpdateGroupExtra) returns (MsgUpdateGroupExtraResponse);
  rpc LeaveGroup(MsgLeaveGroup) returns (MsgLeaveGroupResponse);
  rpc MirrorGroup(MsgMirrorGroup) returns (MsgMirrorGroupResponse);
  // basic operation of policy
  rpc PutPolicy(MsgPutPolicy) returns (MsgPutPolicyResponse);
  rpc DeletePolicy(MsgDeletePolicy) returns (MsgDeletePolicyResponse);

  // UpdateParams defines a governance operation for updating the x/storage module parameters.
  // The authority is defined in the keeper.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}
message MsgCreateBucket {
  option (cosmos.msg.v1.signer) = "creator";

  // creator defines the account address of bucket creator, it is also the bucket owner.
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines a globally unique name of bucket
  string bucket_name = 2;
  // visibility means the bucket is private or public. if private, only bucket owner or grantee can read it,
  // otherwise every greenfield user can read it.
  VisibilityType visibility = 3;
  // payment_address defines an account address specified by bucket owner to pay the read fee. Default: creator
  string payment_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // primary_sp_address defines the address of primary sp.
  string primary_sp_address = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // primary_sp_approval defines the approval info of the primary SP which indicates that primary sp confirm the user's request.
  Approval primary_sp_approval = 7;
  // charged_read_quota defines the read data that users are charged for, measured in bytes.
  // The available read data for each user is the sum of the free read data provided by SP and
  // the ChargeReadQuota specified here.
  uint64 charged_read_quota = 8;
}

message MsgCreateBucketResponse {
  string bucket_id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgDeleteBucket {
  option (cosmos.msg.v1.signer) = "operator";

  // creator defines the account address of the grantee who has the DeleteBucket permission of the bucket to be deleted.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket to be deleted.
  string bucket_name = 2;
}

message MsgDeleteBucketResponse {}

message MsgDiscontinueBucket {
  option (cosmos.msg.v1.signer) = "operator";

  // operator is the sp who wants to stop serving the bucket.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket where the object which to be discontinued is stored.
  string bucket_name = 2;
  // the reason for the request.
  string reason = 3;
}

message MsgDiscontinueBucketResponse {}

message MsgCreateObject {
  option (cosmos.msg.v1.signer) = "creator";

  // creator defines the account address of object uploader
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket where the object is stored.
  string bucket_name = 2;
  // object_name defines the name of object
  string object_name = 3;
  // payload_size defines size of the object's payload
  uint64 payload_size = 4;
  // visibility means the object is private or public. if private, only object owner or grantee can access it,
  // otherwise every greenfield user can access it.
  VisibilityType visibility = 5;
  // content_type defines a standard MIME type describing the format of the object.
  string content_type = 6;
  // primary_sp_approval defines the approval info of the primary SP which indicates that primary sp confirm the user's request.
  Approval primary_sp_approval = 7;
  // expect_checksums defines a list of hashes which was generate by redundancy algorithm.
  repeated bytes expect_checksums = 8;
  // redundancy_type can be ec or replica
  RedundancyType redundancy_type = 9;
  // expect_secondarySPs defines a list of StorageProvider address, which is optional
  repeated string expect_secondary_sp_addresses = 10 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgCreateObjectResponse {
  string object_id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgSealObject {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of primary SP
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket where the object is stored.
  string bucket_name = 2;
  // object_name defines the name of object to be sealed.
  string object_name = 3;
  // secondary_sp_addresses defines a list of storage provider which store the redundant data.
  repeated string secondary_sp_addresses = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // secondary_sp_signatures defines the signature of the secondary sp that can
  // acknowledge that the payload data has received and stored.
  repeated bytes secondary_sp_signatures = 5;
}

message MsgSealObjectResponse {}

message MsgRejectSealObject {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the object owner
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket where the object is stored.
  string bucket_name = 2;
  // object_name defines the name of unsealed object to be reject.
  string object_name = 3;
}

message MsgRejectSealObjectResponse {}

message MsgCopyObject {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator who has the CopyObject permission of the object to be deleted.
  string operator = 1;
  // src_bucket_name defines the name of the bucket where the object to be copied is located
  string src_bucket_name = 2;
  // dst_bucket_name defines the name of the bucket where the object is copied to.
  string dst_bucket_name = 3;
  // src_object_name defines the name of the object which to be copied
  string src_object_name = 4;
  // dst_object_name defines the name of the object which is copied to
  string dst_object_name = 5;
  // primary_sp_approval defines the approval info of the primary SP which indicates that primary sp confirm the user's request.
  Approval dst_primary_sp_approval = 6;
}

message MsgCopyObjectResponse {
  string object_id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgDeleteObject {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator who has the DeleteObject permission of the object to be deleted.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket where the object which to be deleted is stored.
  string bucket_name = 2;
  // object_name defines the name of the object which to be deleted.
  string object_name = 3;
}

message MsgDeleteObjectResponse {}

message MsgDiscontinueObject {
  option (cosmos.msg.v1.signer) = "operator";

  // operator is the sp who wants to stop serving the objects.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket where the object which to be discontinued is stored.
  string bucket_name = 2;
  // object_ids are the ids of object info.
  repeated string object_ids = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // the reason for the request.
  string reason = 4;
}

message MsgDiscontinueObjectResponse {}

message MsgCreateGroup {
  option (cosmos.msg.v1.signer) = "creator";

  // owner defines the account address of group owner who create the group
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name defines the name of the group. it's not globally unique.
  string group_name = 2;
  // member_request defines a list of member which to be add or remove
  repeated string members = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // extra defines extra info for the group
  string extra = 4;
}

message MsgCreateGroupResponse {
  string group_id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgDeleteGroup {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator who has the DeleteGroup permission of the group to be deleted.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name defines the name of the group which to be deleted
  string group_name = 2;
}

message MsgDeleteGroupResponse {}

message MsgUpdateGroupMember {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator who has the UpdateGroupMember permission of the group.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_owner defines the account address of the group owner
  string group_owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name defines the name of the group which to be updated
  string group_name = 3;
  // members_to_add defines a list of members account address which will be add to the group
  repeated string members_to_add = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // members_to_delete defines a list of members account address which will be remove from the group
  repeated string members_to_delete = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgUpdateGroupMemberResponse {}

message MsgUpdateGroupExtra {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator who has the UpdateGroupMember permission of the group.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_owner defines the account address of the group owner
  string group_owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name defines the name of the group which to be updated
  string group_name = 3;
  // extra defines extra info for the group to update
  string Extra = 4;
}

message MsgUpdateGroupExtraResponse {}

message MsgLeaveGroup {
  option (cosmos.msg.v1.signer) = "member";

  // member defines the account address of the member who want to leave the group
  string member = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_owner defines the owner of the group you want to leave
  string group_owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name defines the name of the group you want to leave
  string group_name = 3;
}

message MsgLeaveGroupResponse {}

message MsgUpdateBucketInfo {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of bucket which you'll update
  string bucket_name = 2;
  // charged_read_quota defines the traffic quota that you read from primary sp
  // if read_quota is nil, it means don't change the read_quota
  common.UInt64Value charged_read_quota = 3;
  // payment_address defines the account address of the payment account
  // if payment_address is empty, it means don't change the payment_address
  string payment_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // visibility means the bucket is private or public. if private, only bucket owner or grantee can read it,
  // otherwise every greenfield user can read it.
  VisibilityType visibility = 5;
}

message MsgUpdateBucketInfoResponse {}

message MsgCancelCreateObject {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name defines the name of the bucket
  string bucket_name = 2;
  // object_name defines the name of the object
  string object_name = 3;
}

message MsgCancelCreateObjectResponse {}

message MsgPutPolicy {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the granter who grant the permission to another principal
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Principal defines the roles that can grant permissions. Currently, it can be account or group.
  permission.Principal principal = 2;
  // resource defines a greenfield standard resource name that can be generated by GRN structure
  string resource = 3;
  // statements defines a list of individual statement which describe the detail rules of policy
  repeated permission.Statement statements = 4;
  // expiration_time defines the whole expiration time of all the statements.
  // Notices: Its priority is higher than the expiration time inside the Statement
  google.protobuf.Timestamp expiration_time = 7 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = true
  ];
}

message MsgPutPolicyResponse {
  string policy_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgDeletePolicy {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the granter who grant the permission to another principal
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Principal defines the roles that can grant permissions. Currently, it can be account or group.
  permission.Principal principal = 2;
  // resource defines a greenfield standard resource name that can be generated by GRN structure
  string resource = 3;
}

message MsgDeletePolicyResponse {
  string policy_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgMirrorObject {
  option (cosmos.msg.v1.signer) = "operator";
  // operator defines the account address of the operator who has the DeleteObject permission of the object to be deleted.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id defines the unique u256 for object.
  string id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // bucket_name defines the name of the bucket where the object is stored
  string bucket_name = 3;
  // object_name defines the name of object
  string object_name = 4;
}

message MsgMirrorObjectResponse {}

message MsgMirrorBucket {
  option (cosmos.msg.v1.signer) = "operator";
  // creator defines the account address of the grantee who has the DeleteBucket permission of the bucket to be deleted.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id defines the unique u256 for bucket.
  string id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // bucket_name defines a globally unique name of bucket
  string bucket_name = 3;
}

message MsgUpdateObjectInfoResponse {}

message MsgUpdateObjectInfo {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is the name of the bucket
  string bucket_name = 2;
  // object_name defines the name of bucket which you'll update
  string object_name = 3;
  // visibility means the object is private or public. if private, only bucket owner or grantee can read it,
  // otherwise every greenfield user can read it.
  VisibilityType visibility = 4;
}

message MsgMirrorBucketResponse {}

message MsgMirrorGroup {
  option (cosmos.msg.v1.signer) = "operator";
  // operator defines the account address of the operator who is the owner of the group
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id defines the unique u256 for group.
  string id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // group_name defines the name of the group
  string group_name = 3;
}

message MsgMirrorGroupResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/storage parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// this line is used by starport scaffolding # proto/tx/message
