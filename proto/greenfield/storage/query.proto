syntax = "proto3";
package bnbchain.greenfield.storage;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "greenfield/storage/params.proto";
import "greenfield/storage/types.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/bnb-chain/greenfield/x/storage/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/greenfield/storage/params";
  }

  // this line is used by starport scaffolding # 2

  // Queries a list of Bucket items.
  rpc Bucket(QueryBucketRequest) returns (QueryBucketResponse) {
    option (google.api.http).get = "/greenfield/storage/bucket/{bucket_name}";
  }

  // Queries a list of Object items.
  rpc Object(QueryObjectRequest) returns (QueryObjectResponse) {
    option (google.api.http).get = "/greenfield/storage/object/{bucket_name}/{object_name}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
message QueryBucketRequest {
  string bucket_name = 1;
}

message QueryBucketResponse {
  BucketInfo bucket_info = 1;
}

message QueryObjectRequest {
  string bucket_name = 1;
  string object_name = 2;
}

message QueryObjectResponse {
  ObjectInfo object_info = 1;
}
