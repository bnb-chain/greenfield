syntax = "proto3";

package greenfield.storage;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "greenfield/permission/common.proto";
import "greenfield/permission/types.proto";
import "greenfield/storage/params.proto";
import "greenfield/storage/types.proto";
import "greenfield/virtualgroup/types.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/bnb-chain/greenfield/x/storage/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/greenfield/storage/params";
  }

  // Parameters queries the parameters of the module.
  rpc QueryParamsByTimestamp(QueryParamsByTimestampRequest) returns (QueryParamsByTimestampResponse) {
    option (google.api.http).get = "/greenfield/storage/params/{timestamp}";
  }

  // Queries a bucket with specify name.
  rpc HeadBucket(QueryHeadBucketRequest) returns (QueryHeadBucketResponse) {
    option (google.api.http).get = "/greenfield/storage/head_bucket/{bucket_name}";
  }

  // Queries a bucket by id
  rpc HeadBucketById(QueryHeadBucketByIdRequest) returns (QueryHeadBucketResponse) {
    option (google.api.http).get = "/greenfield/storage/head_bucket_by_id/{bucket_id}";
  }

  // Queries a bucket with EIP712 standard metadata info
  rpc HeadBucketNFT(QueryNFTRequest) returns (QueryBucketNFTResponse) {
    option (google.api.http).get = "/greenfield/storage/head_bucket_nft/{token_id}";
  }

  // Queries a object with specify name.
  rpc HeadObject(QueryHeadObjectRequest) returns (QueryHeadObjectResponse) {
    option (google.api.http).get = "/greenfield/storage/head_object/{bucket_name}/{object_name}";
  }

  // Queries an object by id
  rpc HeadObjectById(QueryHeadObjectByIdRequest) returns (QueryHeadObjectResponse) {
    option (google.api.http).get = "/greenfield/storage/head_object_by_id/{object_id}";
  }

  // Queries a object with EIP712 standard metadata info
  rpc HeadObjectNFT(QueryNFTRequest) returns (QueryObjectNFTResponse) {
    option (google.api.http).get = "/greenfield/storage/head_object_nft/{token_id}";
  }

  // Queries a list of bucket items.
  rpc ListBuckets(QueryListBucketsRequest) returns (QueryListBucketsResponse) {
    option (google.api.http).get = "/greenfield/storage/list_buckets";
  }

  // Queries a list of object items under the bucket.
  rpc ListObjects(QueryListObjectsRequest) returns (QueryListObjectsResponse) {
    option (google.api.http).get = "/greenfield/storage/list_objects/{bucket_name}";
  }

  // Queries a list of object items under the bucket.
  rpc ListObjectsByBucketId(QueryListObjectsByBucketIdRequest) returns (QueryListObjectsResponse) {
    option (google.api.http).get = "/greenfield/storage/list_objects_by_bucket_id/{bucket_id}";
  }

  // Queries a group with EIP712 standard metadata info
  rpc HeadGroupNFT(QueryNFTRequest) returns (QueryGroupNFTResponse) {
    option (google.api.http).get = "/greenfield/storage/head_group_nft/{token_id}";
  }

  // Queries a policy which grants permission to account
  rpc QueryPolicyForAccount(QueryPolicyForAccountRequest) returns (QueryPolicyForAccountResponse) {
    option (google.api.http).get = "/greenfield/storage/policy_for_account/{resource}/{principal_address}";
  }

  // Queries a list of VerifyPermission items.
  rpc VerifyPermission(QueryVerifyPermissionRequest) returns (QueryVerifyPermissionResponse) {
    option (google.api.http).get = "/greenfield/storage/verify_permission/{operator}/{bucket_name}/{action_type}";
  }

  // Queries a group with specify owner and name .
  rpc HeadGroup(QueryHeadGroupRequest) returns (QueryHeadGroupResponse) {
    option (google.api.http).get = "/greenfield/storage/head_group/{group_owner}/{group_name}";
  }

  // Queries a list of ListGroup items.
  rpc ListGroups(QueryListGroupsRequest) returns (QueryListGroupsResponse) {
    option (google.api.http).get = "/greenfield/storage/list_groups/{group_owner}";
  }

  // Queries a list of HeadGroupMember items.
  rpc HeadGroupMember(QueryHeadGroupMemberRequest) returns (QueryHeadGroupMemberResponse) {
    option (google.api.http).get = "/greenfield/storage/head_group_member";
  }

  // Queries a policy that grants permission to a group
  rpc QueryPolicyForGroup(QueryPolicyForGroupRequest) returns (QueryPolicyForGroupResponse) {
    option (google.api.http).get = "/greenfield/storage/policy_for_group/{resource}/{principal_group_id}";
  }

  // Queries a policy by policy id
  rpc QueryPolicyById(QueryPolicyByIdRequest) returns (QueryPolicyByIdResponse) {
    option (google.api.http).get = "/greenfield/storage/policy_by_id/{policy_id}";
  }

  // Queries lock fee for storing an object
  rpc QueryLockFee(QueryLockFeeRequest) returns (QueryLockFeeResponse) {
    option (google.api.http).get = "/greenfield/storage/lock_fee";
  }

  // Queries a bucket extra info (with gvg bindings and price time) with specify name.
  rpc HeadBucketExtra(QueryHeadBucketExtraRequest) returns (QueryHeadBucketExtraResponse) {
    option (google.api.http).get = "/greenfield/storage/head_bucket_extra/{bucket_name}";
  }

  // Queries whether read and storage prices changed for the bucket.
  rpc QueryIsPriceChanged(QueryIsPriceChangedRequest) returns (QueryIsPriceChangedResponse) {
    option (google.api.http).get = "/greenfield/storage/is_price_changed/{bucket_name}";
  }

  // Queries whether read and storage prices changed for the bucket.
  rpc QueryQuotaUpdateTime(QueryQuoteUpdateTimeRequest) returns (QueryQuoteUpdateTimeResponse) {
    option (google.api.http).get = "/greenfield/storage/quota_update_time/{bucket_name}";
  }

  // Queries whether some members are in the group.
  rpc QueryGroupMembersExist(QueryGroupMembersExistRequest) returns (QueryGroupMembersExistResponse) {
    option (google.api.http).get = "/greenfield/storage/group_members_exist/{group_id}/{members}";
  }

  // Queries whether some groups are exist.
  rpc QueryGroupsExist(QueryGroupsExistRequest) returns (QueryGroupsExistResponse) {
    option (google.api.http).get = "/greenfield/storage/groups_exist/{group_owner}/{group_names}";
  }

  // Queries whether some groups are exist by id.
  rpc QueryGroupsExistById(QueryGroupsExistByIdRequest) returns (QueryGroupsExistResponse) {
    option (google.api.http).get = "/greenfield/storage/groups_exist_by_id/{group_ids}";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryVersionedParamsRequest is request type for the Query/Params RPC method with timestamp.
message QueryParamsByTimestampRequest {
  // the timestamp of the block time you want to query
  int64 timestamp = 1;
}

// QueryVersionedParamsResponse is response type for the Query/Params RPC method with timestamp.
message QueryParamsByTimestampResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryHeadBucketRequest {
  string bucket_name = 1;
}

message QueryHeadBucketByIdRequest {
  string bucket_id = 1;
}

message QueryHeadBucketResponse {
  BucketInfo bucket_info = 1;
}

message QueryHeadObjectRequest {
  string bucket_name = 1;
  string object_name = 2;
}

message QueryHeadObjectByIdRequest {
  string object_id = 1;
}

message QueryHeadObjectResponse {
  ObjectInfo object_info = 1;
  virtualgroup.GlobalVirtualGroup global_virtual_group = 2;
}

message QueryListBucketsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryListBucketsResponse {
  repeated BucketInfo bucket_infos = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryListObjectsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string bucket_name = 2;
}

message QueryListObjectsByBucketIdRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string bucket_id = 2;
}

message QueryListObjectsResponse {
  repeated ObjectInfo object_infos = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryNFTRequest {
  string token_id = 1;
}

message QueryBucketNFTResponse {
  BucketMetaData meta_data = 1;
}

message QueryObjectNFTResponse {
  ObjectMetaData meta_data = 1;
}

message QueryGroupNFTResponse {
  GroupMetaData meta_data = 1;
}

message QueryPolicyForAccountRequest {
  string resource = 1;
  string principal_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryPolicyForAccountResponse {
  permission.Policy policy = 1;
}

message QueryVerifyPermissionRequest {
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string bucket_name = 2;
  string object_name = 3;
  permission.ActionType action_type = 4;
}

message QueryVerifyPermissionResponse {
  permission.Effect effect = 1;
}

message QueryHeadGroupRequest {
  string group_owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string group_name = 2;
}

message QueryHeadGroupResponse {
  GroupInfo group_info = 1;
}

message QueryListGroupsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string group_owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryListGroupsResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated GroupInfo group_infos = 2;
}

message QueryHeadGroupMemberRequest {
  string member = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string group_owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string group_name = 3;
}

message QueryHeadGroupMemberResponse {
  permission.GroupMember group_member = 1;
}

message QueryPolicyForGroupRequest {
  string resource = 1;
  string principal_group_id = 2;
}

message QueryPolicyForGroupResponse {
  permission.Policy policy = 1;
}

message QueryPolicyByIdRequest {
  string policy_id = 1;
}

message QueryPolicyByIdResponse {
  permission.Policy policy = 1;
}

message QueryLockFeeRequest {
  // primary_sp_address is the address of the primary sp.
  string primary_sp_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // create_at define the block timestamp when the object created.
  int64 create_at = 2;
  // payloadSize is the total size of the object payload
  uint64 payload_size = 3;
}

message QueryLockFeeResponse {
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryHeadBucketExtraRequest {
  string bucket_name = 1;
}

message QueryHeadBucketExtraResponse {
  InternalBucketInfo extra_info = 1;
}

message QueryIsPriceChangedRequest {
  string bucket_name = 1;
}

message QueryIsPriceChangedResponse {
  bool changed = 1;
  string current_read_price = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string current_primary_store_price = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string current_secondary_store_price = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string current_validator_tax_rate = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string new_read_price = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string new_primary_store_price = 7 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string new_secondary_store_price = 8 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string new_validator_tax_rate = 9 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message QueryQuoteUpdateTimeRequest {
  string bucket_name = 1;
}

message QueryQuoteUpdateTimeResponse {
  int64 update_at = 6;
}

message QueryGroupMembersExistRequest {
  string group_id = 1;
  repeated string members = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGroupMembersExistResponse {
  map<string, bool> exists = 1;
}

message QueryGroupsExistRequest {
  string group_owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated string group_names = 2;
}

message QueryGroupsExistByIdRequest {
  repeated string group_ids = 1;
}

message QueryGroupsExistResponse {
  map<string, bool> exists = 1;
}

// this line is used by starport scaffolding # 3
