syntax = "proto3";
package bnbchain.greenfield.storage;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "greenfield/payment/base.proto";
import "greenfield/storage/common.proto";

option go_package = "github.com/bnb-chain/greenfield/x/storage/types";

message BucketInfo {
  // owner is the account address of bucket creator, it is also the bucket owner.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is a globally unique name of bucket
  string bucket_name = 2;
  // visibility defines the highest permissions for bucket. When a bucket is public, everyone can get storage objects in it.
  VisibilityType visibility = 3;
  // id is the unique identification for bucket.
  string id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // source_type defines which chain the user should send the bucket management transactions to
  SourceType source_type = 5;
  // create_at define the block timestamp when the bucket created.
  int64 create_at = 6;
  // payment_address is the address of the payment account
  string payment_address = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // primary_sp_address is the address of the primary sp. Objects belongs to this bucket will never
  // leave this SP, unless you explicitly shift them to another SP.
  string primary_sp_address = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // charged_read_quota defines the traffic quota for read in bytes per month.
  // The available read data for each user is the sum of the free read data provided by SP and
  // the ChargeReadQuota specified here.
  uint64 charged_read_quota = 9;
  // billing info of the bucket
  BillingInfo billing_info = 10 [(gogoproto.nullable) = false];
}

// BillingInfo is the billing information of the bucket
message BillingInfo {
  // the time of the payment price, used to calculate the charge rate of the bucket
  int64 price_time = 1;
  // the total size of the objects in the bucket, used to calculate the charge rate of the bucket
  uint64 total_charge_size = 2;
  // secondary sp objects size statistics
  repeated SecondarySpObjectsSize secondary_sp_objects_size = 3 [(gogoproto.nullable) = false];
}

// secondary sp objects size statistics
message SecondarySpObjectsSize {
  // address is the address of the secondary sp
  string sp_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // size is the total size of the objects in the secondary sp
  uint64 total_charge_size = 2;
}

message ObjectInfo {
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is the name of the bucket
  string bucket_name = 2;
  // object_name is the name of object
  string object_name = 3;
  // id is the unique identifier of object
  string id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // payloadSize is the total size of the object payload
  uint64 payload_size = 5;
  // visibility defines the highest permissions for object. When an object is public, everyone can access it.
  VisibilityType visibility = 6;
  // content_type define the format of the object which should be a standard MIME type.
  string content_type = 7;
  // create_at define the block timestamp when the object is created
  int64 create_at = 8;
  // object_status define the upload status of the object.
  ObjectStatus object_status = 9;
  // redundancy_type define the type of the redundancy which can be multi-replication or EC.
  RedundancyType redundancy_type = 10;
  // source_type define the source of the object.
  SourceType source_type = 11;
  // checksums define the root hash of the pieces which stored in a SP.
  // add omit tag to omit the field when converting to NFT metadata
  repeated bytes checksums = 12 [(gogoproto.moretags) = "traits:\"omit\""];
  // secondary_sp_addresses define the addresses of secondary_sps
  repeated string secondary_sp_addresses = 13 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message GroupInfo {
  // owner is the owner of the group. It can not changed once it created.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name is the name of group which is unique under an account.
  string group_name = 2;
  // source_type
  SourceType source_type = 3;
  // id is the unique identifier of group
  string id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message Trait {
  string trait_type = 1;
  string value = 2;
}

message BucketMetaData {
  // description
  string description = 1;
  // externalUrl a link to external site to view NFT
  string external_url = 2;
  // name of bucket NFT
  string bucket_name = 3;
  // image is the link to image
  string image = 4;
  // attributes
  repeated Trait attributes = 5 [(gogoproto.nullable) = false];
}

message ObjectMetaData {
  // description
  string description = 1;
  // externalUrl a link to external site to view NFT
  string external_url = 2;
  // name of object NFT
  string object_name = 3;
  // image is the link to image
  string image = 4;
  // attributes
  repeated Trait attributes = 5 [(gogoproto.nullable) = false];
}

message GroupMetaData {
  // description
  string description = 1;
  // externalUrl a link to external site to view NFT
  string external_url = 2;
  // name of group NFT
  string group_name = 3;
  // image is the link to image
  string image = 4;
  // attributes
  repeated Trait attributes = 5 [(gogoproto.nullable) = false];
}
