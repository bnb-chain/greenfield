syntax = "proto3";
package greenfield.storage;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "greenfield/payment/out_flow.proto";
import "greenfield/payment/stream_record.proto";
import "greenfield/storage/common.proto";

option go_package = "github.com/bnb-chain/greenfield/x/storage/types";

message BucketInfo {
  // owner is the account address of bucket creator, it is also the bucket owner.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is a globally unique name of bucket
  string bucket_name = 2;
  // visibility defines the highest permissions for bucket. When a bucket is public, everyone can get storage objects in it.
  VisibilityType visibility = 3;
  // id is the unique identification for bucket.
  string id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // source_type defines which chain the user should send the bucket management transactions to
  SourceType source_type = 5;
  // create_at define the block timestamp when the bucket created.
  int64 create_at = 6;
  // payment_address is the address of the payment account
  string payment_address = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // global_virtual_group_family_id defines the unique id of gvg family
  uint32 global_virtual_group_family_id = 8;
  // charged_read_quota defines the traffic quota for read in bytes per month.
  // The available read data for each user is the sum of the free read data provided by SP and
  // the ChargeReadQuota specified here.
  uint64 charged_read_quota = 9;
  // bucket_status define the status of the bucket.
  BucketStatus bucket_status = 10;
  // tags defines a list of tags the bucket has
  ResourceTags tags = 11;
  // sp_as_delegated_agent_disabled indicates that whether bucket owner disable SP as the upload agent.
  // when a bucket is created, by default, this is false, means SP is allowed to create object for delegator
  bool sp_as_delegated_agent_disabled = 12;
}

message InternalBucketInfo {
  // the time of the payment price, used to calculate the charge rate of the bucket
  int64 price_time = 1;
  // the total size of the objects in the bucket, used to calculate the charge rate of the bucket
  uint64 total_charge_size = 2;
  // local_virtual_groups contains all the lvg of this bucket.
  repeated LocalVirtualGroup local_virtual_groups = 3;
  // next_local_virtual_group_id store the next id used by local virtual group
  uint32 next_local_virtual_group_id = 4;
}

message ObjectInfo {
  // owner is the object owner
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // creator is the address of the uploader, it always be same as owner address
  string creator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is the name of the bucket
  string bucket_name = 3;
  // object_name is the name of object
  string object_name = 4;
  // id is the unique identifier of object
  string id = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  uint32 local_virtual_group_id = 6;
  // payloadSize is the total size of the object payload
  uint64 payload_size = 7;
  // visibility defines the highest permissions for object. When an object is public, everyone can access it.
  VisibilityType visibility = 8;
  // content_type define the format of the object which should be a standard MIME type.
  string content_type = 9;
  // create_at define the block timestamp when the object is created
  int64 create_at = 10;
  // object_status define the upload status of the object.
  ObjectStatus object_status = 11;
  // redundancy_type define the type of the redundancy which can be multi-replication or EC.
  RedundancyType redundancy_type = 12;
  // source_type define the source of the object.
  SourceType source_type = 13;
  // checksums define the root hash of the pieces which stored in a SP.
  // add omit tag to omit the field when converting to NFT metadata
  repeated bytes checksums = 14 [(gogoproto.moretags) = "traits:\"omit\""];
  // tags defines a list of tags the object has
  ResourceTags tags = 15;
  // is_updating indicates whether a object is being updated.
  bool is_updating = 16;
  // updated_at define the block timestamp when the object is updated. Will not be visible until object is re-sealed.
  int64 updated_at = 17;
  // updated_by defined the account address of updater(if there is). Will not be visible until object is re-sealed.
  string updated_by = 18 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // version define the version of object
  int64 version = 19;
}

message GroupInfo {
  // owner is the owner of the group. It can not changed once it created.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name is the name of group which is unique under an account.
  string group_name = 2;
  // source_type
  SourceType source_type = 3;
  // id is the unique identifier of group
  string id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // extra is used to store extra info for the group
  string extra = 5;
  // tags defines a list of tags the group has
  ResourceTags tags = 6;
}

message Trait {
  string trait_type = 1;
  string value = 2;
}

message BucketMetaData {
  // description
  string description = 1;
  // externalUrl a link to external site to view NFT
  string external_url = 2;
  // name of bucket NFT
  string bucket_name = 3;
  // image is the link to image
  string image = 4;
  // attributes
  repeated Trait attributes = 5 [(gogoproto.nullable) = false];
}

message ObjectMetaData {
  // description
  string description = 1;
  // externalUrl a link to external site to view NFT
  string external_url = 2;
  // name of object NFT
  string object_name = 3;
  // image is the link to image
  string image = 4;
  // attributes
  repeated Trait attributes = 5 [(gogoproto.nullable) = false];
}

message GroupMetaData {
  // description
  string description = 1;
  // externalUrl a link to external site to view NFT
  string external_url = 2;
  // name of group NFT
  string group_name = 3;
  // image is the link to image
  string image = 4;
  // attributes
  repeated Trait attributes = 5 [(gogoproto.nullable) = false];
}

message Ids {
  // ids of the objects or buckets
  repeated string id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message DeleteInfo {
  Ids bucket_ids = 1;
  Ids object_ids = 2;
  Ids group_ids = 3;
}

message MigrationBucketInfo {
  uint32 src_sp_id = 1;
  uint32 src_global_virtual_group_family_id = 2;
  uint32 dst_sp_id = 3;
  // id is the unique identifier of bucket
  string bucket_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message ResourceTags {
  message Tag {
    string key = 1;
    string value = 2;
  }
  // tags defines a list of tags the resource has
  repeated Tag tags = 1 [(gogoproto.nullable) = false];
}

message ShadowObjectInfo {
  // operator defines the account address of the operator, either the object owner or the updater with granted permission.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id defines the object id
  string id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // content_type define the content type of the payload data
  string content_type = 3;
  // payload_size is the total size of the object payload
  uint64 payload_size = 4;
  // checksums define the root hash of the pieces which stored in a SP.
  repeated bytes checksums = 5 [(gogoproto.moretags) = "traits:\"omit\""];
  // updated_at define the block timestamp when the object is updated
  int64 updated_at = 6;
  // version define the version of object
  int64 version = 7;
}

message BucketExtraInfo {
  bool is_rate_limited = 1;
  string flow_rate_limit = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string current_flow_rate = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
