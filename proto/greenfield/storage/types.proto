syntax = "proto3";
package bnbchain.greenfield.storage;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "greenfield/payment/base.proto";
import "greenfield/storage/common.proto";

option go_package = "github.com/bnb-chain/greenfield/x/storage/types";

message BucketInfo {
  // owner is the account address of bucket creator, it is also the bucket owner.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is a globally unique name of bucket
  string bucket_name = 2;
  // is_public define the highest permissions for bucket. When the bucket is public, everyone can get the object in it.
  bool is_public = 3;
  // id is the unique identification for bucket.
  string id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // source_type define the source of the bucket
  SourceType source_type = 5;
  // create_at define the block number when the bucket created.
  int64 create_at = 6;
  // payment_address is the address of the payment account
  string payment_address = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // primary_sp_address is the address of the primary sp. Objects belongs to this bucket will never
  // leave this SP, unless you explicitly shift them to another SP.
  string primary_sp_address = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // read_quota defines the traffic quota for read
  ReadQuota read_quota = 9;
  // payment_price_time TODO(Owen): refine the comments
  int64 payment_price_time = 10;
  // payment_out_flows
  repeated payment.OutFlowInUSD payment_out_flows = 11 [(gogoproto.nullable) = false];
}

message ObjectInfo {
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is the name of the bucket
  string bucket_name = 2;
  // object_name is the name of object
  string object_name = 3;
  // id is the unique identifier of object
  string id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // payloadSize is the total size of the object payload
  uint64 payload_size = 5;
  // is_public define the highest permissions for object. When the object is public, everyone can access it.
  bool is_public = 6;
  // content_type define the format of the object which should be a standard MIME type.
  string content_type = 7;
  // create_at define the block number when the object created
  int64 create_at = 8;
  // object_status define the upload status of the object.
  ObjectStatus object_status = 9;
  // redundancy_type define the type of the redundancy which can be multi-replication or EC.
  RedundancyType redundancy_type = 10;
  // source_type define the source of the object.
  SourceType source_type = 11;
  // checksums define the root hash of the pieces which stored in a SP.
  repeated bytes checksums = 12;
  // secondary_sp_addresses define the addresses of secondary_sps
  repeated string secondary_sp_addresses = 13 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // lockedBalance
  string lockedBalance = 14 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"
  ];
}

message GroupInfo {
  // owner is the owner of the group. It can not changed once it created.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // group_name is the name of group which is unique under an account.
  string group_name = 2;
  // source_type
  SourceType source_type = 3;
  // id is the unique identifier of group
  string id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message GroupMemberInfo {
  string member = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  uint64 expire_time = 3;
}
