syntax = "proto3";
package greenfield.permission;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "greenfield/permission/common.proto";
import "greenfield/resource/types.proto";

option go_package = "github.com/bnb-chain/greenfield/x/permission/types";

message Policy {
  // id is an unique u256 sequence for each policy. It also be used as NFT tokenID
  string id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // principal defines the accounts/group which the permission grants to
  Principal principal = 2;
  // resource_type defines the type of resource that grants permission for
  resource.ResourceType resource_type = 3;
  // resource_id defines the bucket/object/group id of the resource that grants permission for
  string resource_id = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // statements defines the details content of the permission, including effect/actions/sub-resources
  repeated Statement statements = 5;
  // expiration_time defines the whole expiration time of all the statements.
  // Notices: Its priority is higher than the expiration time inside the Statement
  google.protobuf.Timestamp expiration_time = 6 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = true
  ];
}

// PolicyGroup refers to a group of policies which grant permission to Group, which is limited to MaxGroupNum (default 10).
// This means that a single resource can only grant permission to 10 groups. The reason for
// this is to enable on-chain determination of whether an operator has permission within a limited time.
message PolicyGroup {
  message Item {
    string policy_id = 1 [
      (cosmos_proto.scalar) = "cosmos.Uint",
      (gogoproto.customtype) = "Uint",
      (gogoproto.nullable) = false
    ];
    string group_id = 2 [
      (cosmos_proto.scalar) = "cosmos.Uint",
      (gogoproto.customtype) = "Uint",
      (gogoproto.nullable) = false
    ];
  }
  // items define a pair of policy_id and group_id. Each resource can only grant its own permissions to a limited number of groups
  repeated Item items = 1;
}

message GroupMember {
  // id is an unique u256 sequence for each group member. It also be used as NFT tokenID
  string id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // group_id is the unique id of the group
  string group_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // member is the account address of the member
  string member = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}
