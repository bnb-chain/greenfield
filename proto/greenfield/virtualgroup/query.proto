syntax = "proto3";

package greenfield.virtualgroup;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "greenfield/virtualgroup/common.proto";
import "greenfield/virtualgroup/params.proto";
import "greenfield/virtualgroup/types.proto";

option go_package = "github.com/bnb-chain/greenfield/x/virtualgroup/types";

// Query defines the gRPC query service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/params";
  }

  // Queries a global virtual group by its id.
  rpc GlobalVirtualGroup(QueryGlobalVirtualGroupRequest) returns (QueryGlobalVirtualGroupResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/global_virtual_group";
  }

  // Queries a list of global virtual groups by family id.
  rpc GlobalVirtualGroupByFamilyID(QueryGlobalVirtualGroupByFamilyIDRequest) returns (QueryGlobalVirtualGroupByFamilyIDResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/global_virtual_group_by_family_id";
  }

  // Queries a global virtual group family by its id.
  rpc GlobalVirtualGroupFamily(QueryGlobalVirtualGroupFamilyRequest) returns (QueryGlobalVirtualGroupFamilyResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/global_virtual_group_family";
  }

  // Queries a list of GlobalVirtualGroupFamilies items.
  rpc GlobalVirtualGroupFamilies(QueryGlobalVirtualGroupFamiliesRequest) returns (QueryGlobalVirtualGroupFamiliesResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/global_virtual_group_families";
  }

  // AvailableGlobalVirtualGroupFamilies filters a list of GlobalVirtualGroupFamilies ID which are qualified to create bucket on
  rpc AvailableGlobalVirtualGroupFamilies(AvailableGlobalVirtualGroupFamiliesRequest) returns (AvailableGlobalVirtualGroupFamiliesResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/available_global_virtual_group_families";
  }

  // SwapInInfo gets reserved swapIn info for a specific global virtual group family or global virtual group
  rpc SwapInInfo(QuerySwapInInfoRequest) returns (QuerySwapInInfoResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/swap_in_info";
  }

  // GVGStatistics gets gvg statistics for a SP
  rpc GVGStatistics(QuerySPGVGStatisticsRequest) returns (QuerySPGVGStatisticsResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/sp_gvg_statistics";
  }

  // QuerySpAvailableGlobalVirtualGroupFamilies filters a list of GlobalVirtualGroupFamilies IDs under a certain SP that are qualified to create a bucket on
  rpc QuerySpAvailableGlobalVirtualGroupFamilies(QuerySPAvailableGlobalVirtualGroupFamiliesRequest) returns (QuerySPAvailableGlobalVirtualGroupFamiliesResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/sp_available_global_virtual_group_families";
  }

  // QuerySpOptimalGlobalVirtualGroupFamily filters the optimal GlobalVirtualGroupFamily under a certain SP that is qualified to create a bucket on
  rpc QuerySpOptimalGlobalVirtualGroupFamily(QuerySpOptimalGlobalVirtualGroupFamilyRequest) returns (QuerySpOptimalGlobalVirtualGroupFamilyResponse) {
    option (google.api.http).get = "/greenfield/virtualgroup/sp_optimal_global_virtual_group_family";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGlobalVirtualGroupRequest {
  uint32 global_virtual_group_id = 1;
}

message QueryGlobalVirtualGroupResponse {
  GlobalVirtualGroup global_virtual_group = 1;
}

message QueryGlobalVirtualGroupByFamilyIDRequest {
  uint32 global_virtual_group_family_id = 1;
}

message QueryGlobalVirtualGroupByFamilyIDResponse {
  repeated GlobalVirtualGroup global_virtual_groups = 1;
}

message QueryGlobalVirtualGroupFamilyRequest {
  uint32 family_id = 1;
}

message QueryGlobalVirtualGroupFamilyResponse {
  GlobalVirtualGroupFamily global_virtual_group_family = 1;
}

message QueryGlobalVirtualGroupFamiliesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryGlobalVirtualGroupFamiliesResponse {
  repeated GlobalVirtualGroupFamily gvg_families = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message AvailableGlobalVirtualGroupFamiliesRequest {
  repeated uint32 global_virtual_group_family_ids = 1;
}

message AvailableGlobalVirtualGroupFamiliesResponse {
  repeated uint32 global_virtual_group_family_ids = 1;
}

message QuerySwapInInfoRequest {
  uint32 global_virtual_group_family_id = 1;
  uint32 global_virtual_group_id = 2;
}

message QuerySwapInInfoResponse {
  SwapInInfo swap_in_info = 1;
}

message QuerySPGVGStatisticsRequest {
  uint32 sp_id = 1;
}

message QuerySPGVGStatisticsResponse {
  GVGStatisticsWithinSP gvg_stats = 1;
}

message QuerySPAvailableGlobalVirtualGroupFamiliesRequest {
  uint32 sp_id = 1;
}

message QuerySPAvailableGlobalVirtualGroupFamiliesResponse {
  repeated uint32 global_virtual_group_family_ids = 1;
}

message QuerySpOptimalGlobalVirtualGroupFamilyRequest {
  uint32 sp_id = 1;
  PickVGFStrategy pick_vgf_strategy = 2;
}

message QuerySpOptimalGlobalVirtualGroupFamilyResponse {
  uint32 global_virtual_group_family_id = 1;
}
