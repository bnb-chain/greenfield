syntax = "proto3";
package greenfield.virtualgroup;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bnb-chain/greenfield/x/virtualgroup/types";

// A global virtual group consists of one primary SP (SP) and multiple secondary SP.
// Every global virtual group must belong to a GVG family, and the objects of each
// bucket must be stored in a GVG within a group family.
message GlobalVirtualGroup {
  // ID represents the unique identifier of the global virtual group.
  uint32 id = 1;
  // Family ID represents the identifier of the GVG family that the group belongs to.
  uint32 family_id = 2;
  // Primary SP ID represents the unique identifier of the primary storage provider in the group.
  uint32 primary_sp_id = 3;
  // Secondary SP IDs represents the list of unique identifiers of the secondary storage providers in the group.
  repeated uint32 secondary_sp_ids = 4;
  // Stored size represents the size of the stored objects within the group.
  uint64 stored_size = 5;
  // Virtual payment address represents the payment address associated with the group.
  string virtual_payment_address = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Total deposit represents the number of tokens deposited by this storage provider for staking.
  string total_deposit = 7 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// Global virtual group family serve as a means of grouping global virtual groups.
// Each bucket must be associated with a unique global virtual group family and cannot cross families.
message GlobalVirtualGroupFamily {
  // id is the identifier of the global virtual group family.
  uint32 id = 1;
  // primary_sp_id
  uint32 primary_sp_id = 2;
  // global_virtual_group_ids is a list of identifiers of the global virtual groups associated with the family.
  repeated uint32 global_virtual_group_ids = 3;
  // virtual_payment_address is the payment address associated with the global virtual group family.
  string virtual_payment_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message GlobalVirtualGroupsBindingOnBucket {
  // bucket_id is the unique identification for the bucket.
  string bucket_id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // global_virtual_group_ids is a list of identifiers of the global virtual groups associated with the bucket.
  repeated uint32 global_virtual_group_ids = 2;
  // local_virtual_group_ids is a list of identifiers of the local virtual groups associated with the bucket.
  repeated uint32 local_virtual_group_ids = 3;
}

message GVGStatisticsWithinSP {
  // storage_provider_id defines the id of the sp which the statistics associated to
  uint32 storage_provider_id = 1;
  // primary_sp_family_count defines the number of the family which this sp serves as primary sp
  uint32 primary_count = 2;
  // secondary_count defines the number of global virtual groups (GVGs) in
  // which this storage provider serves as a secondary storage provider.
  uint32 secondary_count = 3;
}

message SwapOutInfo {
  // sp_id is the unique id of the storage provider who want to swap out.
  uint32 sp_id = 1;
  // successor_sp_id is the id of the successor storage provider.
  uint32 successor_sp_id = 2;
}
