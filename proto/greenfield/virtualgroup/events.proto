syntax = "proto3";
package greenfield.virtualgroup;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bnb-chain/greenfield/x/virtualgroup/types";

message EventCreateGlobalVirtualGroup {
  // The unique id of global virtual group, which is generated by blockchain
  uint32 id = 1;
  // The id of the global virtual group family where the gvg belongs
  uint32 family_id = 2;
  // The id of the primary sp who create this global virtual group
  uint32 primary_sp_id = 3;
  // The ids of the secondary sps which belongs to this global virtual group
  repeated uint32 secondary_sp_ids = 4;
  // The store size of all the objects stores in this global virtual group
  uint64 stored_size = 5;
  // The virtual payment address of this global virtual group, which is auto generated by blockchain
  // And, all users' payment flows will flow to this account
  string virtual_payment_address = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The total amount of the staking for this global virtual group
  string total_deposit = 7 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventUpdateGlobalVirtualGroup {
  // The id of global virtual group, which has been updated
  uint32 id = 1;
  // The store size of all the objects stores in this global virtual group
  uint64 store_size = 2;
  // The total amount of the staking for this global virtual group
  string total_deposit = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // Primary SP ID represents the unique id of the primary storage provider in the group.
  uint32 primary_sp_id = 4;
  // Secondary SP IDs represents the list of unique identifiers of the secondary storage providers in the group.
  repeated uint32 secondary_sp_ids = 5;
}

message EventDeleteGlobalVirtualGroup {
  // The id of global virtual group, which has been deleted
  uint32 id = 1;
  // The id of the primary sp who create this global virtual group family
  uint32 primary_sp_id = 2;
}

message EventCreateGlobalVirtualGroupFamily {
  // The id of global virtual group family, which is auto generated by blockchain
  uint32 id = 1;
  // The id of the primary sp who create this global virtual group family
  uint32 primary_sp_id = 2;
  // The virtual payment address of this global virtual group family, which is auto generated by blockcahin
  // all users' read quota payment flows will flow to this account.
  string virtual_payment_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // global_virtual_group_ids are the ids of gvgs in this family
  repeated uint32 global_virtual_group_ids = 4;
}

message EventUpdateGlobalVirtualGroupFamily {
  // The id of global virtual group family, which is auto generated by blockchain
  uint32 id = 1;
  // The id of the primary sp who create this global virtual group family
  uint32 primary_sp_id = 2;
  // global_virtual_group_ids are the ids of gvgs in this family
  repeated uint32 global_virtual_group_ids = 3;
}

message EventDeleteGlobalVirtualGroupFamily {
  // The id of global virtual group family, which is auto generated by blockchain
  uint32 id = 1;
  // The id of the primary sp who create this global virtual group family
  uint32 primary_sp_id = 2;
}

message EventCreateLocalVirtualGroup {
  // The id of the local virtual group and this ID is unique within the bucket
  // and different buckets will have the same ID
  uint32 id = 1;
  // The id of the bucket
  string bucket_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // The id of the global virtual group
  uint32 global_virtual_group_id = 3;
  // The stored size of all the objects stores in this lvg
  uint64 stored_size = 4;
}

message EventUpdateLocalVirtualGroup {
  // The id of the local virtual group
  uint32 id = 1;
  // The id of the bucket
  string bucket_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // The global_virtual_group_id is gvgid of lvg after migrate
  uint32 global_virtual_group_id = 3;
  // The stored size of all the objects stores in this lvg
  uint64 stored_size = 4;
}

message EventDeleteLocalVirtualGroup {
  // The id of the local virtual group
  uint32 id = 1;
  // The id of the bucket
  string bucket_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
}

message EventSwapOut {
  // The id of the storage provider who wants to swap out
  uint32 storage_provider_id = 1;
  // The id of the gvg family which the storage provider wants to swap out as primary sp
  uint32 global_virtual_group_family_id = 2;
  // The ids of the gvgs which the storage provider wants to swap out as secondary sp
  repeated uint32 global_virtual_group_ids = 3;
  // The id of the successor sp who take over this family or these gvgs
  uint32 successor_sp_id = 4;
}

message EventCompleteSwapOut {
  // The id of the storage provider who complete swap out.
  uint32 storage_provider_id = 1;
  // The id of the storage provider who swap out the family or gvgs
  uint32 src_storage_provider_id = 2;
  // The id of the gvg family
  uint32 global_virtual_group_family_id = 3;
  // The ids of the gvgs
  repeated uint32 global_virtual_group_ids = 4;
}

message EventCancelSwapOut {
  // The id of the storage provider who cancel swap out.
  uint32 storage_provider_id = 1;
  // The id of the gvg family
  uint32 global_virtual_group_family_id = 2;
  // The ids of the gvgs
  repeated uint32 global_virtual_group_ids = 3;
  // The id of the successor sp who take over this family or these gvgs
  uint32 successor_sp_id = 4;
}

message EventStorageProviderExit {
  // The id of the storage provider who wants to exit
  uint32 storage_provider_id = 1;
  // The operator address of the storage provider who wants to exit
  string operator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message EventCompleteStorageProviderExit {
  // The id of the storage provider who complete exit
  uint32 storage_provider_id = 1;
  // The operator address which initials the complete exit transaction.
  string operator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The storage provider address which completes the exit
  string storage_provider_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // total_deposit defines the number of tokens deposited by this storage provider for staking.
  string total_deposit = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // forced_exit whether the exit is a forced exit
  bool forced_exit = 5;
}

message EventReserveSwapIn {
  // The id of the storage provider who wants to swap in
  uint32 storage_provider_id = 1;
  // The id of the gvg family which the storage provider wants to swap in as primary sp
  uint32 global_virtual_group_family_id = 2;
  // The id of the gvg which the storage provider wants to swap in as secondary sp
  uint32 global_virtual_group_id = 3;
  // The id of the target sp who will be swapped
  uint32 target_sp_id = 4;
  // the expiration time of this reserved swapIn
  uint64 expiration_time = 5;
}

message EventCompleteSwapIn {
  // The id of the storage provider who complete swap in.
  uint32 storage_provider_id = 1;
  // The id of the storage provider who swap in the family or gvgs
  uint32 target_storage_provider_id = 2;
  // The id of the gvg family
  uint32 global_virtual_group_family_id = 3;
  // The id of the gvg
  uint32 global_virtual_group_id = 4;
}

message EventCancelSwapIn {
  // The id of the storage provider who cancel swap in.
  uint32 storage_provider_id = 1;
  // The id of the gvg family
  uint32 global_virtual_group_family_id = 2;
  // The id of the gvg
  uint32 global_virtual_group_id = 3;
  // The id of the target sp who was swapped from family or gvgs
  uint32 target_sp_id = 4;
}

message EventStorageProviderForcedExit {
  // The id of the storage provider who wants to exit
  uint32 storage_provider_id = 1;
}

message EventSettleGlobalVirtualGroupFamily {
  // The id of global virtual group family, which is auto generated by blockchain
  uint32 id = 1;
  // The id of the primary sp who will receive the fund
  uint32 sp_id = 2;
  // The funding address of the sp
  string sp_funding_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The amount the fund to send to sp
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventSettleGlobalVirtualGroup {
  // The id of global virtual group, which is auto generated by blockchain
  uint32 id = 1;
  // The ids of the secondary sps who will receive the fund
  repeated uint32 sp_ids = 2;
  // The funding address of the sps
  repeated string sp_funding_addresses = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The amount the fund to send to each sp
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
