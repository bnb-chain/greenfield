syntax = "proto3";
package greenfield.sp;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "greenfield/sp/params.proto";
import "greenfield/sp/types.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/bnb-chain/greenfield/x/sp/types";

// Msg defines the Msg service for creating a new storage provider.
// TODO: add a transaction that the Storage Provide claim themself enter short time maintenance to avoid slash
service Msg {
  rpc CreateStorageProvider(MsgCreateStorageProvider) returns (MsgCreateStorageProviderResponse);
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);
  rpc EditStorageProvider(MsgEditStorageProvider) returns (MsgEditStorageProviderResponse);
  rpc UpdateSpStoragePrice(MsgUpdateSpStoragePrice) returns (MsgUpdateSpStoragePriceResponse);

  // UpdateParams defines a governance operation for updating the x/sp module parameters.
  // The authority is defined in the keeper.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

// MsgCreateStorageProvider defines message for creating a new storage provider.
message MsgCreateStorageProvider {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the msg signer
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // description defines the description terms for the validator.
  Description description = 2 [(gogoproto.nullable) = false];
  // sp_address defines the address of the sp's operator; It also is the unqiue index key of sp.
  string sp_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // fund_address is the account address of the storage provider for deposit, remuneration.
  string funding_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // seal_address is the account address of the storage provider for sealObject
  string seal_address = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // approval_address is the account address of the storage provider for ack CreateBucket/Object.
  string approval_address = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // gc_address defines one of the storage provider's accounts which is used for gc purpose.
  string gc_address = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // endpoint is the service address of the storage provider
  string endpoint = 8;
  // deposit define the deposit token
  cosmos.base.v1beta1.Coin deposit = 9 [(gogoproto.nullable) = false];
  // read price, in bnb wei per charge byte
  string read_price = 10 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // free read quota, in byte
  uint64 free_read_quota = 11;
  // store price, in bnb wei per charge byte
  string store_price = 12 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// MsgCreateStorageProviderResponse defines the Msg/CreateStorageProvider response type.
message MsgCreateStorageProviderResponse {}

// MsgDeposit defines a SDK message for deposit token for sp.
message MsgDeposit {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the msg signer, it should be sp's fund address
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // sp_address is the operator address of sp
  string sp_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // deposit is a mount of token which used to deposit for SP
  cosmos.base.v1beta1.Coin deposit = 3 [(gogoproto.nullable) = false];
}

// MsgDepositResponse defines the Msg/Deposit response type.
message MsgDepositResponse {}

// MsgEditStorageProvider defines a SDK message for editing an existing sp.
message MsgEditStorageProvider {
  option (cosmos.msg.v1.signer) = "sp_address";

  string sp_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string endpoint = 2;
  Description description = 3;
  // seal_address is the account address of the storage provider for sealObject
  string seal_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // approval_address is the account address of the storage provider for ack CreateBucket/Object
  string approval_address = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // gc_address defines one of the storage provider's accounts which is used for gc purpose
  string gc_address = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgEditStorageProviderResponse defines the Msg/EditStorageProvider response type.
message MsgEditStorageProviderResponse {}

message MsgUpdateSpStoragePrice {
  option (cosmos.msg.v1.signer) = "sp_address";

  // sp address
  string sp_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // read price, in bnb wei per charge byte
  string read_price = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // free read quota, in byte
  uint64 free_read_quota = 3;
  // store price, in bnb wei per charge byte
  string store_price = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgUpdateSpStoragePriceResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/sp parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
