syntax = "proto3";
package greenfield.sp;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bnb-chain/greenfield/x/sp/types";

// Description defines a storage provider description.
message Description {
  // moniker defines a human-readable name for the storage provider
  string moniker = 1;
  // identity defines an optional identity signature (ex. UPort or Keybase).
  string identity = 2;
  // website defines an optional website link.
  string website = 3;
  // security_contact defines an optional email for security contact.
  string security_contact = 4;
  // details define other optional details.
  string details = 5;
}

// Status is the status of a storage provider.
enum Status {
  option (gogoproto.goproto_enum_prefix) = false;

  STATUS_IN_SERVICE = 0;
  STATUS_IN_JAILED = 1;
  STATUS_GRACEFUL_EXITING = 2;
  STATUS_OUT_OF_SERVICE = 3;
}

// StorageProvider defines the meta info of storage provider
message StorageProvider {
  // operator_address defines the account address of the storage provider's operator; It also is the unique index key of sp.
  string operator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // funding_address defines one of the storage provider's accounts which is used to deposit and reward.
  string funding_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // seal_address defines one of the storage provider's accounts which is used to SealObject
  string seal_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // approval_address defines one of the storage provider's accounts which is used to approve use's createBucket/createObject request
  string approval_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // gc_address defines one of the storage provider's accounts which is used for gc purpose.
  string gc_address = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // total_deposit defines the number of tokens deposited by this storage provider for staking.
  string total_deposit = 6 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // status defines the current service status of this storage provider
  Status status = 7;
  // endpoint define the storage provider's network service address
  string endpoint = 8;
  // description defines the description terms for the storage provider.
  Description description = 9 [(gogoproto.nullable) = false];
}

message RewardInfo {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// storage price of a specific sp
message SpStoragePrice {
  // sp address
  string sp_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // update time, unix timestamp in seconds
  int64 update_time_sec = 2;
  // read price, in bnb wei per charge byte
  string read_price = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // free read quota, in byte
  uint64 free_read_quota = 4;
  // store price, in bnb wei per charge byte
  string store_price = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// global secondary sp store price, the price for all secondary sps
message SecondarySpStorePrice {
  // update time, unix timestamp in seconds
  int64 update_time_sec = 1;
  // store price, in bnb wei per charge byte
  string store_price = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}
