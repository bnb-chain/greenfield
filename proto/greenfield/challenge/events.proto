syntax = "proto3";
package greenfield.challenge;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "greenfield/challenge/types.proto";

option go_package = "github.com/bnb-chain/greenfield/x/challenge/types";

// EventStartChallenge to indicate a challenge has bee created.
message EventStartChallenge {
  // The id of challenge, which is generated by blockchain.
  uint64 challenge_id = 1;

  // The id of object info to be challenged.
  string object_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];

  // The segment/piece index of the object info.
  uint32 segment_index = 3;

  // The storage provider to be challenged.
  string sp_operator_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The redundancy index, which comes from the index of storage providers.
  int32 redundancy_index = 5;

  // The challenger who submits the challenge.
  string challenger_address = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The challenge will be expired after this height
  uint64 expired_height = 7;
}

// EventAttestChallenge to indicate a challenge has been attested.
message EventAttestChallenge {
  // The id of challenge.
  uint64 challenge_id = 1;

  // The result of challenge.
  VoteResult result = 2;

  // The slashed storage provider address.
  string sp_operator_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The slashed amount from the storage provider.
  string slash_amount = 4;

  // The address of challenger.
  string challenger_address = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The reward amount to the challenger.
  string challenger_reward_amount = 6;

  // The submitter of the challenge attestation.
  string submitter_address = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The reward amount to the submitter.
  string submitter_reward_amount = 8;

  // The reward amount to all current validators.
  string validator_reward_amount = 10;
}
