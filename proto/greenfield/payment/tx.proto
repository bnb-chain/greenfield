syntax = "proto3";

package bnbchain.greenfield.payment;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/bnb-chain/greenfield/x/payment/types";

// Msg defines the Msg service.
service Msg {
  rpc CreatePaymentAccount(MsgCreatePaymentAccount) returns (MsgCreatePaymentAccountResponse);
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);
  rpc DisableRefund(MsgDisableRefund) returns (MsgDisableRefundResponse);
  rpc UpdateSpStoragePrice(MsgUpdateSpStoragePrice) returns (MsgUpdateSpStoragePriceResponse);
}

message MsgCreatePaymentAccount {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the address of the stream account that created the payment account
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgCreatePaymentAccountResponse {}

message MsgDeposit {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the message signer for MsgDeposit and the address of the account to deposit from
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // to is the address of the account to deposit to
  string to = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount to deposit
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgDepositResponse {}

message MsgWithdraw {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the message signer for MsgWithdraw and the address of the receive account
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // from is the address of the account to withdraw from
  string from = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount to withdraw
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgWithdrawResponse {}

message MsgDisableRefund {
  option (cosmos.msg.v1.signer) = "owner";

  // owner is the message signer for MsgDisableRefund and the address of the payment account owner
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // addr is the address of the payment account to disable refund
  string addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgDisableRefundResponse {}

message MsgUpdateSpStoragePrice {
  option (cosmos.msg.v1.signer) = "sp_address";

  // sp address
  string sp_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // if the block time is greater than expire timestamp, the price is invalid and will be ignored
  int64 expire_time = 2;
  // read quota price, in 10 ^ -8 bnb per byte
  string read_quota_price = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // store price, in 10 ^ -8 bnb per charge byte
  string store_price = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgUpdateSpStoragePriceResponse {}
