syntax = "proto3";

package greenfield.payment;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "greenfield/payment/auto_settle_record.proto";
import "greenfield/payment/delayed_withdrawal_record.proto";
import "greenfield/payment/out_flow.proto";
import "greenfield/payment/params.proto";
import "greenfield/payment/payment_account.proto";
import "greenfield/payment/payment_account_count.proto";
import "greenfield/payment/stream_record.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/bnb-chain/greenfield/x/payment/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/greenfield/payment/params";
  }

  // ParamsByTimestamp queries the parameter of the module by timestamp.
  rpc ParamsByTimestamp(QueryParamsByTimestampRequest) returns (QueryParamsByTimestampResponse) {
    option (google.api.http).get = "/greenfield/payment/params/{timestamp}";
  }

  // Queries our flows by account.
  rpc OutFlows(QueryOutFlowsRequest) returns (QueryOutFlowsResponse) {
    option (google.api.http).get = "/greenfield/payment/out_flows/{account}";
  }

  // Queries a stream record by account.
  rpc StreamRecord(QueryGetStreamRecordRequest) returns (QueryGetStreamRecordResponse) {
    option (google.api.http).get = "/greenfield/payment/stream_record/{account}";
  }

  // Queries all stream records.
  rpc StreamRecords(QueryStreamRecordsRequest) returns (QueryStreamRecordsResponse) {
    option (google.api.http).get = "/greenfield/payment/stream_records";
  }

  // Queries the count of payment account by owner.
  rpc PaymentAccountCount(QueryPaymentAccountCountRequest) returns (QueryPaymentAccountCountResponse) {
    option (google.api.http).get = "/greenfield/payment/payment_account_count/{owner}";
  }

  // Queries all counts of payment account for all owners.
  rpc PaymentAccountCounts(QueryPaymentAccountCountsRequest) returns (QueryPaymentAccountCountsResponse) {
    option (google.api.http).get = "/greenfield/payment/payment_account_counts";
  }

  // Queries a payment account by payment account address.
  rpc PaymentAccount(QueryPaymentAccountRequest) returns (QueryPaymentAccountResponse) {
    option (google.api.http).get = "/greenfield/payment/payment_account/{addr}";
  }

  // Queries all payment accounts.
  rpc PaymentAccounts(QueryPaymentAccountsRequest) returns (QueryPaymentAccountsResponse) {
    option (google.api.http).get = "/greenfield/payment/payment_accounts";
  }

  // Queries dynamic balance of a payment account.
  rpc DynamicBalance(QueryDynamicBalanceRequest) returns (QueryDynamicBalanceResponse) {
    option (google.api.http).get = "/greenfield/payment/dynamic_balance/{account}";
  }

  // Queries all payment accounts by a owner.
  rpc PaymentAccountsByOwner(QueryPaymentAccountsByOwnerRequest) returns (QueryPaymentAccountsByOwnerResponse) {
    option (google.api.http).get = "/greenfield/payment/payment_accounts_by_owner/{owner}";
  }

  // Queries all auto settle records.
  rpc AutoSettleRecords(QueryAutoSettleRecordsRequest) returns (QueryAutoSettleRecordsResponse) {
    option (google.api.http).get = "/greenfield/payment/auto_settle_records";
  }

  // Queries delayed withdrawal of a account.
  rpc DelayedWithdrawal(QueryDelayedWithdrawalRequest) returns (QueryDelayedWithdrawalResponse) {
    option (google.api.http).get = "/greenfield/payment/delayed_withdrawal/{account}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryParamsByTimestampRequest is request type for the Query/ParamsByTimestamp RPC method with timestamp.
message QueryParamsByTimestampRequest {
  // the timestamp of the block time you want to query
  int64 timestamp = 1;
}

// QueryParamsByTimestampResponse is response type for the Query/ParamsByTimestamp RPC method with timestamp.
message QueryParamsByTimestampResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryOutFlowsRequest {
  string account = 1;
}

message QueryOutFlowsResponse {
  repeated OutFlow out_flows = 1 [(gogoproto.nullable) = false];
}

message QueryGetStreamRecordRequest {
  string account = 1;
}

message QueryGetStreamRecordResponse {
  StreamRecord stream_record = 1 [(gogoproto.nullable) = false];
}

message QueryStreamRecordsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryStreamRecordsResponse {
  repeated StreamRecord stream_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPaymentAccountCountRequest {
  string owner = 1;
}

message QueryPaymentAccountCountResponse {
  PaymentAccountCount payment_account_count = 1 [(gogoproto.nullable) = false];
}

message QueryPaymentAccountCountsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPaymentAccountCountsResponse {
  repeated PaymentAccountCount payment_account_counts = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPaymentAccountRequest {
  string addr = 1;
}

message QueryPaymentAccountResponse {
  PaymentAccount payment_account = 1 [(gogoproto.nullable) = false];
}

message QueryPaymentAccountsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPaymentAccountsResponse {
  repeated PaymentAccount payment_accounts = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryDynamicBalanceRequest {
  string account = 1;
}

message QueryDynamicBalanceResponse {
  // dynamic balance is static balance + flowDelta
  string dynamic_balance = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // the stream record of the given account, if it does not exist, it will be default values
  StreamRecord stream_record = 2 [(gogoproto.nullable) = false];
  // the timestamp of the current block
  int64 current_timestamp = 3;
  // bank_balance is the BNB balance of the bank module
  string bank_balance = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // available_balance is bank balance + static balance
  string available_balance = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // locked_fee is buffer balance + locked balance
  string locked_fee = 6 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // change_rate is the netflow rate of the given account
  string change_rate = 7 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryPaymentAccountsByOwnerRequest {
  string owner = 1;
}

message QueryPaymentAccountsByOwnerResponse {
  repeated string paymentAccounts = 1;
}

message QueryAutoSettleRecordsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAutoSettleRecordsResponse {
  repeated AutoSettleRecord auto_settle_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryDelayedWithdrawalRequest {
  string account = 1;
}

message QueryDelayedWithdrawalResponse {
  DelayedWithdrawalRecord delayed_withdrawal = 1 [(gogoproto.nullable) = false];
}
