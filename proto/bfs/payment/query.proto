syntax = "proto3";

package bnbchain.bfs.payment;

import "bfs/payment/bnb_price.proto";
import "bfs/payment/flow.proto";
import "bfs/payment/mock_bucket_meta.proto";
import "bfs/payment/mock_object_info.proto";
import "bfs/payment/params.proto";
import "bfs/payment/payment_account.proto";
import "bfs/payment/payment_account_count.proto";
import "bfs/payment/stream_record.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "bfs/payment/auto_settle_record.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/bnb-chain/bfs/x/payment/types";

// Query defines the gRPC querier service.
service Query {

  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/bfs/payment/params";

  }

  // Queries a StreamRecord by index.
  rpc StreamRecord (QueryGetStreamRecordRequest) returns (QueryGetStreamRecordResponse) {
    option (google.api.http).get = "/bfs/payment/stream_record/{account}";

  }

  // Queries a list of StreamRecord items.
  rpc StreamRecordAll (QueryAllStreamRecordRequest) returns (QueryAllStreamRecordResponse) {
    option (google.api.http).get = "/bfs/payment/stream_record";

  }

  // Queries a PaymentAccountCount by index.
  rpc PaymentAccountCount (QueryGetPaymentAccountCountRequest) returns (QueryGetPaymentAccountCountResponse) {
    option (google.api.http).get = "/bfs/payment/payment_account_count/{owner}";

  }

  // Queries a list of PaymentAccountCount items.
  rpc PaymentAccountCountAll (QueryAllPaymentAccountCountRequest) returns (QueryAllPaymentAccountCountResponse) {
    option (google.api.http).get = "/bfs/payment/payment_account_count";

  }

  // Queries a PaymentAccount by index.
  rpc PaymentAccount (QueryGetPaymentAccountRequest) returns (QueryGetPaymentAccountResponse) {
    option (google.api.http).get = "/bfs/payment/payment_account/{addr}";

  }

  // Queries a list of PaymentAccount items.
  rpc PaymentAccountAll (QueryAllPaymentAccountRequest) returns (QueryAllPaymentAccountResponse) {
    option (google.api.http).get = "/bfs/payment/payment_account";

  }

  // Queries a list of DynamicBalance items.
  rpc DynamicBalance (QueryDynamicBalanceRequest) returns (QueryDynamicBalanceResponse) {
    option (google.api.http).get = "/bfs/payment/dynamic_balance/{account}";

  }

  // Queries a list of GetPaymentAccountsByOwner items.
  rpc GetPaymentAccountsByOwner (QueryGetPaymentAccountsByOwnerRequest) returns (QueryGetPaymentAccountsByOwnerResponse) {
    option (google.api.http).get = "/bfs/payment/get_payment_accounts_by_owner/{owner}";

  }

  // this line is used by starport scaffolding # 2

  // Queries a list of MockBucketMeta items.
  rpc MockBucketMeta    (QueryGetMockBucketMetaRequest) returns (QueryGetMockBucketMetaResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/mock_bucket_meta/{bucketName}";

  }
  rpc MockBucketMetaAll (QueryAllMockBucketMetaRequest) returns (QueryAllMockBucketMetaResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/mock_bucket_meta";

  }

  // Queries a list of Flow items.
  rpc Flow    (QueryGetFlowRequest) returns (QueryGetFlowResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/flow/{from}/{to}";

  }
  rpc FlowAll (QueryAllFlowRequest) returns (QueryAllFlowResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/flow";

  }

  // Queries a BnbPrice by index.
  rpc BnbPrice (QueryGetBnbPriceRequest) returns (QueryGetBnbPriceResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/bnb_price";

  }

  // Queries a list of MockObjectInfo items.
  rpc MockObjectInfo    (QueryGetMockObjectInfoRequest) returns (QueryGetMockObjectInfoResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/mock_object_info/{bucketName}/{objectName}";

  }
  rpc MockObjectInfoAll (QueryAllMockObjectInfoRequest) returns (QueryAllMockObjectInfoResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/mock_object_info";

  }

  // Queries a list of AutoSettleRecord items.
  rpc AutoSettleRecord    (QueryGetAutoSettleRecordRequest) returns (QueryGetAutoSettleRecordResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/auto_settle_record/{timestamp}/{addr}";

  }
  rpc AutoSettleRecordAll (QueryAllAutoSettleRecordRequest) returns (QueryAllAutoSettleRecordResponse) {
    option (google.api.http).get = "/bnb-chain/bfs/payment/auto_settle_record";

  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetStreamRecordRequest {
  string account = 1;
}

message QueryGetStreamRecordResponse {
  StreamRecord streamRecord = 1 [(gogoproto.nullable) = false];
}

message QueryAllStreamRecordRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStreamRecordResponse {
  repeated StreamRecord                           streamRecord = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination   = 2;
}

message QueryGetPaymentAccountCountRequest {
  string owner = 1;
}

message QueryGetPaymentAccountCountResponse {
  PaymentAccountCount paymentAccountCount = 1 [(gogoproto.nullable) = false];
}

message QueryAllPaymentAccountCountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPaymentAccountCountResponse {
  repeated PaymentAccountCount                    paymentAccountCount = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination          = 2;
}

message QueryGetPaymentAccountRequest {
  string addr = 1;
}

message QueryGetPaymentAccountResponse {
  PaymentAccount paymentAccount = 1 [(gogoproto.nullable) = false];
}

message QueryAllPaymentAccountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPaymentAccountResponse {
  repeated PaymentAccount                         paymentAccount = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination     = 2;
}

message QueryDynamicBalanceRequest {
  string account = 1;
}

message QueryDynamicBalanceResponse {
  string       dynamicBalance   = 1 [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  StreamRecord streamRecord     = 2 [(gogoproto.nullable)  = false       ] ;
  int64        currentTimestamp = 3;
}

message QueryGetPaymentAccountsByOwnerRequest {
  string owner = 1;
}

message QueryGetPaymentAccountsByOwnerResponse {
  repeated string paymentAccounts = 1;
}

// this line is used by starport scaffolding # 3
message QueryGetMockBucketMetaRequest {
  string bucketName = 1;
}

message QueryGetMockBucketMetaResponse {
  MockBucketMeta mockBucketMeta = 1 [(gogoproto.nullable) = false];
}

message QueryAllMockBucketMetaRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMockBucketMetaResponse {
  repeated MockBucketMeta                         mockBucketMeta = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination     = 2;
}

message QueryGetFlowRequest {
  string from = 1;
  string to   = 2;
}

message QueryGetFlowResponse {
  Flow flow = 1 [(gogoproto.nullable) = false];
}

message QueryAllFlowRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFlowResponse {
  repeated Flow                                   flow       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBnbPriceRequest {}

message QueryGetBnbPriceResponse {
  BnbPrice BnbPrice = 1 [(gogoproto.nullable) = false];
}

message QueryGetMockObjectInfoRequest {
  string bucketName = 1;
  string objectName = 2;
}

message QueryGetMockObjectInfoResponse {
  MockObjectInfo mockObjectInfo = 1 [(gogoproto.nullable) = false];
}

message QueryAllMockObjectInfoRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMockObjectInfoResponse {
  repeated MockObjectInfo                         mockObjectInfo = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination     = 2;
}

message QueryGetAutoSettleRecordRequest {
  int64  timestamp = 1;
  string addr      = 2;
}

message QueryGetAutoSettleRecordResponse {
  AutoSettleRecord autoSettleRecord = 1 [(gogoproto.nullable) = false];
}

message QueryAllAutoSettleRecordRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAutoSettleRecordResponse {
  repeated AutoSettleRecord                       autoSettleRecord = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination       = 2;
}
